"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[2797],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,b=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(b,s(s({ref:t},p),{},{components:n})):a.createElement(b,s({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1533:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:5},s="Object Literals",i={unversionedId:"3 Javascript/arrays-and-objects-docs/object-literals",id:"3 Javascript/arrays-and-objects-docs/object-literals",title:"Object Literals",description:"I want to talk about a very common JavaScript data structure that holds key/value pairs called an object literal. We can also create objects using a constructor, but I will get into that later on. The main difference between using a constructor and an object literal is that the object literal is a singleton, meaning that it is a single instance of the object. With a constructor, we can create multiple instances of the object. Most of the time, we will use the object literal syntax.",source:"@site/docs/3 Javascript/02-arrays-and-objects-docs/05-object-literals.md",sourceDirName:"3 Javascript/02-arrays-and-objects-docs",slug:"/3 Javascript/arrays-and-objects-docs/object-literals",permalink:"/fundamentals/3 Javascript/arrays-and-objects-docs/object-literals",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Array Challenges",permalink:"/fundamentals/3 Javascript/arrays-and-objects-docs/array-challenges"},next:{title:"Object Nesting, spreading, methods and more",permalink:"/fundamentals/3 Javascript/arrays-and-objects-docs/object-spread-methods"}},l={},c=[{value:"Accessing property values",id:"accessing-property-values",level:3},{value:"Adding &amp; updating properties",id:"adding--updating-properties",level:3},{value:"Removing properties",id:"removing-properties",level:3},{value:"Adding functions to objects",id:"adding-functions-to-objects",level:3},{value:"Using multiple words in property names",id:"using-multiple-words-in-property-names",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"object-literals"},"Object Literals"),(0,r.kt)("p",null,"I want to talk about a very common JavaScript data structure that holds key/value pairs called an ",(0,r.kt)("inlineCode",{parentName:"p"},"object literal"),". We can also create objects using a ",(0,r.kt)("inlineCode",{parentName:"p"},"constructor"),", but I will get into that later on. The main difference between using a constructor and an object literal is that the object literal is a ",(0,r.kt)("inlineCode",{parentName:"p"},"singleton"),", meaning that it is a ",(0,r.kt)("strong",{parentName:"p"},"single instance")," of the object. With a constructor, we can create multiple instances of the object. Most of the time, we will use the object literal syntax."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"objects",src:n(3834).Z,width:"875",height:"335"})),(0,r.kt)("p",null,"The image above shows us the syntax to create a new object. Essentially, all an object is, is a set of ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"key/value")," pairs. The ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," is often called the ",(0,r.kt)("inlineCode",{parentName:"p"},"property name"),". The values go by the same types and principles as anything you would set in a regular variable (string, number, boolean, etc)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const person = {\n  name: 'John',\n  age: 30,\n  location: 'Boston',\n  hobbies: ['movies', 'music'],\n  isAdmin: false,\n}\n")),(0,r.kt)("p",null,"We can also nest objects, but I'm going to go over that in next video."),(0,r.kt)("h3",{id:"accessing-property-values"},"Accessing property values"),(0,r.kt)("p",null,"To access a value, we can use both dot notation and bracket notation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Dot notation\nperson.name // John\n\n// Bracket notation\nperson['name'] // John\n")),(0,r.kt)("p",null,"We will typically use dot notation and use brackets with arrays. Although, technically arrays are just objects with a numeric index."),(0,r.kt)("p",null,"To access the first hobby in the array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"person.hobbies[0] // movies\n")),(0,r.kt)("h3",{id:"adding--updating-properties"},"Adding & updating properties"),(0,r.kt)("p",null,"I just manually added and changed some of the properties directly in the object above, but to programmatically add or change properties, we could do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"person.email = 'john@gmail.com' // Add a new property\nperson.isAdmin = true // Update an existing property\n")),(0,r.kt)("h3",{id:"removing-properties"},"Removing properties"),(0,r.kt)("p",null,"To remove a property, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," keyword."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"delete person.isAdmin\n")),(0,r.kt)("h3",{id:"adding-functions-to-objects"},"Adding functions to objects"),(0,r.kt)("p",null,"Not only can we store primitives, arrays and other objects, we can also store functions as an object's property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"person.greet = function () {\n  console.log('Hello, my name is ' + this.name)\n}\n")),(0,r.kt)("p",null,"Notice I used the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," to access the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," property. This is because ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," refers to the object that the function is being called on. This is where ",(0,r.kt)("inlineCode",{parentName:"p"},"scope")," comes into play. If we are in the ",(0,r.kt)("inlineCode",{parentName:"p"},"global scope"),", then the ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," keyword refers to the ",(0,r.kt)("inlineCode",{parentName:"p"},"global object")," or the ",(0,r.kt)("inlineCode",{parentName:"p"},"window")," in the browser. We'll get more into scope in the next section."),(0,r.kt)("p",null,"We can call the greet function like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"person.greet() // Hello, my name is John\n")),(0,r.kt)("h3",{id:"using-multiple-words-in-property-names"},"Using multiple words in property names"),(0,r.kt)("p",null,"If you want to use multiple words as a property name or key, you can use quotes or backticks to wrap the property name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const person2 = {\n  'first name': 'Brad',\n  'last name': 'Traversy',\n}\n")),(0,r.kt)("p",null,"We have to use bracket notation when using property names with multiple words."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"person2['first name'] // Brad\n")))}d.isMDXComponent=!0},3834:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/object-de399210878a1731b44aa4e1053f4470.png"}}]);