"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[2424],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=i(a),d=r,k=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return a?n.createElement(k,s(s({ref:t},u),{},{components:a})):n.createElement(k,s({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,s[1]=l;for(var i=2;i<o;i++)s[i]=a[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5299:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:7},s="Operators & Arithmetic",l={unversionedId:"3 Javascript/variables-data-types-docs/operators",id:"3 Javascript/variables-data-types-docs/operators",title:"Operators & Arithmetic",description:"In order to look at implicit type coercion in the next video, we'll be using some operators, so I thought that this would be a good time to go over JavaScript operators. Most of these are in just about every language. This is really easy stuff, but I want to make sure we cover everything.",source:"@site/docs/3 Javascript/01-variables-data-types-docs/07-operators.md",sourceDirName:"3 Javascript/01-variables-data-types-docs",slug:"/3 Javascript/variables-data-types-docs/operators",permalink:"/fundamentals/3 Javascript/variables-data-types-docs/operators",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Type Conversion",permalink:"/fundamentals/3 Javascript/variables-data-types-docs/type-conversion"},next:{title:"Type Coercion",permalink:"/fundamentals/3 Javascript/variables-data-types-docs/type-coercion"}},p={},i=[{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Assignment Operators",id:"assignment-operators",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"== vs ===",id:"-vs-",level:3}],u={toc:i},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"operators--arithmetic"},"Operators & Arithmetic"),(0,r.kt)("p",null,"In order to look at implicit type coercion in the next video, we'll be using some operators, so I thought that this would be a good time to go over JavaScript operators. Most of these are in just about every language. This is really easy stuff, but I want to make sure we cover everything."),(0,r.kt)("p",null,"We have a few different types of operators"),(0,r.kt)("h3",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Addition"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"subtraction"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"multiplication")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"division")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"5 + 5 // 10\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"10 - 5 // 5\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"5 * 5 // 25\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"10 / 2 // 5\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Concatenation"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," operator can also be used to put 2 or more strings together. The use of ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," depends on the data type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"'Hello, ' + 'World!' // Hello World!\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Modulus")," is used to get a division remainder"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"10 % 3 // 1\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Exponentiation")," returns the result of the first operand to the power of the second."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"2 ** 3 // 8\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Increment")," is used to ",(0,r.kt)("strong",{parentName:"p"},"increment")," or add 1 to a value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"x = 10\nx++ // 11\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Decrement")," is used to ",(0,r.kt)("strong",{parentName:"p"},"decrement")," or remove 1 from a value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"x = 10\nx-- // 9\n")),(0,r.kt)("h3",{id:"assignment-operators"},"Assignment Operators"),(0,r.kt)("p",null,"Assignment operators do something with the value on the right side to set the variable on the left side."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Value assignment operator")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"x = 10\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Addition assignment operator")," adds the amount on the right side"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"x = 10\nx += 10 // 20\n// Same as x = x + 10\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Subtraction assignment operato"),"r subtracts the amount on the right side"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"x = 10\nx -= 10 // 0\n// Same as x = x - 10\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Multiplication assignment operator")," multiplies the amount on the right side"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"x = 10\nx *= 10 // 100\n// Same as x = x \\* 10\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Division assignment operator")," divides the amount on the right side"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"x = 10\nx /= 10 // 1\n// Same as x = x / 10\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Modulo assignment operator")," gets division remainder of the amount on the right side"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"x = 10\nx %= 10 // 0\n// Same as x = x % 10\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Exponentiation assignment operator")," gets exponent of the amount on the right side"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"x = 10\nx **= 10 // 100\n// Same as x = x \\*\\* 10\n")),(0,r.kt)("h3",{id:"comparison-operators"},"Comparison Operators"),(0,r.kt)("p",null,"Comparison operators are used to compare values"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Equal to operator")," - The following will return true even if the types do not match"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"2 == 2 // true\n2 == '2' // true\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Equal value & equal type")," - The types have to match or it will return false"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"2 === 2 // true\n2 === '2' // false\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Not equal to operator")," - returns true if not equal"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"2 != 2 // false\n2 != '2' // false\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Not equal value & equal type")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"2 !== 2 // false\n2 !== '2' // true\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Greater than")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"10 > 5 // true\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Less than")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"10 < 5 // false\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Greater than or equal")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"10 >= 5 // true\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Less than or equal")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"10 <= 5 // false\n")),(0,r.kt)("h3",{id:"-vs-"},"== vs ==="),(0,r.kt)("p",null,"As I said above, the ",(0,r.kt)("inlineCode",{parentName:"p"},"==")," operator is used to compare values. The ",(0,r.kt)("inlineCode",{parentName:"p"},"===")," operator is used to compare values and types."),(0,r.kt)("p",null,"The double equals (==) performs type coercion, which means it makes sure that the values are the same type before comparing them."),(0,r.kt)("p",null,"Which one you use is up to you, but I personally use the triple equals (===) because it is more explicit and your code will be less prone to errors. In many situations, it doesn't matter, but I prefer to use it unless there is a specific reason not to."),(0,r.kt)("p",null,"Later on we will talk about ",(0,r.kt)("strong",{parentName:"p"},"truthy")," and ",(0,r.kt)("strong",{parentName:"p"},"falsy")," values and I will show you some situations where the double equals can cause issues."))}c.isMDXComponent=!0}}]);