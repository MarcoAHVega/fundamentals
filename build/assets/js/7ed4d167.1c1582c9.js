"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[1481],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>w});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),d=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),p=d(t),u=o,w=p["".concat(l,".").concat(u)]||p[u]||m[u]||s;return t?i.createElement(w,a(a({ref:n},c),{},{components:t})):i.createElement(w,a({ref:n},c))}));function w(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=u;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[p]="string"==typeof e?e:o,a[1]=r;for(var d=2;d<s;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8756:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var i=t(7462),o=(t(7294),t(3905));const s={sidebar_position:42},a="useWindowDimensions",r={unversionedId:"6 React Native/Section 5: Dynamic User Interfaces/42 useWindowDimensions",id:"6 React Native/Section 5: Dynamic User Interfaces/42 useWindowDimensions",title:"useWindowDimensions",description:"- In the previous video, we discovered that the Dimensions API doesn't update when device dimensions change.",source:"@site/docs/6 React Native/Section 5: Dynamic User Interfaces/42 useWindowDimensions.md",sourceDirName:"6 React Native/Section 5: Dynamic User Interfaces",slug:"/6 React Native/Section 5: Dynamic User Interfaces/42 useWindowDimensions",permalink:"/fundamentals/6 React Native/Section 5: Dynamic User Interfaces/42 useWindowDimensions",draft:!1,tags:[],version:"current",sidebarPosition:42,frontMatter:{sidebar_position:42},sidebar:"tutorialSidebar",previous:{title:"Dimensions API Drawback",permalink:"/fundamentals/6 React Native/Section 5: Dynamic User Interfaces/41 Dimensions API Drawback"},next:{title:"43 SafeAreaView",permalink:"/fundamentals/6 React Native/Section 5: Dynamic User Interfaces/43 SafeAreaView"}},l={},d=[{value:"Step 1: Eliminate Unnecessary Code",id:"step-1-eliminate-unnecessary-code",level:3},{value:"Step 2: Import <code>useWindowDimensions</code>",id:"step-2-import-usewindowdimensions",level:3},{value:"Step 3: Implement <code>useWindowDimensions</code>",id:"step-3-implement-usewindowdimensions",level:3},{value:"Testing the Updated Approach",id:"testing-the-updated-approach",level:3}],c={toc:d},p="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"usewindowdimensions"},"useWindowDimensions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the previous video, we discovered that the Dimensions API doesn't update when device dimensions change.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We had to implement a substantial amount of code to ensure our dynamic styles would be applied correctly when the device orientation changed."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  const { window } = dimensions\n  const windowWidth = window.width\n  const windowHeight = window.height\n\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.box,\n          {\n            width: windowWidth > 500 ? '70%' : '90%',\n            height: windowHeight > 600 ? '60%' : '90%',\n          },\n        ]}>\n        <Text style={{ fontSize: windowWidth > 500 ? 50 : 24 }}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\n// console.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In this video, I'll demonstrate how we can simplify this process and achieve the same outcome using the ",(0,o.kt)("inlineCode",{parentName:"li"},"useWindowDimensions")," hook.")),(0,o.kt)("h3",{id:"step-1-eliminate-unnecessary-code"},"Step 1: Eliminate Unnecessary Code"),(0,o.kt)("p",null,"Let's start by eliminating the unnecessary code. This includes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Removing the imports for ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Removing the import for the Dimensions API.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Removing the entire block of code related to ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.box,\n          {\n            width: windowWidth > 500 ? '70%' : '90%',\n            height: windowHeight > 600 ? '60%' : '90%',\n          },\n        ]}>\n        <Text style={{ fontSize: windowWidth > 500 ? 50 : 24 }}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\n// console.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("h3",{id:"step-2-import-usewindowdimensions"},"Step 2: Import ",(0,o.kt)("inlineCode",{parentName:"h3"},"useWindowDimensions")),(0,o.kt)("p",null,"Now, import ",(0,o.kt)("inlineCode",{parentName:"p"},"useWindowDimensions")," from React Native."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text, useWindowDimensions } from 'react-native'\n")),(0,o.kt)("h3",{id:"step-3-implement-usewindowdimensions"},"Step 3: Implement ",(0,o.kt)("inlineCode",{parentName:"h3"},"useWindowDimensions")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Within the component:")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"const windowWidth = useWindowDimensions().width"),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"const windowHeight = useWindowDimensions().height")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text, useWindowDimensions } from 'react-native'\n\nexport default function App() {\n  const windowWidth = useWindowDimensions().width\n  const windowHeight = useWindowDimensions().height\n\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.box,\n          {\n            width: windowWidth > 500 ? '70%' : '90%',\n            height: windowHeight > 600 ? '60%' : '90%',\n          },\n        ]}>\n        <Text style={{ fontSize: windowWidth > 500 ? 50 : 24 }}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\n// console.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"And that's all that is required.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Save the file and return to your device."))),(0,o.kt)("h3",{id:"testing-the-updated-approach"},"Testing the Updated Approach"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Rotate your device, and you'll notice that our dynamic styles continue to function as expected.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"It is important to note that useWindowDimensions is the recommended approach."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By first explaining the Dimensions API, I wanted to ensure you understand the problem it addresses.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"useWindowDimensions should be a go-to approach for responsive styles."))))}m.isMDXComponent=!0}}]);