"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[6677],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8713:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:25},o="Layout with Flexbox",l={unversionedId:"6 React Native Expo CLI/Section 4: Layout/25 Layout with Flexbox",id:"6 React Native Expo CLI/Section 4: Layout/25 Layout with Flexbox",title:"Layout with Flexbox",description:"=> Intro",source:"@site/docs/6 React Native Expo CLI/Section 4: Layout/25 Layout with Flexbox.md",sourceDirName:"6 React Native Expo CLI/Section 4: Layout",slug:"/6 React Native Expo CLI/Section 4: Layout/25 Layout with Flexbox",permalink:"/fundamentals/6 React Native Expo CLI/Section 4: Layout/25 Layout with Flexbox",draft:!1,tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25},sidebar:"tutorialSidebar",previous:{title:"Section 4: Layout",permalink:"/fundamentals/category/section-4-layout"},next:{title:"Code Setup",permalink:"/fundamentals/6 React Native Expo CLI/Section 4: Layout/26 Code Setup"}},p={},u=[{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"Understanding Flexbox:",id:"understanding-flexbox",level:3},{value:"The Axes in Flexbox:",id:"the-axes-in-flexbox",level:3},{value:"Understanding Flexbox Properties:",id:"understanding-flexbox-properties",level:3}],s={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"layout-with-flexbox"},"Layout with Flexbox"),(0,r.kt)("blockquote",null),(0,r.kt)("h3",{id:"-intro"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In this section, we will dive into the world of layouts in React Native.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The core of layout design in React Native is flexbox, a powerful one-dimensional layout model used to arrange elements within a container.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"With flexbox, you have the freedom to arrange items either horizontally (left to right or right to left) or vertically (top to bottom or bottom to top).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Additionally, you can easily control the spacing and alignment of items within the container."))),(0,r.kt)("h3",{id:"understanding-flexbox"},"Understanding Flexbox:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Flexbox consists of two main entities: the flex container and the flex items.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The parent container, usually a View component, is referred to as the ",(0,r.kt)("inlineCode",{parentName:"p"},"flex container"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The immediate children elements are called ",(0,r.kt)("inlineCode",{parentName:"p"},"flex items"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<View>\n  <View>Item 1</View>\n  <View>Item 2</View>\n  <View>Item 3</View>\n</View>\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In the provided sample UI, the parent view acts as the flex container, and all the children views serve as flex items.")),(0,r.kt)("h3",{id:"the-axes-in-flexbox"},"The Axes in Flexbox:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When working with flexbox, we encounter two axes: the ",(0,r.kt)("inlineCode",{parentName:"p"},"main axis")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"cross axis"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By default,"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"the main axis runs from left to right,")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"and the cross axis is perpendicular to it"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"running from top to bottom"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"However, in React Native, it is the opposite:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"the main axis runs top to bottom"),","),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"and the cross axis runs left to right"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It is very important to remember this."))),(0,r.kt)("h3",{id:"understanding-flexbox-properties"},"Understanding Flexbox Properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Understanding flexbox is a straightforward process, much like learning CSS.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You need to familiarize yourself with the various flexbox properties and understand how they function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Once you grasp the concepts of flexbox, you'll have a solid understanding of how layouts are created in React Native.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In this section, we will focus on exploring different flexbox properties while arranging elements on the screen."))))}m.isMDXComponent=!0}}]);