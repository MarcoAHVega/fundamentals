"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[9844],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,g=m["".concat(p,".").concat(d)]||m[d]||c[d]||r;return n?o.createElement(g,i(i({ref:t},u),{},{components:n})):o.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8305:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:12},i="Button Component",l={unversionedId:"6 React Native Expo CLI/Section 2: Components/12 Button",id:"6 React Native Expo CLI/Section 2: Components/12 Button",title:"Button Component",description:"Button Component",source:"@site/docs/6 React Native Expo CLI/Section 2: Components/12 Button.md",sourceDirName:"6 React Native Expo CLI/Section 2: Components",slug:"/6 React Native Expo CLI/Section 2: Components/12 Button",permalink:"/fundamentals/6 React Native Expo CLI/Section 2: Components/12 Button",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"ScrollView Component",permalink:"/fundamentals/6 React Native Expo CLI/Section 2: Components/11 ScrollView"},next:{title:"Pressable Component",permalink:"/fundamentals/6 React Native Expo CLI/Section 2: Components/13 Pressable"}},p={},s=[{value:"<strong>Button Component</strong>",id:"button-component-1",level:2},{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"<strong>=&gt;</strong> Implementing an Example",id:"-implementing-an-example",level:3},{value:"<strong>=&gt;</strong> Handling the Press Event",id:"-handling-the-press-event",level:3},{value:"<strong>=&gt;</strong> Customization with Props",id:"-customization-with-props",level:3},{value:"<strong>=&gt;</strong> Summary",id:"-summary",level:3}],u={toc:s},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"button-component"},"Button Component"),(0,a.kt)("h2",{id:"button-component-1"},(0,a.kt)("strong",{parentName:"h2"},"Button Component")),(0,a.kt)("blockquote",null),(0,a.kt)("h3",{id:"-intro"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The Button component allows users to trigger actions similar to the button component in the web")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"However, it's important to note that the button component has platform-specific rendering for iOS and Android"))),(0,a.kt)("h3",{id:"-implementing-an-example"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Implementing an Example"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"First, we need to import the Button component from React Native")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Inside the View component, I'll invoke the Button component"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button />\n    </View>\n  )\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Unlike the HTML button element, the button component in React Native is a self-closing tag with no inner text or closing tag")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"To specify the button text, we use a prop called ",(0,a.kt)("inlineCode",{parentName:"p"},"title"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Let\'s set it it to "Press"'))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button title='Press' />\n    </View>\n  )\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If we save the file and take a look at the devices, we can see the button component rendered with iOS styles on iPhone 14 Pro and Android styles on the Android virtual device")),(0,a.kt)("h3",{id:"-handling-the-press-event"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Handling the Press Event"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In React Native, the button component provides an ",(0,a.kt)("inlineCode",{parentName:"p"},"onPress")," prop to handle the Press event")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Let\'s add onPress equal to an arrow function that logs to the console "Button pressed"'))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n      />\n    </View>\n  )\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"When we press the button, the event handler is triggered and we see the log message in the terminal")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The event handler can be more complex by defining a separate function and assigning it to the onPress event"))),(0,a.kt)("h3",{id:"-customization-with-props"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Customization with Props"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The third prop to highlight is the ",(0,a.kt)("inlineCode",{parentName:"p"},"color")," prop, which allows easy customization of the button color")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Let\'s set color to "midnight blue"'))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n      />\n    </View>\n  )\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Now, if we take a look at the UI, we can see the button with the new color applied")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Lastly, there is the ",(0,a.kt)("inlineCode",{parentName:"p"},"disabled")," prop mainly used in form handling"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n        disabled\n      />\n    </View>\n  )\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"By adding the disabled prop and setting it to true by default, the button is styled as disabled and won't trigger any press events when pressed")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"It's usually better to manage a state variable to control the disabled prop value instead of directly assigning true or false"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"disabled = { state }\n")),(0,a.kt)("h3",{id:"-summary"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Summary"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," component is used to trigger actions on press")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You can specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"title")," prop for the button text")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onPress")," prop is used to handle the Press event")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"color")," prop is used to set the button color")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"disabled")," prop is used to disable the button"))))}c.isMDXComponent=!0}}]);