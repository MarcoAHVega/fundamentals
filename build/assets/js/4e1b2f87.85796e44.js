"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[6648],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),h=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=h(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},w=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=h(n),w=a,m=u["".concat(l,".").concat(w)]||u[w]||d[w]||i;return n?o.createElement(m,s(s({ref:t},c),{},{components:n})):o.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=w;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[u]="string"==typeof e?e:a,s[1]=r;for(var h=2;h<i;h++)s[h]=n[h];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}w.displayName="MDXCreateElement"},3054:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>h});var o=n(7462),a=(n(7294),n(3905));const i={sidebar_position:1},s="JavaScript",r={unversionedId:"3 JavaScript/1 Javascript",id:"3 JavaScript/1 Javascript",title:"JavaScript",description:"Intro",source:"@site/docs/3 JavaScript/1 Javascript.md",sourceDirName:"3 JavaScript",slug:"/3 JavaScript/1 Javascript",permalink:"/fundamentals/3 JavaScript/1 Javascript",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"JAVASCRIPT",permalink:"/fundamentals/category/javascript"},next:{title:"Advanced JavaScript",permalink:"/fundamentals/3 JavaScript/2 Advanced JavaScript"}},l={},h=[],c={toc:h},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"javascript"},"JavaScript"),(0,a.kt)("p",null,"Intro"),(0,a.kt)("p",null,"this video is sponsored by tascade a real-time organization and collaboration\nplatform make sure to check the description for a discount on your subscription\nhey everyone my name is vishwas and welcome to this crash course on javascript for complete beginners\nin this crash course we will understand the fundamental concepts in javascript"),(0,a.kt)("p",null,"Before we begin"),(0,a.kt)("p",null,"before we begin let me go over a few points first i would like to mention this\ncourse is for complete beginners i'm going to assume you have no prior\nknowledge of javascript and teach the course if you are someone who is already\nfamiliar with javascript fundamentals i would suggest you wait for the advanced\njavascript crash course you do however have to be familiar with\nhtml and css i've created crash courses on both the\ntopics so make sure you watch them before proceeding\nsecond we are going to cover most of the fundamental concepts that you as a beginner should know\nit is a crash course and not an exhaustive course on every single\njavascript topic having said that this course is probably\nall you need as a beginner over the next few days i will be\npublishing separate videos on advanced and asynchronous javascript topics\nso make sure you stay tuned for that third this video unlike other videos in\nmy channel is a crash course and is longer in length that doesn't mean you have to sit\nthrough the entire video at once take it easy pause when necessary and\nmost importantly make sure you code along with me as that is the best way to learn\nby the end of this video you will have a solid understanding of the fundamentals of javascript\nall right with these points in mind let's get started"),(0,a.kt)("p",null,"What is JavaScript?"),(0,a.kt)("p",null,"first let us understand what is javascript javascript is a high level\noften just in time compiled programming language that conforms to the ecmascript\nspecification now that's a lot to take in so let me\nbreak it down in simple terms high level means it is a more friendlier\nlanguage to write code with just in time compiled means the code we\nwrite is compiled during execution rather than before execution ecmascript specification is a\nstandard that javascript adheres to which ensures the code we write will\nwork across any browser hopefully you're now clear on what\njavascript is now the next obvious question is why\nlearn javascript the first reason is that javascript alongside html and css is one of the\ncore technologies of the world wide web pretty much every website you come\nacross uses javascript to handle interactivity and updates\nwhich is not a problem because web browsers have a dedicated javascript engine to execute the code on the user's\ncomputer the second reason is that you can also use javascript to build server-side\napplications in 2009 with the introduction of node.js\nwhich is a javascript runtime environment javascript code can be run outside the\nbrowser this paved way to build servers that can handle network requests interact with\ndatabases compute logic and return the result and a lot more\nso you can pretty much build full stack applications with javascript\nbut it doesn't stop at that javascript is also used in mobile app\ndevelopment to create cross-platform apps that can run on both ios and\nandroid and it is also used to create desktop applications\nit is no wonder that javascript is the most popular programming language\naccording to the 2021 stack overflow developer survey\nnow irrespective of whether you'll be using javascript on the front end to build web apps\non the back end to build services on the mobile or desktop to build apps\nthere are certain features that you must know they are nothing but the language\nsyntax and concepts in this crash course our focus is going\nto be just that however at the end of this course i will\ntalk about the next steps after you have had a good understanding of the fundamentals"),(0,a.kt)("p",null,"Setup"),(0,a.kt)("p",null,"now then for some setup to work with javascript we need three\nthings a browser node.js and a code editor\nideally you either need a browser or node.js but i will teach you to use them both\nfor browser i'm going to be using chrome you can choose to use any browser you\nalready have installed for node.js head over to\nnodejs.org you will need to download and install it\nclick on lts which downloads the installer double click the installer stick to the\ndefaults and install node.js to write the javascript code\ni'm going to be using vs code head to code.visualstudio.com\ndownload and install the same once you have vs code installed\nin the side panel open the extensions panel and make sure\nto install the prettier extension this will help format your code\nfinally open the editor inside a folder of your choice i have created a folder\ncalled javascript crash course and opened vs code inside that folder\nhere i'm going to create a new html file index.html\ntype exclamation and tab\nto generate a simple html document within the body tag add an each one tag\nit says javascript crash course\nformat the code using alt shift f and this pretty much is all the setup we\nhave to do if you open this index.html file from\nthe file explorer you should see the text as expected\nnow we are ready to start learning javascript"),(0,a.kt)("p",null,"How to run JavaScript"),(0,a.kt)("p",null,"the first thing you need to learn is how to run the javascript code you write\nwe can categorize this into two either run the code in the browser\nor run it in the node.js runtime let's start with the browser\nthe simplest way to execute javascript is in the browser console\nopen chrome and right click click on inspect\nand this brings up the chrome developer tools navigate to the console panel\nhere you can type in the javascript code and it gets executed\nthe first line of javascript you're going to learn is how to make javascript output the text hello world\nit is sort of the convention when you're starting with a new programming language\nto output hello world we write a javascript statement\nconsole.log parentheses and within parentheses\nadd quotes and type hello world\nthis is sort of the printf or c out statement if you're used to c or c plus\nwhen i press enter you can see hello world being displayed\nso the first way to run javascript in the browser is to run it directly in the console\nhowever this is only suited for short snippets and not when we have to write\nseveral lines of code which brings us to the second way of running javascript\nfrom within an html file just before the closing body tag\nadd a pair of script tags\nwithin these tags you can add javascript code and it will run when the html file\nis loaded in the browser let's add console.log\nquotes hello from script if i now save the file and open it in\nthe browser which we already have here refresh\nin the console we see the text hello from script\nunlike html javascript output will always be present in the console\nso this is the second way of course it's not always a good idea to\nmix html and javascript in the same file so let's take a look at the third way of\nrunning javascript in the browser similar to external css\nwe can also have external javascript create a new file\ncalled main dot js js stands for javascript\nhere we can add javascript code let's type console.log\nhello from main.js now we need to include this script in\nthe html file for that we use the script tag again\nbut we specify the source attribute which will point to the javascript file\nso script source is going to be equal to main.js\nif we now save the file and refresh the html page in the browser\nwe see the newly added text hello from what is supposed to be\nmain.js so an external file\nlinked to the html file these are the three ways to run\njavascript in the browser but like i mentioned we can also run javascript outside the browser using\nnode let me show you how in vs code click on view\nand then terminal this opens an integrated terminal where\nwe can run some commands first let's check if node.js is\ninstalled run the command node dash dash version\nand this should output the current version installed on your system i have 16.13.2\nnow run the command node followed by the javascript file name\nwhich is main dot js press enter\nand you should see the log hello from main.js\nthis corresponds to our log statement in the file if you wish to you can also omit the dot\njs extension it's a node followed by main press enter\nand we see the same output so this is the fourth way to run\njavascript now here's the thing if you were to be learning javascript\nconcepts that deal with building web pages with html and css\nthe option of using an external script tag in the html file is the most suited\nway to run javascript however in this crash course we are learning the\nprogramming language aspect of javascript nothing specific to building web pages\nfor that using node.js is what i prefer we can write the code and run it right\nhere in the terminal and view the output we can avoid having to visit the browser\nconsole every time to see the result so take a minute add a few more\nconsole.log statements in the file and make yourself familiar with running code\nin the terminal using node"),(0,a.kt)("p",null,"Adding comments"),(0,a.kt)("p",null,"now another syntax which i would like to\nshow before we proceed is how to add comments in javascript\nif i type to forward slashes that line becomes a comment and is\nignored by javascript it is for the user to get some idea about the code\nso at the top i can add two forward slashes\nand write log a statement using console.log\nif i now save the file and run the code\nnode main you can see the first line doesn't make it into the output\nwe only see the log statement printing hello from main.js"),(0,a.kt)("p",null,"Variables"),(0,a.kt)("p",null,"all right now that we know how to run the code we write it is time to understand the first concept in\njavascript which is variables variables are used to store information\nthe information can be cost of an item the name of a user or any data that\nmight be needed in the code in javascript in the year 2022\nthere are two recommended ways to declare variables using the let and const keywords\nlet's look at an example we use the let keyword followed by the\nname of the variable for example age to this we can assign a value so is\nequal to 25. so we have stored a value of 25\nin a variable called age we can check this by logging the value\nto the console in the next line console.log\nand we pass in age make sure there is no quotes around age\nsave the file run node main and we see 25 in the terminal\nsimilarly we can declare variables using the const keyword\nso const salary is equal to 80 000\nand in the next line console.log salary\nrun node main again and we see 80 000 being logged\nnow you might be wondering what is the difference between let and const declarations\nwell the difference is that all const declarations must be initialized and\nonce initialized you cannot reassign a new value so if you were to declare const sum\nwithout any assignment and run the code node main\nwe see an error missing initializer in const\ndeclaration also if we assign a value of 0 or\ninitialize with a value of 0 and then in the next line change salary\nto 80 000 run the code\nwe see an error yet again type error assignment to constant\nvariable however with let save the file\ncomment out salary run the code\nyou can see we have no problem initialize sum to 0\nand reassign a value of 5 in the next line log the value to the console so\nconsole.log sum save the file run node main\nand you can see the value of 5 in the terminal there are no errors\na good rule of thumb is to always use const declarations unless the variable\nvalue is going to change in which case you can make use of let\nso to declare variables in javascript we make use of const and let keywords\nbefore we proceed let's comment out the code we have so far so as to not print\nprevious code in the terminal"),(0,a.kt)("p",null,"Data types"),(0,a.kt)("p",null,"all right the next topic to learn about\nis data types data types basically specify what kind\nof data can be stored and manipulated within a program\nin javascript data types can be categorized into primitive and non-primitive types\nas per the latest specification there are seven primitive types and one\nnon-primitive type under primitives we have string number\nboolean undefined null big end and symbol\nunder non-primitives we have objects let's look at examples for each of them\nstarting with strings a string is a sequence of characters\nthat represent a text value in javascript strings are surrounded by\nfor example we can declare a variable const name is equal to\nwithin quotes vishwas similarly we can have const language\nis equal to double quotes javascript and even\nconst channel is equal to\ncode evolution now this character is back tick which is the key below\nescape key now if i format the code double quotes are converted into single\nquotes because prettier is set up to convert double quotes to single quotes on my machine\nhowever keep in mind strings can have single quotes double quotes or even\nbackticks next we have the number data type that\nrepresents integer and floating point numbers for example\nconst total is equal to zero or const pi is equal to 3.14\nnext we have the boolean data type a boolean type represents logical\nentities and can only have one of two values true or false\nfor example const is primary number\nis equal to true or const is new user is equal to false\nbooleans are often used to run code conditionally based on the value being\ntrue or false so this is about strings numbers and\nbooleans the next data type is undefined which\nrepresents value that is not assigned if a variable is declared but the value\nis not assigned then the value of that variable will be undefined\nfor example let result if we log the value to the console\nand run node main you can see undefined\nof course you can also set a value of undefined explicitly so const res\nis equal to undefined make sure you don't add quotes\nnow the fifth data type is null which is a special value that represents empty or\nunknown value in javascript for example const data is equal to null\nideally null is used to denote a null value and undefined is used to denote a\nvalue that is not yet defined so it is recommended that if you want to\nexplicitly assign a value not known do not use undefined but instead use\nnull so const res should also be equal to null\nso that is about undefined and null the next two values\nbig end and symbol we're not going to see examples of them in this beginner's\ncrash course bigint is a very recent addition and is\nused to denote an integer value larger than what the number data type can hold\nsymbol is a data type introduced in 2015 and denotes a value that is unique and\nunchangeable as a beginner you don't have to worry about these two types\nso that is about the seven primitive types in javascript\na primitive value is written as an actual value like the text vishwas the\nnumber zero etc a non-primitive type on the other hand\nis a collection of values in javascript an object is a complex\ndata type an object contains properties defined as key value pairs\nthe syntax is as follows variable declaration so const\nperson and this is going to be equal to a pair of curly braces\nwithin the curly braces we specify properties and values\nfor example first name is the property and the value is bruce a string\nlast name is the property and the value is wayne which is again a\nstring we can have another property age\nand set this to 30. the property also called as key\ncan only be strings or of the symbol data type the value on the other hand can be any\ndata type also if the key is a valid javascript name\nfor example it does not contain any hyphens you can also oment the\nquotes and prettier is configured to do so if i format\nyou can see we have first name last name and age without the quotes\nnow to access a property in this object you can use the dot notation\nso in the next line console.log to print something to the terminal\nand let's access the person's first name it is going to be person\ndot notation followed by first name\nif we run the code node main you can see bruce in the terminal\nnow this syntax is known as object literal and is one way to store a\ncollection of data the other way you should be aware of as\na beginner is the array type arrays are written with square brackets\nand the items in an array are separated by commas for example\nconst odd numbers is going to be equal to square brackets\nand we specify a collection of values separated by commas\nso 1 comma 3 comma 5 7 and 9.\nto access a value in an array we use the position of the item which starts at 0\ninstead of 1. so console.log\nodd numbers and the way we access is with square brackets and we specify the position of\nthe item now this starts at zero so if we log\non numbers of 0 and run node main we see 1\nwhich is the first element in the array if i change position to 1\nrun node main we see three change it to two it's fill print five\nand so on as you can see multiple values are stored in one\ncollection variable called odd numbers and can be accessed based on the position\nso these are the different data types in javascript\nnow what you should know is that javascript is a dynamically typed language\nwhich means you don't have to specify the data type of a variable when you declare it\nwhich also means the data types are automatically converted as needed during\nexecution so you can declare let a is equal to 10\nand in the very next line assign a is equal to vishwas\nand then a is equal to true so from assigning a number to a string\nto a boolean value if we log a to the console\nand run node main we see a value of true\nand this is the last assigned value because javascript is dynamically typed\nthis type of an assignment does not cause an error message"),(0,a.kt)("p",null,"Operators"),(0,a.kt)("p",null,"all right now that you know the different data types the next topic to learn is operators\nin javascript an operator is a special symbol used to perform operations on\nvalues and variables here is a list of operators we will be\nlearning as a beginner assignment operators arithmetic operators comparison operators logical\noperators string operators and a few other operators\nlet's start with assignment which is an operator we have already seen in this video\ni'm going to begin by selecting all the code we have written so far and pressing\nctrl forward slash which will comment out the code\nnow let's focus on the assignment operator the assignment operator is used to\nassign values to variables for example let x\nis equal to 10 this is the assignment operator\nnext we have the arithmetic operators which are used to perform arithmetic calculations\nfor example if we have two variables x is equal to 10\nand let y is equal to 5 we can console.log\nx plus y if we run node main\nwe see the result 15. similarly x minus y\nwill give us 5 x star y which is x multiplied by y will\ngive us 50 x divided by y\nwill give us 2 and x modulus y\nwhich gives you the remainder after dividing 10 by 5.\nwill log 0 to the terminal now you can also have\nplus plus x which increments x by 1 say console.log\nplus plus x node main and you can see the value is 11\nand similarly minus minus y which decrements y value\nby one so node main and you can see the value is 4.\nnow here x and y are referred to as operands\nand the symbol of course is the operator so these are some of the arithmetic\noperations you can perform in javascript\nnext we have the comparison operators comparison operators compare two values\nand return a boolean value either true or false\nfirst we have x double equals y which checks if x and y are equal so\nnode main and we see false we have x not equal to y\nand this will return true we also have x triple equals y\nwhich compares not just the value but also the data type and if we run node main you can see it\nreturns false as well similarly we have x strictly not equal to y which returns\ntrue we will learn about this special equality in javascript in just a bit\nwe then have x greater than y which is true\nx greater than or equal to y which is again true\nand similarly y less than x\nwhich is true and y lesser than or equal to x which is again true\ncomparison operators are primarily used in loops and branching statements which\nwe will learn about later on in this video next we move on to logical operators in\njavascript logical operators perform logical operations\nno surprise there and return either true or false they are very helpful when combining\ncomparison operators results to make a decision for example let's say we need to figure\nout if the number 8 lies in the range of x and y\nso we can write const is valid number and this is going to be equal\nto x greater than 8 ampersand ampersand 8 greater than y\nhere double ampersand is called logical and operator\nit returns true only if both operands evaluate to true if not it returns false\nnow x is 11 which is greater than 8 and y is 4 which is less than 8.\nso if you were to log is valid number to the console\nrun node main you can see it evaluates to true so it\nis a valid number similar to logical and we have logical\nor operator denoted by double pipe character\nthis will return true if either of the operands is true else it will return false\nso if i change x greater than 20 which is false\nbut y is still less than eight run node main\nwe see each valid number is still true\nso if either of the two operands is true the logical or operator returns true\nfinally we have the logical not operator which negates the value\nfor example if we have const is valid is equal to true\nnot of is valid is going to return false so if we run\nnode main you can see the last value is false change true to false\nrun node main once more and now it returns true\nnext let's move on to the string operators in javascript we can use the plus\noperator to join two or more strings so if we type console console.log\nthe string bruce plus the string wayne\nwith the space at the end of bruce run node main\nwe see bruce wayne as a single string in the terminal so the plus operator performs addition\nwhen used with numbers and concatenation when used with strings\nas beginners it is very important to keep this in mind as we tend to create bugs because of this behavior\nand i will elaborate on that in a few minutes now there are a few more operators but i\nwant to discuss just one more which is the ternary operator\nthe ternary operator returns a value based on the condition\nlet me explain with an example let's define const is even\nand this is going to be equal to 10 modulus 2\nand if this is equal to 0 question mark true colon false\nwhat happens here is that the condition is evaluated first\nis the remainder of dividing 10 by 2 equal to 0\nif it is assign true to ease even if the condition is not true\nassign false to ease even so if i log ease even\nrun node main you can see the value is true and of course you can assign any value\nyou want to i can say number is even\nelse number is odd run node main\nand you can see number is even is printed in the terminal so based on the condition assign a value\nto the variable the ternary operator is used quite often so make sure you've understood how it works"),(0,a.kt)("p",null,"Type Conversions"),(0,a.kt)("p",null,"now that we have a good understanding of\ntypes and operators in javascript the next topic to learn is type conversion\nwe will learn how to convert one type to another because a lot of the times the code you\nwrite has to do some kind of conversion in javascript there are two kinds of\ntype conversions implicit conversion also known as type\ncoercion where javascript itself will automatically convert the type to be\nable to run the code you've written and we also have explicit conversion where you manually\nconvert the type let's look at examples of both these conversions\nlet's start with implicit conversion now the first conversion is\nif you try to add with a numeric string type javascript converts the operand to\na string before concatenation so if we type console.log\nnumber 2 plus a numeric string 3\nrun node main you can see the result is 23\nso if you try to add with a numeric string type the result is a string after\nconcatenation similarly if we add true plus numeric string three\nwe get the result true three which is a concatenation of the two operands\non the other hand if you use a numeric string with subtraction multiplication\nor division the numeric string is automatically converted into a number\nso if we console log numeric string 4 minus numeric string 2\nrun node main you can see the result is the number 2.\njavascript converts both 4 and 2 to numbers and then performs subtraction\nnow i would like you to pause the video and try the same with multiplication and division\nnow what is worth noting though is if you try to use non-numeric strings the\nresult is a special value called not a number so if we console log\nbruce minus wayne run node main\nit will result in nan which is not a number\nnow if you were to use boolean values with numeric strings false is treated as 0 and true as 1.\nso console log numeric string 5\nminus true will result in 4\nand numeric string 5 minus false\nwill result in five also if you use null with subtraction\nnull is treated as zero so console.log numeric string 5 minus null\nwill give back 5. the final example under implicit conversion is that of undefined\nif you use undefined with number boolean or null the result is not a number\nfor example console log the number 5 plus\nundefined run node main you can see the result is not a number\nas you can see javascript automatically converts types in performing operations\nand it is crucial you understand this coercion to avoid any confusion in your\ncode it might take some time but at least you are aware of the concept to come back\nand refer to next let's move on to examples on\nexplicit type conversion for manual conversion we're going to\nrely on some of the built-in methods available in javascript\nfirst to convert a string or boolean to numeric types you can use the number\nglobal method so console.log number with an upper case\nparenthesis we pass in a numeric string 5.\nif you run node main you can see it returns the number five\nif you pass a boolean value let's say false it will return zero\nan empty string will also return zero\napart from number you can also use parseint method\nso parse int numeric string five\nnode main and this will return five if you want a floating point number\nyou can make use of parse float so parse float within quotes 3.14\nrun node main and we get back a floating point number 3.14\nnext we have the string global method to convert other data types to string\nfor example console.log string parentheses and we pass in a number 500\nnode main and this will print 500 as a string\nsimilarly true will return the string true\nnull will return the string null and undefined\nwill return the string undefined as an alternative to the string global\nmethod you can also use the tostring method for example console log the number 500\ndot to string this has to be in parentheses\nrun node main and it locks the string 500 in the terminal\na t string however will not work on null and undefined\nfinally to convert other data types to boolean you can use the global boolean\nmethod for example console.log boolean\nof the number 10 will return true let me spell this right\nnode main and you can see the value is true and it is worth noting that null\nundefined numeric zero empty string and not a number\nall return false when converted to boolean everything else will return true\nas a quick assignment i want you to run boolean method on these values and find\nout the return value including a string that has only spaces\nas its value all right i hope you now have an idea of\nhow to convert between types in javascript"),(0,a.kt)("p",null,"Equality"),(0,a.kt)("p",null,"with an understanding of how to convert\nbetween the different data types the next topic to learn about is equality\nand this is a slightly confusing topic to wrap your head around as a beginner\njavascript is let's say a bit weird when it comes to equality we have two types\ndouble equals which loves coercion when the types are different and triple equals which does not allow\ncoercion let's understand both with a few examples\nback in vs code let's declare a few constants const variable 1\nis equal to the string test and const variable 2 is equal to again\nthe string test let's now log both equalities\nso console log variable one double equals variable two\nmake a copy of it and this time variable one triple equals\nvariable two if we run the code node main\nboth return true when the types are the same there is no\nconfusion however if i now change variable 1 to a number\n10 and variable 2 to the numeric string 10\nrun node main you can see double equals is true\nwhereas triple equals is false in case of double equals javascript\ncoerces the values to the same type so string 10 is converted into numeric 10\nautomatically and then compared both constants would be of the same\nvalue and hence the result is true however triple equals is more strict and\nensures both constants must be of the same type and will not convert\nimplicitly since a number is different from a string type\nfalse is returned now it's not wrong to use double equals\nbut as a beginner it is probably safe to use triple equals to check equality\nand this is simply because there is quite a bit of strange coercion that javascript does\nfor example if variable 1 is equal to 0 and variable 2 is equal to an empty\nstring run node main you can see that double equals still\nreturns true similarly false and empty string\ndouble equals is once again true null and undefined\nwell it is true again all the values we have just seen are\ntreated as faulty values in javascript and double equals we'll treat them as\nequals which as you can see may be confusing and lead to incorrect results\nso although it isn't wrong to use double equals my advice would be to use triple\nequals when writing code as a beginner this concept of equality is very\nimportant"),(0,a.kt)("p",null,"Conditional statements"),(0,a.kt)("p",null,"which leads us to the next topic in this video and that is about conditional statements\nconditional statements are used to perform different actions based on different conditions\nfor example you may want to execute different blocks of code based on whether a number is positive negative or\nzero in javascript we have the following conditional statements\nif else else if and switch\nlet's first look at if else and else if statements and then look at switch which\nis an alternative back in vs code\nlet's declare a constant const num is equal to five\nnow what we want to do is log a statement to the terminal if the number is a positive number\nfor such a scenario we can use the if statement the syntax is as follows\nif followed by parentheses within parentheses we specify a\ncondition our condition is that num should be greater than zero\nthen we specify a pair of curly braces within the curly braces we write the\ncode that will be executed only if this condition evaluates to true\nlet's add console.log number is positive\nif we now run the code node main in the terminal\nwe see number is positive if we change num to -5\nrerun we see that the statement is not logged in the terminal\nso the if statement evaluates the condition inside the parentheses and if the condition evaluates to true\nit runs the code within the curly braces\nsometimes you may want to run a different block of code if the condition evaluates to false\nin such a case you can make use of the else statement now the else statement must follow an if\nstatement so we can add else and then curly braces once again within curly braces we can\ntype console.log number is not positive\nif we now rerun the code we see the log statement as expected\nnumber is not positive as it is minus 5. so if the condition evaluates to true\nif block is executed and if the condition is false the else block is\nexecuted now if you have just two alternate\nblocks of code to run the if else statements are sufficient\nhowever if you need to decide amongst more than two alternatives you need the\nif else f and else statements for example\ninstead of just logging whether the number is positive or not let's try to\nlog if the number is positive negative or zero\nlet me explain the syntax the if block remains the same so let's leave it as it is and remove the else\nblock if num is greater than 0 we log number\nis positive but after the if block we now use the\nelse if block so else if and this again follows an if block\nthis statement allows us to specify a new condition so parentheses and we're\ngoing to specify if num is less than 0\nand we add another code block which will be executed if that condition is true\nso the first condition might be false but the second condition might be true\nin this case let's log to the console number is negative\nfinally if both these conditions are false we want to log that the number is\nzero for that we make use of the else statement as there is no other condition\nto evaluate so else console.log\nnumber is zero if we now rerun the code\nwe see the statement number is negative change num to zero\nnode main we can see number is zero our code works as expected\nwhat you should know is that you're allowed to specify as many number of\nelse if statements as you wish to it is not restricted to just one\nadditional condition now if else statements do a good job of\nenabling conditional code they're good when you have a few alternatives and each have a good chunk\nof code to be executed however if you have a large number of choices\nwith little code to execute in each choice a switch statement is better\nsuited for our example let's check a color and log that color\nvalue to the console i'm going to declare a new variable or\nconstant called color and let's set this to red\nnow for our switch statement the syntax is the keyword switch followed by\nparentheses within parentheses we specify a value or\nan expression in our case it is going to be the constant color\nnow this is followed by curly braces within curly braces we can specify one\nor more cases that we specify using the case keyword\nto check if color can be read we specify case followed by the string\nred and if this is true we log color is red\nafter the log statement though we need to specify the break keyword\nand this will prevent the next case from being executed\nnow let's compare with two more colors so red\ncase blue in which case color is blue is logged to the console\nand finally green in which case color is green is logged to the console\nif we run node main you can see color is red\nchange this to blue you can see color is blue\nnow it's also possible that the user might specify a completely different value for example color is 10\nin this case none of the case statements are executed and there's no text locked\nin the terminal to handle this you can add the default switch statement so default case\nwhere we are going to log not a valid color to the console\nnode main and you can see we have the text not a valid color\nso the switch statements evaluates the expression within parentheses and\nexecutes the code corresponding to the matching case if there is no matching case the default\ncase is executed so switch statements and if else\nstatements these are some of the ways you can conditionally run code in javascript"),(0,a.kt)("p",null,"Looping code"),(0,a.kt)("p",null,"let's now move on to the next topic which is looping code in javascript in programming loops are used\nto repeat a block of code for example if you want to print numbers\nfrom 1 to 50 you can make use of a loop of course that's a very simple example\nbut you can achieve a lot with lubes they're used in almost every app that\nyou develop and are really important from a beginner's point of view\nin this crash course we're going to take a look at four looping constructs\nfor loop while loop do while loop and for off loop\nlet's understand the syntax and usage with an example first up for loop\nthe syntax is as follows we have the keyword for followed by\nparentheses inside the parentheses we have three items separated by\nsemicolons first is the initializer which is run before starting the loop\nsecond is the condition which is checked to see if the loop should stop\nthird the final expression which is run each time the loop has gone through an\niteration we then have a pair of curly braces that contains a block of code\nwhich will run each time the loop iterates let's understand this better by writing\nsome code for our example let's log a message to the terminal five times\nback in vs code start with the for keyword followed by parentheses\nfor the initializer we're going to initialize a variable called i and set it to 1. so let i is equal to 1.\nfor the condition since we are logging a message five times we specify i less than or equal to five\nfor the final expression we increment the value of i by one so i plus plus\nyou might remember this from the operators section now for the block of code we're going to\nrun console.log iteration number\nwe concatenate it with the value of variable i\nif we save the file and run the code\nwe see the message logged five times the value of i increments from 1 to 5.\nlet me slowly walk you through the execution of this for loop\nfirst i is set to a value of 1. next the loop checks if i is less than\nor equal to five it is the code inside the curly braces is\nexecuted after that i is incremented by one\nnow the condition is checked again this time i is equal to 2\ncondition is still valid since 2 is less than 5. the message is logged and i is\nincremented once again this happens for i is equal to three\nfour and five but after logging the fifth message\ni is incremented to six now the condition evaluates to false\nsince 6 is not less than or equal to 5. when the condition becomes false this\nloop is terminated this is how the for loop works we are able to repeat execution of\ncode in our case the log statement five times without having to type it out\nfive times let's now proceed with the second looping construct which is the while\nloop here is the syntax the parts of a while loop are similar to\nthat of a for loop as you can see however there is a bit of rearrangement\nthe initializer variable is set before the loop and the final expression is\nincluded inside the loop after the code to run let's head back to vs code and rewrite\nthe for loop logic with while loop let's first comment out the for loop\nnow the first part is the initializer so let i is equal to 1. then the while loop\nthe keyword y followed by parentheses and then curly braces\nwithin parentheses we specify the condition the condition is i should be less than\nor equal to five in the code block we specify the log\nmessage so console.log iteration number concatenated with the value of i\nbut now right before the closing brace we specify the final expression which is\nincrementing the value of i by one so i plus plus\nrun the code node main and we see the same output\nthe execution is also similar to the for loop first i is set to 1.\nthe condition is then evaluated which is true the code is executed and i is\nincremented this continues till the value of i is 6\nin which case the condition evaluates to false and the loop is terminated pretty straightforward if you\nhave understood the for loop now a variation of the while loop is the\ndo while loop the syntax is as follows the main difference is that the do while\nloop is always executed at least once that is because the condition comes\nafter the code inside the loop let's head back to vs code and rewrite\nthe logic with do while comment out the while loop\nnow we start with the initializer which remains the same that i is equal to 1.\nnext we add the do keyword followed by the code block\ncopy paste from the while loop console log\nand increment the value of i after the closing curly brace specify\nthe condition so while i is less than or equal to phi\nif we now run the code node main we see the same output\niteration number one through five however if we initialize i is equal to\nsix and run the code we still see the log statement once\niteration number six this was not the case with just the while loop\nso do while executes the code block once and then evaluates the condition\nsince six is greater than five the loop is terminated after logging the message\nonce let's now move on to the fourth looping construct which is the for off loop\nthis was introduced recently and is mainly used to loop over a collection of\ndata like an array for example here is the syntax\nthe for keyword followed by parentheses within parentheses we get hold of each\nitem in the collection in each iteration and then we have the code block within\ncurly braces let's look at an example back in vs code\ni'm going to comment out the do while loop and create an array of five numbers so\nconst num array is going to be one comma two three\nfour and five now for the for off loop we can write\nfor const num of num array\ncurly braces console log iteration number plus\nnum if we run the code now it would mean we have the same output as before\nwhat happens here is that the for off loop automatically iterates over the\narray and in each iteration assigns the value of the adder element to num\nwe can then execute the necessary code using that element\nso in iteration one num is equal to one in iteration two num is equal to two\nand so on till the fifth iteration the for of loop is best suited for a\ncollection of data as it abstracts away two things\nfirst you don't have to keep track of a variable to increment the iteration count\nso there is no need to track a variable like i which we have done previously\nsecond you don't have to figure out how to access the item in the collection\nfor example array of 0 array of 1 array of 2 etc\nthe far off loop does it all and you just have to worry about the code that needs to be run\nso these are the four looping constructs that you as a beginner should be aware\nof again you don't have to memorize these things you just have to know they exist and\nwhere to come back to when you do come across the need to use them in your code"),(0,a.kt)("p",null,"Functions"),(0,a.kt)("p",null,"all right for the pen ultimate topic in this crash course let's learn about functions\nfunctions are one of the fundamental building blocks in javascript\na javascript function is a block of code designed to perform a particular task\nfor example add two numbers multiply two numbers etc\nfunctions are reusable as they can be defined once and can be called with different values resulting in different\nresults functions also help divide a complex problem into smaller chunks and make\nyour program easy to understand and maintain let's take a look at the syntax of a\nfunction as you can see a function is defined with the function keyword followed by\nthe name of the function that is followed by parentheses\nthe parentheses may include parameter names separated by commas\nit is completely optional we then have a pair of curly braces and\nwithin the curly braces the code to be executed let's head back to vs code and\nunderstand with a few examples for our first example let's define a\nfunction which logs a greeting message to the console so first the function keyword followed\nby the function name let's call it greed this is followed by parentheses and then\ncurly braces within curly braces the code to execute we're going to add a simple log\nstatement good morning vishwas\nso we have defined our function but a function doesn't run by itself\nwe have to call or invoke that function we do that by specifying the function\nname followed by parentheses if we now run the code\nnode main we see the greeting message in the\nterminal our first function is working as expected\nand we can call the function any number of times and we will see the same message\nso if i invoke the function two more times run the code\nwe see the message three times in the terminal now this is fine but what would be\nbetter is if the person's name is dynamic\nthat way we can use the same good morning message but with different names and greet multiple people this is where\nparameters come into play a parameter is like an input to the function\nlet's call it username now in the log statement we can use\nconcatenation so good morning string plus\nusername now when we invoke the function we need to pass in the username\nlet's pass the string bruce clark\nand diana if you run the code we can see that we can greet three\ndifferent people using the same function now in the function definition\nthis input username is called a parameter when invoking the function\nbruce clark and diana are called function arguments\nfunction parameter function argument good to have the terminology in mind\nnow a function can also return a value which we can use later in our code\nlet me show you an example let's define a function that adds two\nnumbers and returns their sum so function\nfollowed by function name which will be add we then have parentheses and this will\nhave two parameters a comma b\nwithin the function body return a plus b\nnow here a and b are two input parameters within function body we add the two\nparameters so a plus b and return the sum from this function\nreturn is a javascript keyword which will return the value from the add function when we\ninvoke it so what this allows us to do is assign the result to a constant\nconst sum is equal to add 5 comma 10.\nwe don't have any complex logic so let's simply log the sum to the console in the next line console.log\nsum if we run the code we see 15 in the terminal\nchange to 25 and 25 run the code and we see 50.\nso the two numbers are added together and returned as you can see functions are very useful\ndefine the code once and use it as many times as you want to passing different arguments to produce\ndifferent results it also helps organize code into smaller\nmaintainable code blocks now in 2015 an alternate syntax was\nintroduced to define functions they're called arrow functions and offer\na more concise way of writing functions let's rewrite the add function using\narrow functions const arrow sum\nis going to be the function name and this is going to be equal to an arrow function\nthe syntax is parentheses followed by equal to and greater than sign which is\ncalled a fat arrow and then the function body\nthis function is going to have two input parameters and return their summation\nreturn a plus b we can now replace add with arrow sum\nrun node main and we see the same output but with arrow functions we do have a\nmore concise syntax as i mentioned now if you just have one statement that\nis returned which is the case with our arrow sum function you can omit the curly braces and the\nreturn keyword so remove the curly braces\nand the return keyword you can inline a plus b on the same\nfunction line run the code again and we still see 50.\nanother point worth noting is that if you just have one argument you can if\nyou want to omit the parentheses around the argument for example\nconst add5 will accept one parameter which is\ncalled num and will return num plus five\nnow when i format the code it automatically adds the parentheses but this is still valid\narrow functions are used in a lot of code bases and i wanted to ensure you know the syntax\nnow i cannot stress enough how important functions are in any programming language\nso make sure you learn them well"),(0,a.kt)("p",null,"Scope"),(0,a.kt)("p",null,"all right for the final topic in this\ncrash course we're going to learn about scope in javascript\nscope basically determines the accessibility or visibility of\nvariables javascript has three types of scope block scope function scope and global\nscope let's understand each of them with an example starting with block\nscope block scope was introduced in 2015 with the introduction of let and const\nkeywords basically block scope dictates that variables declared inside a pair of\ncurly braces cannot be accessed from outside the block so if you were to have\nif block so if true const my name is equal to vishwas\nand try to access the name outside the block so console.log\nmy name run the code you can see javascript throws an error\nreference error my name is not defined if you move the log statement inside the\nif block though on the code again we see vishwas logged in the terminal\nso led and const declared variables can only be accessed inside the block they\nare declared in next we have function scope which\ndictates that variables declared inside a function are not accessible from outside the function\nso if we define a function function test function\nand type const my name is equal to batman and log the value outside the function\njavascript throws an error again reference error my name is not\ndefined if you move the log statement within the function\nrun the code call test function\nand run the code you can see batman logged in the terminal\nwhat is also worth noting here is that both my name variables have different\nscope my name within the if block is vishwas whereas within test function is batman\neven though they have the same variable name very important to keep that in mind\nthe final scope is global scope which is the scope outside any block or a\nfunction a global scoped variable is accessible both inside a block as well as a\nfunction let me show you an example above the if block and the function i'm\ngoing to define a constant called mynum and set it to 100.\nlet's lock the value in the if block as well as the function\nso console.log mynum and the same\nwithin the function if we run the code\nyou can see 100 twice so we are able to access a globally\nscoped variable inside a block as well as a function\nalso if we declare a constant called myname again and set it to superman\nrun the code we still see vishwas and batman but not\nsuperman so a globally declared variable will not overwrite block or function scoped\nvariables as you can see scope is a really important concept to be aware of as you\nneed to understand how variable values are resolved by javascript\nwell with that we come to the end of this crash course on the fundamentals of javascript"))}d.isMDXComponent=!0}}]);