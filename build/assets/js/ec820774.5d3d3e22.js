"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[851],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,s=function(e,t){if(null==e)return{};var n,o,s={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=s,h=c["".concat(i,".").concat(m)]||c[m]||d[m]||a;return n?o.createElement(h,r(r({ref:t},u),{},{components:n})):o.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,r=new Array(a);r[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:s,r[1]=l;for(var p=2;p<a;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7180:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),s=(n(7294),n(3905));const a={sidebar_position:21},r="HTTP GET & POST request",l={unversionedId:"4 React/21 HTTP GET & POST request",id:"4 React/21 HTTP GET & POST request",title:"HTTP GET & POST request",description:"how to make a get request",source:"@site/docs/4 React/21 HTTP GET & POST request.md",sourceDirName:"4 React",slug:"/4 React/21 HTTP GET & POST request",permalink:"/fundamentals/4 React/21 HTTP GET & POST request",draft:!1,tags:[],version:"current",sidebarPosition:21,frontMatter:{sidebar_position:21},sidebar:"tutorialSidebar",previous:{title:"Forms",permalink:"/fundamentals/4 React/20 forms"},next:{title:"UseTransition hook",permalink:"/fundamentals/4 React/22 useTransition hook"}},i={},p=[{value:"how to make a get request",id:"how-to-make-a-get-request",level:3},{value:"how to make a post request to send data from our react application",id:"how-to-make-a-post-request-to-send-data-from-our-react-application",level:3},{value:"making put or delete requests",id:"making-put-or-delete-requests",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(c,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"http-get--post-request"},"HTTP GET & POST request"),(0,s.kt)("h3",{id:"how-to-make-a-get-request"},"how to make a get request"),(0,s.kt)("p",null,"all right for the penultimate topic in\nthis crash course we are going to learn how react works with http"),(0,s.kt)("p",null,"we're going to understand with an example how to make a get request and how to make a post request"),(0,s.kt)("p",null,"let's start with get requests"),(0,s.kt)("p",null,"to fetch the data we need to have an api\nendpoint"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"for that i will be making use of json placeholder (",(0,s.kt)("a",{parentName:"li",href:"https://jsonplaceholder.typicode.com/"},"https://jsonplaceholder.typicode.com/"),")")),(0,s.kt)("p",null,"as you can see here it is basically a free fake api for testing and\nprototyping"),(0,s.kt)("p",null,"i want to focus on fetching data in our react application and not on creating an api"),(0,s.kt)("p",null,"now if you scroll down to the ",(0,s.kt)("inlineCode",{parentName:"p"},"Routes section")," you can see the possible http requests\nyou can make"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"for this video i will be making a Get request to slash posts which will fetch\nan array of posts to display in the ui")),(0,s.kt)("p",null,"let's get started"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"i'm going to go back to vs code and create a new file",(0,s.kt)("inlineCode",{parentName:"li"}," PostList.js"))),(0,s.kt)("p",null,"and within the file i'm going to create a function component"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"export const")," post list and this is going to be equal to an arrow function")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const PostList = () => {}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"now to fetch data we need two hooks useState, which we had previously seen and a new hook called useEffect")),(0,s.kt)("p",null,"so at the top\nimport use state comma use effect\nfrom react"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react'\n\nexport const PostList = () => {}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"next we're going to create a new state variable within the component")),(0,s.kt)("p",null,"const, post, the setter function is called setPosts and this is going to be equal to use\nstate with an initial value of empty array"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react'\n\nexport const PostList = () => {\n  const [posts, setPosts] = useState([])\n}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"next we're going to use the use effect hook to make the get request")),(0,s.kt)("p",null,"the syntax is as follows use effect invoke use effect within the component the hook takes in a function as argument"),(0,s.kt)("p",null,"so let's add an arrow function within the function body we make the get\nrequest using the built-in fetch api so fetch"),(0,s.kt)("p",null,"and we pass in the api endpoint this is the url from jsonplaceholder.com"),(0,s.kt)("p",null,"copy and paste it"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react'\n\nexport const PostList = () => {\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n  })\n}\n")),(0,s.kt)("p",null,"the fetch api returns a promise which we\nneed to resolve"),(0,s.kt)("p",null,"so dot then block and convert the response to json\nand chain another then block and with the data retrieved\nupdate the posts state variable"),(0,s.kt)("p",null,"so set post passing in data"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react'\n\nexport const PostList = () => {\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then((response) => response.json())\n      .then((data) => setPosts(data))\n  })\n}\n")),(0,s.kt)("p",null,"let's also add a catch block and log the error to the console if there is any"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react'\n\nexport const PostList = () => {\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then((response) => response.json())\n      .then((data) => setPosts(data))\n      .catch((err) => {\n        console.log(err)\n      })\n  })\n}\n")),(0,s.kt)("p",null,"now the effect we have defined here runs every time the component renders"),(0,s.kt)("p",null,"however we want this to run only once when the component first renders"),(0,s.kt)("p",null,"to do that we pass in an empty array as the second argument to use effect"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react'\n\nexport const PostList = () => {\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then((response) => response.json())\n      .then((data) => setPosts(data))\n      .catch((err) => {\n        console.log(err)\n      })\n  }, [])\n}\n")),(0,s.kt)("p",null,"the array is a list of dependencies on which this effect depends on"),(0,s.kt)("p",null,"since we want the api call to happen only once it has no dependencies"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"the final step is to render the list of posts in the browser")),(0,s.kt)("p",null,"so return a div tag a ul tag and then curly braces\nposts dot map"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react'\n\nexport const PostList = () => {\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then((response) => response.json())\n      .then((data) => setPosts(data))\n      .catch((err) => {\n        console.log(err)\n      })\n  }, [])\n\n  return (\n    <div>\n      <ul>{posts.map()}</ul>\n    </div>\n  )\n}\n")),(0,s.kt)("p",null,"we have already seen how to render a list of items so let me go over this\nfairly quick"),(0,s.kt)("p",null,"for each post we return the li tag\nand each post has a title that we can display"),(0,s.kt)("p",null,"we should also specify a unique value\nfor the key prob which is going to be post dot id"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react'\n\nexport const PostList = () => {\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then((response) => response.json())\n      .then((data) => setPosts(data))\n      .catch((err) => {\n        console.log(err)\n      })\n  }, [])\n\n  return (\n    <div>\n      <ul>\n        {posts.map((post) => {\n          return <li key={post.id}>{post.title}</li>\n        })}\n      </ul>\n    </div>\n  )\n}\n")),(0,s.kt)("p",null,"you can see here that each object in the array has an id and a title"),(0,s.kt)("p",null,"all right let's include this component in app.js and test it out"),(0,s.kt)("p",null,"post list and if that doesn't auto import for you\nmake sure to import the component at the top host list from dot slash components\nslash post list"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\n// import './appStyles.css'\n// import Styles from './appStyles.module.css'\n// import { Inline } from './components/Inline'\n// import { NameList } from './components/NameList'\n// import { UserGreeting } from './components/UserGreeting'\n// import { ParentComponent } from './components/ParentComponent'\n// import { ClickHandler } from './components/ClickHandler'\n// import { Greet } from './components/Greet'\n// import { Message } from './components/Message'\n// import { Stylesheet } from './components/Stylesheet'\n// import { Form } from './components/Form'\nimport { PostList } from './components/PostList'\n\nfunction App() {\n  return (\n    <div className='App'>\n      {/* <Greet name='Bruce' heroName='Batman' />\n      <Greet name='Clark' heroName='Superman'>\n        <button>Action</button>\n      </Greet>\n      <Greet name='Diana' heroName='Wonder Woman'>\n        <p>This is children props</p>\n      </Greet> */}\n      {/* <Message /> */}\n      {/* <ClickHandler /> */}\n      {/* <ParentComponent /> */}\n      {/* <UserGreeting /> */}\n      {/* <NameList /> */}\n      {/* <Stylesheet /> */}\n      {/* <Inline />\n      <h1 className='error'>Error</h1>\n      <h1 className={Styles.success}>Success</h1> */}\n      {/* <Form /> */}\n      <PostList />\n    </div>\n  )\n}\n\nexport default App\n")),(0,s.kt)("p",null,"if you now head to the browser\nyou should see the list of post titles being displayed"),(0,s.kt)("p",null,"this is pretty much how you fetch data\nwith use effect and display the data with you state"),(0,s.kt)("p",null,"use effect is a hook that you can use to make side effects in your components"),(0,s.kt)("p",null,"the side effect in this example is an api request"),(0,s.kt)("p",null,"the first argument to use effect is a\nfunction and the second argument is a dependency array which is used to\ndetermine when to rerun the effect"),(0,s.kt)("p",null,"since we have an empty array the effect\nis run only once when the component first mounts"),(0,s.kt)("h3",{id:"how-to-make-a-post-request-to-send-data-from-our-react-application"},"how to make a post request to send data from our react application"),(0,s.kt)("p",null,"now on similar lines let's see how to\nmake a post request to send data from our react application"),(0,s.kt)("p",null,"if we go back to jsonplaceholder, under routes we have a small node\nseed guide for usage examples"),(0,s.kt)("p",null,"here if you scroll down you can see we have the code necessary\nto make a post request"),(0,s.kt)("p",null,"however the data it needs\nwhich is title body and user id are hard coded"),(0,s.kt)("p",null,"let's instead capture user inputs and make the first request using the data"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"back in vs code i'm going to create a new file called ",(0,s.kt)("inlineCode",{parentName:"li"},"PostForm.js"))),(0,s.kt)("p",null,"within the file i'm going to create a function component"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"export const post form is equal to an\narrow function")),(0,s.kt)("p",null,"now for the jsx we need a form with\nthree input fields"),(0,s.kt)("p",null,"return a form tag\na div tag type is equal to text"),(0,s.kt)("p",null,"and placeholder is user id"),(0,s.kt)("p",null,"the second input placeholder is title"),(0,s.kt)("p",null,"and the third input placeholder is body"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const PostForm = () => {\n  return (\n    <form>\n      <div>\n        <input type='text' placeholder='User ID' />\n      </div>\n      <div>\n        <input type='text' placeholder='Title' />\n      </div>\n      <div>\n        <input type='text' placeholder='Body' />\n      </div>\n    </form>\n  )\n}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"next let's create state variables for the three fields and link them to the input elements")),(0,s.kt)("p",null,"at the top import use state from react"),(0,s.kt)("p",null,"and within the component call use state three times for each of the three inputs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const PostForm = () => {\n  useState()\n  useState()\n  useState()\n  return (\n    <form>\n      <div>\n        <input type='text' placeholder='User ID' />\n      </div>\n      <div>\n        <input type='text' placeholder='Title' />\n      </div>\n      <div>\n        <input type='text' placeholder='Body' />\n      </div>\n    </form>\n  )\n}\n")),(0,s.kt)("p",null,"the first one const user id comma set user id\nand the initial value is an empty string"),(0,s.kt)("p",null,"similarly\nconst title comma set title and the initial value is an empty string"),(0,s.kt)("p",null,"finally const body comma set body and the initial value is an empty\nstring"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const PostForm = () => {\n  const [userId, setUserId] = useState('')\n  const [title, setTitle] = useState('')\n  const [body, setBody] = useState('')\n  return (\n    <form>\n      <div>\n        <input type='text' placeholder='User ID' />\n      </div>\n      <div>\n        <input type='text' placeholder='Title' />\n      </div>\n      <div>\n        <input type='text' placeholder='Body' />\n      </div>\n    </form>\n  )\n}\n")),(0,s.kt)("p",null,"on the inputs let's assign the\nappropriate variable to the value attribute"),(0,s.kt)("p",null,"value is equal to user id"),(0,s.kt)("p",null,"value is equal to title"),(0,s.kt)("p",null,"and value is equal to body"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const PostForm = () => {\n  const [userId, setUserId] = useState('')\n  const [title, setTitle] = useState('')\n  const [body, setBody] = useState('')\n  return (\n    <form>\n      <div>\n        <input type='text' placeholder='User ID' value={userId} />\n      </div>\n      <div>\n        <input type='text' placeholder='Title' value={title} />\n      </div>\n      <div>\n        <input type='text' placeholder='Body' value={body} />\n      </div>\n    </form>\n  )\n}\n")),(0,s.kt)("p",null,"also handle the onchange event"),(0,s.kt)("p",null,"you get access to the event and on the first input we call set user\nid passing in event dot target dot value"),(0,s.kt)("p",null,"similarly on change event\nset title event dot target dot value"),(0,s.kt)("p",null,"and on change event set body\nevent.target.value"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const PostForm = () => {\n  const [userId, setUserId] = useState('')\n  const [title, setTitle] = useState('')\n  const [body, setBody] = useState('')\n  return (\n    <form>\n      <div>\n        <input\n          type='text'\n          placeholder='User ID'\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          placeholder='Title'\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          placeholder='Body'\n          value={body}\n          onChange={(e) => setBody(e.target.value)}\n        />\n      </div>\n    </form>\n  )\n}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"the last thing we need is the submit handler")),(0,s.kt)("p",null,"i'm going to add a button\nof type submit"),(0,s.kt)("p",null,"and then on the form tag we listen to the on submit event and assign a handler\nsubmit handler"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const PostForm = () => {\n  const [userId, setUserId] = useState('')\n  const [title, setTitle] = useState('')\n  const [body, setBody] = useState('')\n  return (\n    <form onSubmit={subHandler}>\n      <div>\n        <input\n          type='text'\n          placeholder='User ID'\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          placeholder='Title'\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          placeholder='Body'\n          value={body}\n          onChange={(e) => setBody(e.target.value)}\n        />\n      </div>\n      <button type='submit'>Submit</button>\n    </form>\n  )\n}\n")),(0,s.kt)("p",null,"let's define this handler"),(0,s.kt)("p",null,"const submit handler is going to be equal to a function\nwhich receives the submit event and within the function body we call event dot prevent default\nto prevent the form submission and page refreshing"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const PostForm = () => {\n  const [userId, setUserId] = useState('')\n  const [title, setTitle] = useState('')\n  const [body, setBody] = useState('')\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n  }\n  return (\n    <form onSubmit={submitHandler}>\n      <div>\n        <input\n          type='text'\n          placeholder='User ID'\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          placeholder='Title'\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          placeholder='Body'\n          value={body}\n          onChange={(e) => setBody(e.target.value)}\n        />\n      </div>\n      <button type='submit'>Submit</button>\n    </form>\n  )\n}\n")),(0,s.kt)("p",null,"finally to make the post request\ncopy the code from jsonplaceholder and paste it"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const PostForm = () => {\n  const [userId, setUserId] = useState('')\n  const [title, setTitle] = useState('')\n  const [body, setBody] = useState('')\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n    fetch('https://jsonplaceholder.typicode.com/posts/1', {\n      method: 'PUT',\n      body: JSON.stringify({\n        id: 1,\n        title: 'foo',\n        body: 'bar',\n        userId: 1,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    })\n      .then((response) => response.json())\n      .then((json) => console.log(json))\n  }\n  return (\n    <form onSubmit={submitHandler}>\n      <div>\n        <input\n          type='text'\n          placeholder='User ID'\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          placeholder='Title'\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          placeholder='Body'\n          value={body}\n          onChange={(e) => setBody(e.target.value)}\n        />\n      </div>\n      <button type='submit'>Submit</button>\n    </form>\n  )\n}\n")),(0,s.kt)("p",null,"however change the hard-coded values\ntitle body and user id"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const PostForm = () => {\n  const [userId, setUserId] = useState('')\n  const [title, setTitle] = useState('')\n  const [body, setBody] = useState('')\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n    fetch('https://jsonplaceholder.typicode.com/posts/1', {\n      method: 'PUT',\n      body: JSON.stringify({\n        id: 1,\n        title: 'title',\n        body: 'body',\n        userId: userId,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    })\n      .then((response) => response.json())\n      .then((json) => console.log(json))\n  }\n  return (\n    <form onSubmit={submitHandler}>\n      <div>\n        <input\n          type='text'\n          placeholder='User ID'\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          placeholder='Title'\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          placeholder='Body'\n          value={body}\n          onChange={(e) => setBody(e.target.value)}\n        />\n      </div>\n      <button type='submit'>Submit</button>\n    </form>\n  )\n}\n")),(0,s.kt)("p",null,"the other noticeable difference with the built-in fetch method as we now have method set to post\nand headers"),(0,s.kt)("p",null,"with the response we simply convert it into json and log it to the console"),(0,s.kt)("p",null,"now let's include this component in app component"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"import the component at the top")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\n// import './appStyles.css'\n// import Styles from './appStyles.module.css'\n// import { Inline } from './components/Inline'\n// import { NameList } from './components/NameList'\n// import { UserGreeting } from './components/UserGreeting'\n// import { ParentComponent } from './components/ParentComponent'\n// import { ClickHandler } from './components/ClickHandler'\n// import { Greet } from './components/Greet'\n// import { Message } from './components/Message'\n// import { Stylesheet } from './components/Stylesheet'\n// import { Form } from './components/Form'\nimport { PostForm } from './components/PostForm'\nimport { PostList } from './components/PostList'\n\nfunction App() {\n  return (\n    <div className='App'>\n      {/* <Greet name='Bruce' heroName='Batman' />\n      <Greet name='Clark' heroName='Superman'>\n        <button>Action</button>\n      </Greet>\n      <Greet name='Diana' heroName='Wonder Woman'>\n        <p>This is children props</p>\n      </Greet> */}\n      {/* <Message /> */}\n      {/* <ClickHandler /> */}\n      {/* <ParentComponent /> */}\n      {/* <UserGreeting /> */}\n      {/* <NameList /> */}\n      {/* <Stylesheet /> */}\n      {/* <Inline />\n      <h1 className='error'>Error</h1>\n      <h1 className={Styles.success}>Success</h1> */}\n      {/* <Form /> */}\n      <PostForm />\n      <PostList />\n    </div>\n  )\n}\n\nexport default App\n")),(0,s.kt)("p",null,"save the file and head back to the browser\ni fill in user id title\nbody and click on submit"),(0,s.kt)("p",null,"in the console you should now be able to see the response"),(0,s.kt)("p",null,"if you expand the object you pretty much get back the same object you posted but this time with the unique id"),(0,s.kt)("p",null,"this object can be used for any necessary changes in the ui"),(0,s.kt)("p",null,"for example you can add this object to\nthe end of the post list which might be displayed in the browser"),(0,s.kt)("p",null,"so there you go making a post request in your react application"),(0,s.kt)("p",null,"create the input fields type the values to the state object and make a post request in the submit handler"),(0,s.kt)("h3",{id:"making-put-or-delete-requests"},"making put or delete requests"),(0,s.kt)("p",null,"once you get the hang of get and post requests making put or delete requests\nis pretty much the same so i will leave that for you to experiment with"))}d.isMDXComponent=!0}}]);