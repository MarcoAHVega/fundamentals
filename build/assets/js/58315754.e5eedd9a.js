"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[1862],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var r=i.createContext({}),d=function(e){var n=i.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(r.Provider,{value:n},e.children)},w="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),w=d(t),m=o,h=w["".concat(r,".").concat(m)]||w[m]||p[m]||a;return t?i.createElement(h,s(s({ref:n},c),{},{components:t})):i.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l[w]="string"==typeof e?e:o,s[1]=l;for(var d=2;d<a;d++)s[d]=t[d];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7317:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=t(7462),o=(t(7294),t(3905));const a={sidebar_position:41},s="Dimensions API Drawback",l={unversionedId:"6 React Native/Section 5: Dynamic User Interfaces/41 Dimensions API Drawback",id:"6 React Native/Section 5: Dynamic User Interfaces/41 Dimensions API Drawback",title:"Dimensions API Drawback",description:"- In the previous video, we learned how to use the Dimensions API to define responsive styles for UI elements.",source:"@site/docs/6 React Native/Section 5: Dynamic User Interfaces/41 Dimensions API Drawback.md",sourceDirName:"6 React Native/Section 5: Dynamic User Interfaces",slug:"/6 React Native/Section 5: Dynamic User Interfaces/41 Dimensions API Drawback",permalink:"/fundamentals/6 React Native/Section 5: Dynamic User Interfaces/41 Dimensions API Drawback",draft:!1,tags:[],version:"current",sidebarPosition:41,frontMatter:{sidebar_position:41},sidebar:"tutorialSidebar",previous:{title:"Dimensions API",permalink:"/fundamentals/6 React Native/Section 5: Dynamic User Interfaces/40 Dimensions API"},next:{title:"useWindowDimensions",permalink:"/fundamentals/6 React Native/Section 5: Dynamic User Interfaces/42 useWindowDimensions"}},r={},d=[{value:"Logging Device Dimensions",id:"logging-device-dimensions",level:3},{value:"Adapting to Landscape Mode",id:"adapting-to-landscape-mode",level:3},{value:"The Solution: Using Hooks and Inline Styles",id:"the-solution-using-hooks-and-inline-styles",level:3}],c={toc:d},w="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(w,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dimensions-api-drawback"},"Dimensions API Drawback"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the previous video, we learned how to use the Dimensions API to define responsive styles for UI elements.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We successfully configured the height, width, and font size based on the device dimensions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Although this works, we do have an issue: device dimensions can change when the screen orientation changes, and unfortunately, the Dimensions API doesn't dynamically update with these changes.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me help you understand with an example."))),(0,o.kt)("h3",{id:"logging-device-dimensions"},"Logging Device Dimensions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"I'll log the device height and width to the console.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When I save the file, you can see the different device dimensions are logged in the console.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The iPhone dimensions here are logged as 852 for height and 393 for width.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, let's rotate the iPhone device by 90 degrees using the rotate button.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Although the device switches from portrait to landscape mode, our app doesn't seem to adapt to the orientation changes as expected.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Ideally, the welcome text should also rotate similar to how one would read in portrait mode."))),(0,o.kt)("h3",{id:"adapting-to-landscape-mode"},"Adapting to Landscape Mode"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Our application doesn't adapt to landscape mode because of an Expo setting defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"app.json"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, the orientation setting is fixed to portrait mode."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"orientation": "portrait",\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As a result, our UI is tailored solely for portrait orientation.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's adjust this to default."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"orientation": "default",\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now when I save the file, press ",(0,o.kt)("inlineCode",{parentName:"p"},"R")," to restart the server with the device orientation reset behind the scenes.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You will see iPhone window height 852 and window width 393.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But with the orientation now set to default, if I rotate the iPhone, the app adapts and the text becomes readable once again.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, the responsive styles don't seem to be working after rotating.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The iPhone's device width would become 852, and the device height would become 393.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This change in width and height should prompt the View component's width to change to 70 percent and the text font size to increase to 50.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Yet these changes aren't being reflected.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"The width remains at 90 percent, which can be clearly inferred, and the text font size is still 24 pixels"),", the same as the Android device in portrait mode."))),(0,o.kt)("h3",{id:"the-solution-using-hooks-and-inline-styles"},"The Solution: Using Hooks and Inline Styles"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"The only way to recalculate the dimensions is to restart our application."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When I bring focus to the device and press ",(0,o.kt)("inlineCode",{parentName:"p"},"R")," to restart, you can see the width adjusts to 70 percent, and font size is now 50 pixels.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The updated dimensions are also logged to the console.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Height is now 393, and width is 852.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But this is the drawback of the Dimensions API: ",(0,o.kt)("inlineCode",{parentName:"p"},"the values don't dynamically update when the window dimensions change"),", either due to orientation changes or more complex scenarios such as foldable phones.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Of course, we do have a solution to this problem.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me walk you through the fix."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 1:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Import ",(0,o.kt)("inlineCode",{parentName:"li"},"useState")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"useEffect")," hooks from React.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 2:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create a state variable that will store the device dimensions when the screen loads.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hook and pass in an object.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This object will have a key called ",(0,o.kt)("inlineCode",{parentName:"p"},"window"),", which is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"Dimensions.get"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 3:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add an effect that listens to changes in the device dimensions and updates the dimensions state value.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Listen to dimension changes using the static method ",(0,o.kt)("inlineCode",{parentName:"p"},"addEventListener")," on the Dimensions API.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This will return a subscription.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"subscription")," constant is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"Dimensions.addEventListener"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener()\n  })\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We listen to ",(0,o.kt)("inlineCode",{parentName:"p"},"change")," in the dimensions and execute a callback function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This function receives an object from which we destructure ",(0,o.kt)("inlineCode",{parentName:"p"},"window")," and call the ",(0,o.kt)("inlineCode",{parentName:"p"},"setDimensions")," setter function, passing in ",(0,o.kt)("inlineCode",{parentName:"p"},"window"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\n\n  return (\n    export default function App() {\n      const [dimensions, setDimensions] = useState({\n        window: Dimensions.get('window'),\n      })\n\n      useEffect(() => {\n        const subscription = Dimensions.addEventListener('change', ({ window }) => {\n          setDimensions({ window })\n        })\n      })\n\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We will also clean up the subscription.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 4:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Extract the device width and height from the dimensions state variable.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create constants window from dimensions, ",(0,o.kt)("inlineCode",{parentName:"p"},"const { window } = Dimensions"),",")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"windowWidth equal to window.width, ",(0,o.kt)("inlineCode",{parentName:"p"},"const windowWidth = window.width"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and windowHeight equal to window.height, ",(0,o.kt)("inlineCode",{parentName:"p"},"const windowHeight = window.height")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  const { window } = dimensions\n  const windowWidth = window.width\n  const windowHeight = window.height\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 5:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add inline styles that dynamically change based on the device dimensions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Comment out:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"the two lines outside the component,"),(0,o.kt)("li",{parentName:"ul"},"width and height calculation in the Stylesheet API,"),(0,o.kt)("li",{parentName:"ul"},"and the entire text key as well")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  const { window } = dimensions\n  const windowWidth = window.width\n  const windowHeight = window.height\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"on the text component, Replace the entire ",(0,o.kt)("inlineCode",{parentName:"li"},"Styles.text")," with an object where we set ",(0,o.kt)("inlineCode",{parentName:"li"},"fontSize:")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"windowWidth > 500 ? 50 : 24"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  const { window } = dimensions\n  const windowWidth = window.width\n  const windowHeight = window.height\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={{ fontSize: windowWidth > 500 ? 50 : 24 }}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For the view container, use the array syntax to extend the styles,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Also, specify width and height the same as before in the Stylesheet API.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's also make sure to comment out the console log statement."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  const { window } = dimensions\n  const windowWidth = window.width\n  const windowHeight = window.height\n\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.box,\n          {\n            width: windowWidth > 500 ? '70%' : '90%',\n            height: windowHeight > 600 ? '60%' : '90%',\n          },\n        ]}>\n        <Text style={{ fontSize: windowWidth > 500 ? 50 : 24 }}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\n// console.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we now save the file and go back to our iPhone device, you can see the default portrait orientation still works.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But when we change to landscape, the width and font size are adjusted to 70 and 50 pixels.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We are able to add dynamic styles to our UI elements based on device dimensions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you take a look at the code, though, it does seem a little verbose, doesn't it?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"What if there was an easier way that abstracts all of this?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Well, there is, and that is what we will be learning in the next video."))))}p.isMDXComponent=!0}}]);