"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[8071],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=u(n),c=r,k=m["".concat(l,".").concat(c)]||m[c]||d[c]||i;return n?a.createElement(k,p(p({ref:t},s),{},{components:n})):a.createElement(k,p({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:r,p[1]=o;for(var u=2;u<i;u++)p[u]=n[u];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3168:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:58},p="TextInput",o={unversionedId:"6 React Native Expo CLI/Section 8: Inputs and Forms/58 TextInput",id:"6 React Native Expo CLI/Section 8: Inputs and Forms/58 TextInput",title:"TextInput",description:"TextInput",source:"@site/docs/6 React Native Expo CLI/Section 8: Inputs and Forms/58 TextInput.md",sourceDirName:"6 React Native Expo CLI/Section 8: Inputs and Forms",slug:"/6 React Native Expo CLI/Section 8: Inputs and Forms/58 TextInput",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/58 TextInput",draft:!1,tags:[],version:"current",sidebarPosition:58,frontMatter:{sidebar_position:58},sidebar:"tutorialSidebar",previous:{title:"Inputs and Forms",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/57 Inputs and Forms"},next:{title:"TextInput Props",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/59 TextInput Props"}},l={},u=[{value:"<strong>TextInput</strong>",id:"textinput-1",level:2},{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"<strong>=&gt;</strong> Getting Started",id:"-getting-started",level:3},{value:"<strong>=&gt;</strong> Adding Text Input",id:"-adding-text-input",level:3},{value:"<strong>=&gt;</strong> Styling the Text Input",id:"-styling-the-text-input",level:3},{value:"<strong>=&gt;</strong> Tracking Input Value with useState",id:"-tracking-input-value-with-usestate",level:3},{value:"<strong>=&gt;</strong> Displaying Input Value",id:"-displaying-input-value",level:3},{value:"<strong>=&gt;</strong> Summary",id:"-summary",level:3}],s={toc:u},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"textinput"},"TextInput"),(0,r.kt)("h2",{id:"textinput-1"},(0,r.kt)("strong",{parentName:"h2"},"TextInput")),(0,r.kt)("blockquote",null),(0,r.kt)("h3",{id:"-intro"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The Text Input component is a fundamental building block for user input in React Native.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It allows users to enter text and other data into your application."))),(0,r.kt)("h3",{id:"-getting-started"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Getting Started"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"I'm going to start by making some changes in App.js"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"expo-status-bar")," import from Expo and instead import ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusBar")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"react-native")," to stick with vanilla RN")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Import ",(0,r.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," and replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," component with ",(0,r.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," to handle iOS padding at the top.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For Android, add padding equal to the status bar height in the container styles. ",(0,r.kt)("inlineCode",{parentName:"p"},"paddingTop: StatusBar.currentHeight"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Remove any alignment properties on the container that may affect text input placement.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Delete the JSX within the ",(0,r.kt)("inlineCode",{parentName:"p"},"SafeAreaView"),"."))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView } from 'react-native'\n\nexport default function App() {\n  return <SafeAreaView style={styles.container}></SafeAreaView>\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n})\n")),(0,r.kt)("h3",{id:"-adding-text-input"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Adding Text Input"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We are now ready for our text input.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Begin by importing it from React Native and invoke the component within ",(0,r.kt)("inlineCode",{parentName:"p"},"SafeAreaView"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"However, when you view it on your devices, you may not see the text input component.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The styling is such that you don't really see it.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you try to click on the input, you can see the cursor."))),(0,r.kt)("h3",{id:"-styling-the-text-input"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Styling the Text Input"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Let's add some styles to fix this.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Let's call the key ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," and add a height of 40 pixels, margin, padding, and border width.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Assign this style to the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextInput")," component"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput style={styles.input} />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now, when you view the UI, you can clearly see the text input component.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can focus on the input and start typing.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"On Android, it brings up the keyboard, and you can continue typing.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For iOS, if you want a similar keyboard, you need to press ",(0,r.kt)("inlineCode",{parentName:"p"},"Command+Shift+K"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This will bring up the keyboard, and you can press different keys.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Press ",(0,r.kt)("inlineCode",{parentName:"p"},"Command+Shift+K")," again, and the keyboard disappears."))),(0,r.kt)("h3",{id:"-tracking-input-value-with-usestate"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Tracking Input Value with useState"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"However, the value you've entered isn't being tracked.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To track the input value, we can make use of a ",(0,r.kt)("inlineCode",{parentName:"p"},"state")," variable similar to how we do it in React.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Import ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," from React")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"and create a state variable ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"setName")," function with an initial value of an empty string."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput style={styles.input} />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Assign ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," to the ",(0,r.kt)("inlineCode",{parentName:"li"},"value")," prop on the ",(0,r.kt)("inlineCode",{parentName:"li"},"TextInput")," and assign ",(0,r.kt)("inlineCode",{parentName:"li"},"setName")," function to the ",(0,r.kt)("inlineCode",{parentName:"li"},"onChangeText")," prop of the text input component.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This will automatically update the state variable when you start typing in the input box.")),(0,r.kt)("h3",{id:"-displaying-input-value"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Displaying Input Value"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Let's add some text to make sure we are tracking the input value:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n      />\n      <Text>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Let's also add some styles to make it clear:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Now, when you start typing on the devices, you can see the same value is reflected in the text component below.")),(0,r.kt)("h3",{id:"-summary"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TextInput")," component is a tool for inputting text into the app via a keyboard.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can import it from the React Native library and invoke it with the ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onChangeText")," props to manage its state.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Join me in the next video where we will learn about some of the important props supported by the text input component."))))}d.isMDXComponent=!0}}]);