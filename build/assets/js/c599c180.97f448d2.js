"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[6750],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6273:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:59},i="TextInput Props",p={unversionedId:"6 React Native Expo CLI/Section 8: Inputs and Forms/59 TextInput Props",id:"6 React Native Expo CLI/Section 8: Inputs and Forms/59 TextInput Props",title:"TextInput Props",description:"TextInput Props",source:"@site/docs/6 React Native Expo CLI/Section 8: Inputs and Forms/59 TextInput Props.md",sourceDirName:"6 React Native Expo CLI/Section 8: Inputs and Forms",slug:"/6 React Native Expo CLI/Section 8: Inputs and Forms/59 TextInput Props",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/59 TextInput Props",draft:!1,tags:[],version:"current",sidebarPosition:59,frontMatter:{sidebar_position:59},sidebar:"tutorialSidebar",previous:{title:"TextInput",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/58 TextInput"},next:{title:"Multiline TextInput",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/60 Multiline TextInput"}},l={},s=[{value:"<strong>TextInput Props</strong>",id:"textinput-props-1",level:2},{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"<strong>=&gt;</strong> Placeholder Prop",id:"-placeholder-prop",level:3},{value:"<strong>=&gt;</strong> SecureTextEntry Prop",id:"-securetextentry-prop",level:3},{value:"<strong>=&gt;</strong> keyboardType Prop",id:"-keyboardtype-prop",level:3},{value:"<strong>=&gt;</strong> AutoCorrection and AutoCapitalization",id:"-autocorrection-and-autocapitalization",level:3}],u={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"textinput-props"},"TextInput Props"),(0,r.kt)("h2",{id:"textinput-props-1"},(0,r.kt)("strong",{parentName:"h2"},"TextInput Props")),(0,r.kt)("blockquote",null),(0,r.kt)("h3",{id:"-intro"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In the previous video, we explored the fundamental aspects of the TextInput component in React Native.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In this video, let's dive into some important props that allow you to customize the behavior and appearance of the TextInput component."))),(0,r.kt)("h3",{id:"-placeholder-prop"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Placeholder Prop"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"First, we have the ",(0,r.kt)("inlineCode",{parentName:"p"},"placeholder")," prop.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It provides users with visual cues about the expected input.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For example, we can specify ",(0,r.kt)("inlineCode",{parentName:"p"},"placeholder= 'email@example.com'")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When we take a look at the UI, you can see that before the user starts typing, the placeholder text is displayed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This guides them on what information to provide, in our case, an email.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Please remember that ",(0,r.kt)("inlineCode",{parentName:"p"},"a placeholder is not a substitute for a label"),", as the hint disappears once you start typing."))),(0,r.kt)("h3",{id:"-securetextentry-prop"},(0,r.kt)("strong",{parentName:"h3"},"=>")," SecureTextEntry Prop"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The second prop is ",(0,r.kt)("inlineCode",{parentName:"p"},"secureTextEntry"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Enabling this prop masks the input characters, making them appear as asterisks or dots."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        secureTextEntry\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This ensures that the user's input remains hidden when dealing with sensitive information like passwords.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"secureTextEntry")," prop is crucial for privacy and security."))),(0,r.kt)("h3",{id:"-keyboardtype-prop"},(0,r.kt)("strong",{parentName:"h3"},"=>")," keyboardType Prop"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The third prop to be aware of is ",(0,r.kt)("inlineCode",{parentName:"p"},"keyboardType"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This prop allows you to specify the type of keyboard that appears when the user interacts with the text input.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For example, if you have created a phone number field, you can set ",(0,r.kt)("inlineCode",{parentName:"p"},"keyboardType = 'numeric'")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        secureTextEntry\n        keyboardType='numeric'\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Returning to the UI and focusing on the text input field on Android, you can see the numeric keyboard.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"There are a few other values you can specify, but you can see how this prop enhances the user experience."))),(0,r.kt)("h3",{id:"-autocorrection-and-autocapitalization"},(0,r.kt)("strong",{parentName:"h3"},"=>")," AutoCorrection and AutoCapitalization"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Let me walk you through two more props which are sometimes not favored but are enabled by default.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'If I restart the app and head back to the UI, if I were to type "watre" and press Enter, you can see it auto-corrects to "water."')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'Also, if I type "john doe" and press Enter, you can see it auto-capitalizes the last name.')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"While this behavior is valid for some scenarios, for a username or email field that doesn't always follow perfect English, you might want to relax these enforcements.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To do that, you can set ",(0,r.kt)("inlineCode",{parentName:"p"},"autoCorrect={false}")," ",(0,r.kt)("inlineCode",{parentName:"p"},'autoCapitalize="none"')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        // secureTextEntry\n        // keyboardType='numeric'\n        autoCorrect={false}\n        autoCapitalize='none'\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Other values for ",(0,r.kt)("inlineCode",{parentName:"li"},"autoCapitalize")," include capitalizing every ",(0,r.kt)("inlineCode",{parentName:"li"},"character"),", the first character of every ",(0,r.kt)("inlineCode",{parentName:"li"},"words"),", or the first character of every ",(0,r.kt)("inlineCode",{parentName:"li"},"sentences")," (which is the default).")))}m.isMDXComponent=!0}}]);