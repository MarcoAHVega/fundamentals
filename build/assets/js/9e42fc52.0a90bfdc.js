"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[196],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>f});var a=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var c=a.createContext({}),p=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},s=function(t){var e=p(t.components);return a.createElement(c.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,c=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),u=p(n),m=i,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(f,o(o({ref:e},s),{},{components:n})):a.createElement(f,o({ref:e},s))}));function f(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l[u]="string"==typeof t?t:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8045:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:16},o="ActivityIndicator Component",l={unversionedId:"6 React Native/16 ActivityIndicator",id:"6 React Native/16 ActivityIndicator",title:"ActivityIndicator Component",description:"- In this video, let's take a look at the ActivityIndicator component.",source:"@site/docs/6 React Native/16 ActivityIndicator.md",sourceDirName:"6 React Native",slug:"/6 React Native/16 ActivityIndicator",permalink:"/fundamentals/6 React Native/16 ActivityIndicator",draft:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"StatusBar component",permalink:"/fundamentals/6 React Native/15 StatusBar"},next:{title:"REACT 2023",permalink:"/fundamentals/category/react-2023"}},c={},p=[{value:"Usage",id:"usage",level:3},{value:"Important Props",id:"important-props",level:3}],s={toc:p},u="wrapper";function d(t){let{components:e,...n}=t;return(0,i.kt)(u,(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"activityindicator-component"},"ActivityIndicator Component"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In this video, let's take a look at the ActivityIndicator component.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ActivityIndicator component displays a circular loading indicator.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It is used to inform users about the status of ongoing processes, such as loading an app, submitting a form, or saving updates."))),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To begin, import the ActivityIndicator component from React Native and place it within a view.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, ActivityIndicator } from 'react-native'\n\nexport default function App() {\n  const [isStatusBarHidden, setIsStatusBarHidden] = useState(false)\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <ActivityIndicator />\n    </View>\n  )\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If we save the file, you will notice the circular loading indicator in both iOS and Android.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"They are indeed very small, and the color contrast is not great. So, I recommend you verify this on your own simulator or virtual device.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Although they have slight visual differences, they effectively convey the message that something is happening in the background."))),(0,i.kt)("h3",{id:"important-props"},"Important Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Let's highlight three important props for this component:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"size")," prop: By default, it is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"small"),", but we can change it to ",(0,i.kt)("inlineCode",{parentName:"li"},"large"),".")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, ActivityIndicator } from 'react-native'\n\nexport default function App() {\n  const [isStatusBarHidden, setIsStatusBarHidden] = useState(false)\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <ActivityIndicator />\n      <ActivityIndicator size='large' />\n    </View>\n  )\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"color")," prop: By default, it uses the system accent default color for Android and a shade of gray for iOS. However, we can customize it by setting a specific color, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"midnightblue"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, ActivityIndicator } from 'react-native'\n\nexport default function App() {\n  const [isStatusBarHidden, setIsStatusBarHidden] = useState(false)\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <ActivityIndicator />\n      <ActivityIndicator size='large' />\n      <ActivityIndicator size='large' color='midnightblue' />\n    </View>\n  )\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"animating")," prop: By default, it is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", which is why we see the indicator."),(0,i.kt)("li",{parentName:"ul"},"We can set it to ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," to hide the indicator.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, ActivityIndicator } from 'react-native'\n\nexport default function App() {\n  const [isStatusBarHidden, setIsStatusBarHidden] = useState(false)\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <ActivityIndicator />\n      <ActivityIndicator size='large' />\n      <ActivityIndicator size='large' color='midnightblue' />\n      <ActivityIndicator size='large' color='midnightblue' animating={false} />\n    </View>\n  )\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Keep in mind that the recommended approach is to use a state variable for the ",(0,i.kt)("inlineCode",{parentName:"p"},"animating")," prop.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In summary, the ActivityIndicator component displays a loading indicator to inform users about ongoing background processes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can customize it using the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," prop to set the size,")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"the ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," prop to set a predefined or custom color,")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"and the ",(0,i.kt)("inlineCode",{parentName:"p"},"animating")," prop to control visibility."))))}d.isMDXComponent=!0}}]);