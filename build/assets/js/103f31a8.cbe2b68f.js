"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[6937],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),h=s,d=u["".concat(i,".").concat(h)]||u[h]||m[h]||l;return n?a.createElement(d,r(r({ref:t},c),{},{components:n})):a.createElement(d,r({ref:t},c))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var l=n.length,r=new Array(l);r[0]=h;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[u]="string"==typeof e?e:s,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1153:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7462),s=(n(7294),n(3905));const l={sidebar_position:19},r="Styling",o={unversionedId:"4 React 18/19 styling",id:"4 React 18/19 styling",title:"Styling",description:"there are a couple of options to style react components",source:"@site/docs/4 React 18/19 styling.md",sourceDirName:"4 React 18",slug:"/4 React 18/19 styling",permalink:"/fundamentals/4 React 18/19 styling",draft:!1,tags:[],version:"current",sidebarPosition:19,frontMatter:{sidebar_position:19},sidebar:"tutorialSidebar",previous:{title:"List rendering",permalink:"/fundamentals/4 React 18/18 list rendering"},next:{title:"Forms",permalink:"/fundamentals/4 React 18/20 forms"}},i={},p=[{value:"there are a couple of options to style react components",id:"there-are-a-couple-of-options-to-style-react-components",level:3},{value:"using regular css style sheets",id:"using-regular-css-style-sheets",level:3},{value:"inline styling",id:"inline-styling",level:3},{value:"css modules",id:"css-modules",level:3},{value:"one advantage of using css modules is that the classes are locally scoped by default",id:"one-advantage-of-using-css-modules-is-that-the-classes-are-locally-scoped-by-default",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"styling"},"Styling"),(0,s.kt)("h3",{id:"there-are-a-couple-of-options-to-style-react-components"},"there are a couple of options to style react components"),(0,s.kt)("p",null,"  all right next we're going to learn the basics of styling and css when it comes\nto react"),(0,s.kt)("p",null,"  there are a couple of options to style react components"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"the first one is regular css style sheets")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"the second one is inline styling")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"third we have css modules")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"fourth we can use css in js libraries which work really well with react"),(0,s.kt)("p",{parentName:"li"},"in this crash course we're going to cover the first three approaches"),(0,s.kt)("p",{parentName:"li"},"learning a css in js library is a separate series in itself and i'll point you in the right direction towards the end of this video"))),(0,s.kt)("h3",{id:"using-regular-css-style-sheets"},"using regular css style sheets"),(0,s.kt)("p",null,"  all right let's start with the first approach using regular css style sheets"),(0,s.kt)("p",null,"  back in vs code within the components folder"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"i'm going to create a new file called ",(0,s.kt)("inlineCode",{parentName:"p"},"Stylesheet.js")),(0,s.kt)("p",{parentName:"li"},"within the file i'm going to create a function component"),(0,s.kt)("p",{parentName:"li"},"export const stylesheet, and this is equal to an arrow function"),(0,s.kt)("p",{parentName:"li"},"in the jsx i'm going to return an h1 tag\nthat says stylesheets"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const Stylesheet = () => {\n  return <h1>Stylesheets</h1>\n}\n"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"i will also include the file in app\ncomponent")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"and make sure to import it from dot slash components slash style sheet"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"now to specify the css for this component i'm going to create a new file\ncalled myStyles.css")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"i'm going to add it within the components folder")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"within the file i'm going to create a class primary\nwhere color is set to orange"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-css"},".primary {\n  color: orange;\n}\n")),(0,s.kt)("p",{parentName:"li"},"now to be able to use this class in our\ncomponent we have to import it so at the top\nimport dot slash my styles dot css"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import './myStyles.css'\n\nexport const Stylesheet = () => {\n  return <h1>Stylesheets</h1>\n}\n")),(0,s.kt)("p",{parentName:"li"},"now on the h1 tag we can specify the class using the class\nname attribute"),(0,s.kt)("p",{parentName:"li"},"class name is equal to primary"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import './myStyles.css'\n\nexport const Stylesheet = () => {\n  return <h1 className='primary'>Stylesheets</h1>\n}\n")),(0,s.kt)("p",{parentName:"li"},"if we save the file and take a look at\nthe browser the text should appear in orange"),(0,s.kt)("p",{parentName:"li"},"so this is the regular css stylesheets approach to styling a react component"))),(0,s.kt)("h3",{id:"inline-styling"},"inline styling"),(0,s.kt)("p",null,"  next we have inline styling"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"i'm going to create a new file called ",(0,s.kt)("inlineCode",{parentName:"p"},"Inline.js"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"and create a new function component")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"within the return statement i will add a new heading that says inline"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const Inline = () => {\n  return <h1>Inline</h1>\n}\n")),(0,s.kt)("p",{parentName:"li"},"now let's style this heading"),(0,s.kt)("p",{parentName:"li"},"in react inline styles are not specified as a string instead they are specified with an object whose key is the camel cased version of the style name")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"for example i can create a new object called heading"),(0,s.kt)("p",{parentName:"li"},"and add a property"),(0,s.kt)("p",{parentName:"li"},"font size 72 pixels"),(0,s.kt)("p",{parentName:"li"},"color blue"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const Inline = () => {\n  const heading = {\n    fontSize: '72px',\n    color: 'blue',\n  }\n\n  return <h1>Inline</h1>\n}\n")),(0,s.kt)("p",{parentName:"li"},"the key is the css property name but as you can notice it has to be camel cased"),(0,s.kt)("p",{parentName:"li"},"the value is specified as a string"),(0,s.kt)("p",{parentName:"li"},"if you want to specify additional css properties add a comma and then list the next property"),(0,s.kt)("p",{parentName:"li"},"now to apply this style we make use of the style attribute"),(0,s.kt)("p",{parentName:"li"},"to the style attribute we assign heading"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const Inline = () => {\n  const heading = {\n    fontSize: '72px',\n    color: 'blue',\n  }\n\n  return <h1 style={heading}>Inline</h1>\n}\n")),(0,s.kt)("p",{parentName:"li"},"if we include this component in app component\nmaking sure we import the component at the top"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"")),(0,s.kt)("p",{parentName:"li"},"and head back to the browser"),(0,s.kt)("p",{parentName:"li"},"you should see the text in line with the styling applied"),(0,s.kt)("p",{parentName:"li"},"so create an object and apply it to the style attribute"),(0,s.kt)("p",{parentName:"li"},"inline styling as you can see is pretty\nstraightforward"))),(0,s.kt)("h3",{id:"css-modules"},"css modules"),(0,s.kt)("p",null,"  finally let's talk about the third\napproach which is css modules"),(0,s.kt)("p",null,"  for css modules there is a file naming\nconvention with create react app"),(0,s.kt)("p",null,"  the file name must be suffixed with .module.css"),(0,s.kt)("p",null,"  for example let me create two style\nsheets in the source folder"),(0,s.kt)("p",null,"  if ",(0,s.kt)("inlineCode",{parentName:"p"},"appStyles.css")," is a regular style sheet ",(0,s.kt)("inlineCode",{parentName:"p"},"appStyles.module.css")," is a css module style sheet"),(0,s.kt)("p",null,"  in the regular style sheet i'm going to add a class error with color set to red"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".error {\n  color: red;\n}\n")),(0,s.kt)("p",null,"  in the module style sheet i'm going to add a class success\ncolor set to green"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".success {\n  color: green;\n}\n")),(0,s.kt)("p",null,"  in the app component i'm going to import both the files"),(0,s.kt)("p",null,"  import dot slash app styles dot css"),(0,s.kt)("p",null,"  and import styles from dot slash app styles dot module dot css"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import './appStyles.css'\nimport styles from './appStyles.module.css'\n")),(0,s.kt)("p",null,"  you can see there is a difference in how we import a module style sheet"),(0,s.kt)("p",null,"  now to use the error class from the regular style sheet i can add an h1 tag\nthat says error with the class name attribute set to\nerror"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"<h1 className='error'>Error</h1>\n")),(0,s.kt)("p",null,"  to use the class from the module style sheet\nwe still use the class name attribute but this is going to be equal to styles\ndot success"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"<h1 className='error'>Error</h1>\n<h1 className={Styles.success}>Success</h1>\n")),(0,s.kt)("p",null,"  so we access the class using the import statement variable name"),(0,s.kt)("p",null,"  if you now take a look at the browser\nyou should see both the classes being applied"),(0,s.kt)("h3",{id:"one-advantage-of-using-css-modules-is-that-the-classes-are-locally-scoped-by-default"},"one advantage of using css modules is that the classes are locally scoped by default"),(0,s.kt)("p",null,"  for example if i copy the error heading into the inline component"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const Inline = () => {\n  const heading = {\n    fontSize: '72px',\n    color: 'blue',\n  }\n\n  return <h1 className='error'>Error</h1>\n}\n")),(0,s.kt)("p",null,"  you can see that it still works so the css kind of applies to every\nchild component as well"),(0,s.kt)("p",null,"  this might lead to css conflicts"),(0,s.kt)("p",null,"  css modules on the other hand because you reference the class name\nusing the styles variable they cannot be used in the children component"),(0,s.kt)("p",null,"  if i copy the success heading and paste it in the inline component"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const Inline = () => {\n  const heading = {\n    fontSize: '72px',\n    color: 'blue',\n  }\n\n  return <h1 className={Styles.success}>Success</h1>\n}\n")),(0,s.kt)("p",null,"  you can see that the application does not compile it doesn't know what styles is"),(0,s.kt)("p",null,"  you can't accidentally use a class that is defined for some other component"),(0,s.kt)("p",null,"  but this is pretty much the basics of styling react components"))}m.isMDXComponent=!0}}]);