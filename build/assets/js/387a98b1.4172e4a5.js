"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[5546],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),m=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=m(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},y=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(t),y=a,u=d["".concat(l,".").concat(y)]||d[y]||c[y]||i;return t?o.createElement(u,r(r({ref:n},p),{},{components:t})):o.createElement(u,r({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,r[1]=s;for(var m=2;m<i;m++)r[m]=t[m];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}y.displayName="MDXCreateElement"},3568:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var o=t(7462),a=(t(7294),t(3905));const i={sidebar_position:49},r="Build a Pokemon Card 5",s={unversionedId:"6 React Native Expo CLI/Section 6: Exercise One/49 Build a Pokemon Card 5",id:"6 React Native Expo CLI/Section 6: Exercise One/49 Build a Pokemon Card 5",title:"Build a Pokemon Card 5",description:"=> Intro",source:"@site/docs/6 React Native Expo CLI/Section 6: Exercise One/49 Build a Pokemon Card 5.md",sourceDirName:"6 React Native Expo CLI/Section 6: Exercise One",slug:"/6 React Native Expo CLI/Section 6: Exercise One/49 Build a Pokemon Card 5",permalink:"/fundamentals/6 React Native Expo CLI/Section 6: Exercise One/49 Build a Pokemon Card 5",draft:!1,tags:[],version:"current",sidebarPosition:49,frontMatter:{sidebar_position:49},sidebar:"tutorialSidebar",previous:{title:"Build a Pokemon Card 4",permalink:"/fundamentals/6 React Native Expo CLI/Section 6: Exercise One/48 Build a Pokemon Card 4"},next:{title:"Build a Pokemon Card 6",permalink:"/fundamentals/6 React Native Expo CLI/Section 6: Exercise One/50 Build a Pokemon Card 6"}},l={},m=[{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"Step 16: Styling the Pok\xe9mon type Block",id:"step-16-styling-the-pok\xe9mon-type-block",level:3},{value:"Define the key value pairs for each of these styles",id:"define-the-key-value-pairs-for-each-of-these-styles",level:3},{value:"Step 17: Styling the Moves Block",id:"step-17-styling-the-moves-block",level:3},{value:"Step 18: Styling the Weakness Block",id:"step-18-styling-the-weakness-block",level:3},{value:"Conclusion:",id:"conclusion",level:3}],p={toc:m},d="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"build-a-pokemon-card-5"},"Build a Pokemon Card 5"),(0,a.kt)("blockquote",null),(0,a.kt)("h3",{id:"-intro"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Welcome to Part 5 of building a Pok\xe9mon card in React Native.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In Part 4, we concentrated on styling the first two blocks within our card component.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In this video, let's shift our attention to the remaining three blocks.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Once again, we will pick up where we left off."))),(0,a.kt)("h3",{id:"step-16-styling-the-pok\xe9mon-type-block"},"Step 16: Styling the Pok\xe9mon type Block"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Apply styles to the third block that displays the Pok\xe9mon ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We'll render the type in a badge along with an emoji representing the Pok\xe9mon type.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Include a function that returns badge styles based on the Pok\xe9mon type."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"this function ",(0,a.kt)("inlineCode",{parentName:"p"},"getTypeDetails")," returns a border color and an emoji based on the\nPokemon type")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Invoke this function to get ",(0,a.kt)("inlineCode",{parentName:"p"},"borderColor")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"emoji")," based on the type."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Apply styles to the type block:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Wrap the text element with a View representing the badge.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create another View to Display the corresponding emoji within the badge view by")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"duplicating the line and binding ",(0,a.kt)("inlineCode",{parentName:"p"},"{emoji}"),", which we have destructured from ",(0,a.kt)("inlineCode",{parentName:"p"},"getTypeDetails")," function"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View>\n        <View>\n          <Text>{emoji}</Text>\n          <Text>{type}</Text>\n        </View>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Apply styles to each element: ",(0,a.kt)("inlineCode",{parentName:"p"},"styles.typeContainer"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"styles.badge"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"styles.typeEmoji"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"styles.typeText"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"so for the outer container style is equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"styles.typeContainer"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"for the inner view component style is equal to an array ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),", where we apply ",(0,a.kt)("inlineCode",{parentName:"p"},"styles.badge"),", which we are going to Define, and we also said ",(0,a.kt)("inlineCode",{parentName:"p"},"borderColor`` to the Border color destructured from "),"getTypeDetails`")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"next on the Emoji text style is equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"styles.typeEmoji")))),(0,a.kt)("p",null,"-and then style is equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"styles.typeText")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View style={styles.typeContainer}>\n        <View style={[styles.badge, { borderColor }]}>\n          <Text style={styles.typeEmoji}>{emoji}</Text>\n          <Text style={styles.typeText}>{type}</Text>\n        </View>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n})\n")),(0,a.kt)("h3",{id:"define-the-key-value-pairs-for-each-of-these-styles"},"Define the key value pairs for each of these styles"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"typeContainer:"),(0,a.kt)("li",{parentName:"ul"},"badge:"),(0,a.kt)("li",{parentName:"ul"},"typeEmoji:"),(0,a.kt)("li",{parentName:"ul"},"typeText:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View style={styles.typeContainer}>\n        <View style={[styles.badge, { borderColor }]}>\n          <Text style={styles.typeEmoji}>{emoji}</Text>\n          <Text style={styles.typeText}>{type}</Text>\n        </View>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '#333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n  typeContainer: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  badge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n    borderRadius: 20,\n    borderWidth: 4,\n  },\n  typeEmoji: {\n    fontSize: 30,\n    marginRight: 12,\n  },\n  typeText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n})\n")),(0,a.kt)("h3",{id:"step-17-styling-the-moves-block"},"Step 17: Styling the Moves Block"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Display the list of moves in the JSX.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Apply styles to the moves jsx block: ",(0,a.kt)("inlineCode",{parentName:"p"},"Styles.movesContainer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Styles.movesText"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"And let's define the key value pairs for the styles"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View style={styles.typeContainer}>\n        <View style={[styles.badge, { borderColor }]}>\n          <Text style={styles.typeEmoji}>{emoji}</Text>\n          <Text style={styles.typeText}>{type}</Text>\n        </View>\n      </View>\n\n      <View style={styles.movesContainer}>\n        <Text style={styles.movesText}>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '#333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n  typeContainer: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  badge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n    borderRadius: 20,\n    borderWidth: 4,\n  },\n  typeEmoji: {\n    fontSize: 30,\n    marginRight: 12,\n  },\n  typeText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n  movesContainer: {\n    marginBottom: 16,\n  },\n  movesText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n})\n")),(0,a.kt)("h3",{id:"step-18-styling-the-weakness-block"},"Step 18: Styling the Weakness Block"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Style the weakness block similar to the moves block.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Apply styles to the weakness block: ",(0,a.kt)("inlineCode",{parentName:"p"},"Styles.weaknessContainer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"styles.weaknessText"),"."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View style={styles.typeContainer}>\n        <View style={[styles.badge, { borderColor }]}>\n          <Text style={styles.typeEmoji}>{emoji}</Text>\n          <Text style={styles.typeText}>{type}</Text>\n        </View>\n      </View>\n\n      <View style={styles.movesContainer}>\n        <Text style={styles.movesText}>Moves: {moves.join(', ')}</Text>\n      </View>\n\n      <View style={styles.weaknessContainer}>\n        <Text style={styles.weaknessText}>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '#333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n  typeContainer: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  badge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n    borderRadius: 20,\n    borderWidth: 4,\n  },\n  typeEmoji: {\n    fontSize: 30,\n    marginRight: 12,\n  },\n  typeText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n  movesContainer: {\n    marginBottom: 16,\n  },\n  movesText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n  weaknessContainer: {\n    marginBottom: 8,\n  },\n  weaknessText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n})\n")),(0,a.kt)("h3",{id:"conclusion"},"Conclusion:"),(0,a.kt)("p",null,"With this, we have successfully completed styling our Pok\xe9mon card component. In the sixth and final part, we will add multiple Pok\xe9mon cards to our view."))}c.isMDXComponent=!0}}]);