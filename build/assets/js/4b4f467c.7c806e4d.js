"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[2152],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||r;return n?o.createElement(m,l(l({ref:t},p),{},{components:n})):o.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8114:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:1},l="If Statements",i={unversionedId:"3 Javascript/logic-control-scope-docs/if-statements",id:"3 Javascript/logic-control-scope-docs/if-statements",title:"If Statements",description:"In any programming language, there will be times where you need to execute certain blocks of code and commands if a certain condition is true or false. Without the ability to have this type of conditional logic, programming wouldn't really be possible.",source:"@site/docs/3 Javascript/04-logic-control-scope-docs/01-if-statements.md",sourceDirName:"3 Javascript/04-logic-control-scope-docs",slug:"/3 Javascript/logic-control-scope-docs/if-statements",permalink:"/fundamentals/3 Javascript/logic-control-scope-docs/if-statements",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Section 4: Logic & Control Flow",permalink:"/fundamentals/category/section-4-logic--control-flow"},next:{title:"Else-if and Nesting",permalink:"/fundamentals/3 Javascript/logic-control-scope-docs/else-if-and-nesting"}},s={},c=[{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"if-else Statements",id:"if-else-statements",level:3},{value:"Block Scope",id:"block-scope",level:3},{value:"Shorthand If",id:"shorthand-if",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"if-statements"},"If Statements"),(0,a.kt)("p",null,"In any programming language, there will be times where you need to execute certain blocks of code and commands if a certain condition is true or false. Without the ability to have this type of conditional logic, programming wouldn't really be possible."),(0,a.kt)("p",null,"The structure of an ",(0,a.kt)("inlineCode",{parentName:"p"},"if-statement")," is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (condition) {\n  // code to execute if condition is true\n}\n")),(0,a.kt)("p",null,"The code block will only execute if the condition is true. If the condition is false, the code block will not execute."),(0,a.kt)("p",null,"The condition is a boolean expression that evaluates to true or false. In fact, we could put in true or false directly"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (true) {\n  // code to execute if condition is true\n}\n\nif (false) {\n  // code to execute if condition is false\n}\n")),(0,a.kt)("p",null,"There are something called truthy and falsy values in JavaScript. I will get more into this in a bit."),(0,a.kt)("h3",{id:"comparison-operators"},"Comparison Operators"),(0,a.kt)("p",null,"A few sections back, we looked at the comparison operators. These operators are used to compare values and return a boolean value."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"comparison-operators",src:n(7029).Z,width:"1228",height:"860"})),(0,a.kt)("p",null,"We could use these operators to compare values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const x = 10\n\nif (x > 5) {\n  console.log(`${x} is greater than 5`)\n}\n\nif (x === 10) {\n  console.log(`${x} is equal to 10`)\n}\n")),(0,a.kt)("h3",{id:"if-else-statements"},"if-else Statements"),(0,a.kt)("p",null,"Instead of doing nothing if the condition is false, we can execute different code blocks depending on the condition."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const x = 10\n\nif (x > 5) {\n  console.log(`${x} is greater than 5`)\n} else {\n  console.log(`${x} is less than or equal to 5`)\n}\n")),(0,a.kt)("h3",{id:"block-scope"},"Block Scope"),(0,a.kt)("p",null,"We talked about this earlier, but remember that variables defined with ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"const")," inside of a block are not accessible outside of that block. ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," variables are, but I would not suggest using them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const x = 10\n\nif (x > 5) {\n  const y = 20\n  console.log(`${x} is greater than 5`)\n  console.log(`${y} is greater than 5`)\n}\n\nconsole.log(y) // ReferenceError: y is not defined\n")),(0,a.kt)("h3",{id:"shorthand-if"},"Shorthand If"),(0,a.kt)("p",null,"If the code within your if and else is a single statement and not a block of code, you omit the parentheses. It is usually not recommended and you don't see it that often, but you can do it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (x > 5) console.log(`${x} is greater than 5`)\n\nif (x > 5) console.log(`${x} is greater than 5`)\nelse console.log(`${x} is less than 5`)\n")),(0,a.kt)("p",null,"You actually can have multiple statements, but they need to be separated with a comma."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (x > 5)\n  console.log(`${x} is greater than 5`), console.log('another line'), console.log(`and another`)\n")),(0,a.kt)("p",null,"I would not personally do this."))}d.isMDXComponent=!0},7029:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/comparison-operators-58cf7f67a200ab708c351ab4064a1f6c.png"}}]);