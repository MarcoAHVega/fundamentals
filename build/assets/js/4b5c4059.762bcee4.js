"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[2373],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(a),m=i,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return a?n.createElement(h,r(r({ref:t},c),{},{components:a})):n.createElement(h,r({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8020:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const l={sidebar_position:7},r='- Introducing Variables ("Data Containers")',o={unversionedId:"8 Max JS/Section 11: Understanding the JavaScript Basics/Introducing Variables -Data Containers",id:"8 Max JS/Section 11: Understanding the JavaScript Basics/Introducing Variables -Data Containers",title:'- Introducing Variables ("Data Containers")',description:"- Variables are labeled data containers that allow us to save values for use later in a different line of code or possibly multiple times.",source:"@site/docs/8 Max JS/Section 11: Understanding the JavaScript Basics/223. Introducing Variables -Data Containers.md",sourceDirName:"8 Max JS/Section 11: Understanding the JavaScript Basics",slug:"/8 Max JS/Section 11: Understanding the JavaScript Basics/Introducing Variables -Data Containers",permalink:"/fundamentals/8 Max JS/Section 11: Understanding the JavaScript Basics/Introducing Variables -Data Containers",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"- Working with Values & Basic JavaScript Commands",permalink:"/fundamentals/8 Max JS/Section 11: Understanding the JavaScript Basics/Working with Values & Basic JavaScript Commands"},next:{title:"- A Closer Look At The JavaScript Syntax",permalink:"/fundamentals/8 Max JS/Section 11: Understanding the JavaScript Basics/A Closer Look At The JavaScript Syntax"}},s={},p=[{value:"Understanding the Use of Variables",id:"understanding-the-use-of-variables",level:3},{value:"The Role of Variables",id:"the-role-of-variables",level:3},{value:"Creating a Variable",id:"creating-a-variable",level:3},{value:"Naming a Variable",id:"naming-a-variable",level:3},{value:"Assigning a Value to a Variable",id:"assigning-a-value-to-a-variable",level:3},{value:"Using a Variable",id:"using-a-variable",level:3},{value:"Understanding the Execution of JavaScript Code",id:"understanding-the-execution-of-javascript-code",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"--introducing-variables-data-containers"},'- Introducing Variables ("Data Containers")'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Variables are labeled data containers that allow us to save values for use later in a different line of code or possibly multiple times.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can demonstrate the use of variables by wanting to output the same alert with the same text again."))),(0,i.kt)("h3",{id:"understanding-the-use-of-variables"},"Understanding the Use of Variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We can copy and paste the code line as shown below:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>JavaScript Introduction</title>\n    <script>\n      alert("Hi, I\'m Max!")\n      alert("Hi, I\'m Max!")\n      alert(32)\n    <\/script>\n  </head>\n  <body></body>\n</html>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'If we do that and reload this page, we get "Hi, I\'m Max!" twice and then the alert with the number 32.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This approach has a major downside: we are copy and pasting this text. If we want to output something else, we have to update it in two places."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>JavaScript Introduction</title>\n    <script>\n      alert("Hi, I\'m Max!!!!")\n      alert("Hi, I\'m Max!!!!")\n      alert(32)\n    <\/script>\n  </head>\n  <body></body>\n</html>\n')),(0,i.kt)("h3",{id:"the-role-of-variables"},"The Role of Variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A variable could help us. What if we could save this text in a variable and then just reuse that variable for both alerts?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If we want to change that value, we just have to do it in one place, in that variable, instead of in multiple places.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can now add a new feature, a new line of code to our script here. We can add a variable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We do this with a special keyword in JavaScript. JavaScript is all about special keywords that give certain instructions to the browser."))),(0,i.kt)("h3",{id:"creating-a-variable"},"Creating a Variable"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We create a variable with the ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," keyword.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Unlike alert, let is not used with brackets, but instead you type let, and then a blank, and then you choose the label, the name of your variable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Every variable needs a name. Here this name is up to you, and we could use ",(0,i.kt)("inlineCode",{parentName:"p"},"greetingText")," as a variable name here."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>JavaScript Introduction</title>\n    <script>\n      let greetingText\n      alert("Hi, I\'m Max!!!!")\n      alert("Hi, I\'m Max!!!!")\n      alert(32)\n    <\/script>\n  </head>\n  <body></body>\n</html>\n')),(0,i.kt)("h3",{id:"naming-a-variable"},"Naming a Variable"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The name of a variable is up to you, but ",(0,i.kt)("inlineCode",{parentName:"p"},"it has to follow certain rules."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Most importantly, it has to be ",(0,i.kt)("inlineCode",{parentName:"p"},"one word"),", which basically does not use any special characters.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"There are some allowed characters like a dollar sign, but most characters are not allowed, especially dashes or forward slashes or colons and so on.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The convention for naming variables in JavaScript is actually to use this notation where your word starts with a lowercase character.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If it includes other words, where you normally would have a blank or anything like this, which is not allowed, those sub-words start with an uppercase character.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This notation is called ",(0,i.kt)("inlineCode",{parentName:"p"},"camel case"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The actual content of that name is up to you. ",(0,i.kt)("inlineCode",{parentName:"p"},"It should describe the kind of value you will be storing.")))),(0,i.kt)("h3",{id:"assigning-a-value-to-a-variable"},"Assigning a Value to a Variable"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Creating a variable and giving it a name is not enough. We also need to assign a value.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can do this in the same line with an equal sign."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>JavaScript Introduction</title>\n    <script>\n      let greetingText = "Hi, I\'m Max!!!!"\n      alert("Hi, I\'m Max!!!!")\n      alert("Hi, I\'m Max!!!!")\n      alert(32)\n    <\/script>\n  </head>\n  <body></body>\n</html>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Alternatively, we can also do it in a new line by repeating that variable name now without the let though.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>JavaScript Introduction</title>\n    <script>\n      let greetingText\n      greetingText = "Hi, I\'m Max!!!!"\n      alert("Hi, I\'m Max!!!!")\n      alert("Hi, I\'m Max!!!!")\n      alert(32)\n    <\/script>\n  </head>\n  <body></body>\n</html>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Once you introduce a variable, you can always assign a value in any other line of code by repeating that variable name and adding an equal sign.")),(0,i.kt)("h3",{id:"using-a-variable"},"Using a Variable"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Once this variable is created, we can use it in other parts of our code.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, we can use it here for these two alerts."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>JavaScript Introduction</title>\n    <script>\n      let greetingText = "Hi, I\'m Max!!!!"\n      alert(greetingText)\n      alert(greetingText)\n      alert(32)\n    <\/script>\n  </head>\n  <body></body>\n</html>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can also assign a new value if we want to, because it's called variable, because it's flexible.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'We can overwrite the value stored in there. We could say "Hi, I am really Max!"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>JavaScript Introduction</title>\n    <script>\n      let greetingText = "Hi, I\'m Max!!!!"\n      alert(greetingText)\n      alert(greetingText)\n      greetingText = \'Hi, I am really Max!\'\n      alert(32)\n    <\/script>\n  </head>\n  <body></body>\n</html>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Now we're overwriting the value stored in greetingText with a brand new value.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Without the let keyword here, because we're not creating a new variable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Instead, we're assigning a new value to an existing variable."))),(0,i.kt)("h3",{id:"understanding-the-execution-of-javascript-code"},"Understanding the Execution of JavaScript Code"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All JavaScript code is executed top to bottom, left to right.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It's executed line after line, step by step.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If you alert a variable with a value, and then you change that value in a line thereafter, the first alert still uses the initial value.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"However, in subsequent alerts, after we change the value stored in the variable, we will output that new value."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>JavaScript Introduction</title>\n    <script>\n      let greetingText = "Hi, I\'m Max!!!!"\n      alert(greetingText)\n      alert(greetingText)\n      greetingText = \'Hi, I am really Max!\'\n      alert(greetingText)\n      alert(32)\n    <\/script>\n  </head>\n  <body></body>\n</html>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This is because it's executed top to bottom so that change in the variable value will have an impact on that alert, which we execute thereafter, not on the alerts before.")))}d.isMDXComponent=!0}}]);