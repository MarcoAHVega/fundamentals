"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[3119],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,b=c["".concat(i,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(b,o(o({ref:t},p),{},{components:n})):a.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2377:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:11},o="Working with Numbers",s={unversionedId:"3 Javascript/variables-data-types-docs/numbers",id:"3 Javascript/variables-data-types-docs/numbers",title:"Working with Numbers",description:"So we looked at strings and the properties and methods that are available to us. Now let's look at numbers. We'll also look at the Math object.",source:"@site/docs/3 Javascript/01-variables-data-types-docs/11-numbers.md",sourceDirName:"3 Javascript/01-variables-data-types-docs",slug:"/3 Javascript/variables-data-types-docs/numbers",permalink:"/fundamentals/3 Javascript/variables-data-types-docs/numbers",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Capitalize Challenge",permalink:"/fundamentals/3 Javascript/variables-data-types-docs/capitalize-challenge"},next:{title:"Math Object",permalink:"/fundamentals/3 Javascript/variables-data-types-docs/math-object"}},i={},u=[{value:"toString()",id:"tostring",level:3},{value:"toFixed()",id:"tofixed",level:3},{value:"toPrecision()",id:"toprecision",level:3},{value:"toExponential()",id:"toexponential",level:3},{value:"toLocalString()",id:"tolocalstring",level:3},{value:"Number Object Properties &amp; Values",id:"number-object-properties--values",level:3},{value:"Max Value",id:"max-value",level:3},{value:"Min Value",id:"min-value",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...l}=e;return(0,r.kt)(c,(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"working-with-numbers"},"Working with Numbers"),(0,r.kt)("p",null,"So we looked at strings and the properties and methods that are available to us. Now let's look at numbers. We'll also look at the ",(0,r.kt)("inlineCode",{parentName:"p"},"Math")," object."),(0,r.kt)("p",null,"Like with strings, when we add a method to a number, a new number object is created and we can use that object to call the method. Let's create the object ourselves to see the available methods in the prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const num = new Number(5)\nconsole.log(num)\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"number-object",src:n(8664).Z,width:"590",height:"297"})),(0,r.kt)("h3",{id:"tostring"},"toString()"),(0,r.kt)("p",null,"Returns a string representation of the number"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'num.toString() // "5"\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Number")," types and objects do not have a ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," property. If you want to find the length, one thing that you could do is convert it to a string and then use ",(0,r.kt)("inlineCode",{parentName:"p"},"length")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"num.toString().length // 1\n")),(0,r.kt)("h3",{id:"tofixed"},"toFixed()"),(0,r.kt)("p",null,"Returns a string representation of the number with a specified number of decimals"),(0,r.kt)("p",null,"Let's assume num is equal to 5 right now"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"num.toFixed(2) // 5.00\nnum.toFixed(1) // 5.0\n")),(0,r.kt)("h3",{id:"toprecision"},"toPrecision()"),(0,r.kt)("p",null,"returns a number with the specified length"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const num2 = 94.4058\nnum.toPrecision(3) // 94.4\n")),(0,r.kt)("h3",{id:"toexponential"},"toExponential()"),(0,r.kt)("p",null,"Returns a string representation of the number in exponential notation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'num.toExponential(2) // "5.00e+0"\n')),(0,r.kt)("h3",{id:"tolocalstring"},"toLocalString()"),(0,r.kt)("p",null,"Returns a string representation of the number in the current locale"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let num = 5000000\nnum.toLocalString() // "5,000,000"\n')),(0,r.kt)("p",null,"It defaults to the browser's locale, which for me is \"en-US\", but let's say we want to use India's locale"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"num.toLocalString('en-IN') // \"50,00,000\"\n")),(0,r.kt)("h3",{id:"number-object-properties--values"},"Number Object Properties & Values"),(0,r.kt)("p",null,"The Number object has a few properties and methods that are available."),(0,r.kt)("h3",{id:"max-value"},"Max Value"),(0,r.kt)("p",null,"Largest possible value of a number"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"Number.MAX_VALUE // 1.7976931348623157e+308\n")),(0,r.kt)("h3",{id:"min-value"},"Min Value"),(0,r.kt)("p",null,"Smallest possible value of a number"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"Number.MIN_VALUE // 5e-324\n")),(0,r.kt)("p",null,"There are methods as well. For instance, we already looked at ",(0,r.kt)("inlineCode",{parentName:"p"},"isNaN()"),", which will tell us if the value is actually NaN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"Number.isNaN(NaN) // true\n")))}m.isMDXComponent=!0},8664:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/number-object-71cc5521cd895a98ebe4116e1882b072.png"}}]);