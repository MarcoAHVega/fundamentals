"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[6976],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=o.createContext({}),s=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(d.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=s(n),u=a,h=c["".concat(d,".").concat(u)]||c[u]||m[u]||l;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r[c]="string"==typeof e?e:a,i[1]=r;for(var s=2;s<l;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const l={sidebar_position:8},i="Modal Components",r={unversionedId:"10 React Design Patterns/8 Modal components",id:"10 React Design Patterns/8 Modal components",title:"Modal Components",description:"The last layout component we're going to examine is modals. Modals are a common feature in web applications. Let's learn how to create them as a layout design pattern.",source:"@site/docs/10 React Design Patterns/8 Modal components.md",sourceDirName:"10 React Design Patterns",slug:"/10 React Design Patterns/8 Modal components",permalink:"/fundamentals/10 React Design Patterns/8 Modal components",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Creating Small Product List Item Component",permalink:"/fundamentals/10 React Design Patterns/Create different list types"},next:{title:"Container Components",permalink:"/fundamentals/10 React Design Patterns/9 Container Components"}},d={},s=[{value:"Creating a New File",id:"creating-a-new-file",level:3},{value:"Implementing the Component",id:"implementing-the-component",level:3},{value:"Creating State Variable",id:"creating-state-variable",level:3},{value:"Creating Styled Components",id:"creating-styled-components",level:3},{value:"JSX Structure",id:"jsx-structure",level:3},{value:"Conditional Rendering",id:"conditional-rendering",level:3},{value:"Button to Show Modal",id:"button-to-show-modal",level:3},{value:"Button to Hide Modal",id:"button-to-hide-modal",level:3},{value:"Stopping Event Propagation",id:"stopping-event-propagation",level:3},{value:"Adding Styles",id:"adding-styles",level:3},{value:"Using the Modal Component",id:"using-the-modal-component",level:3}],p={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"modal-components"},"Modal Components"),(0,a.kt)("p",null,"The last layout component we're going to examine is modals. Modals are a common feature in web applications. Let's learn how to create them as a layout design pattern."),(0,a.kt)("h3",{id:"creating-a-new-file"},"Creating a New File"),(0,a.kt)("p",null,"First, we'll create a new file called ",(0,a.kt)("inlineCode",{parentName:"p"},"modal.js")," . This file will contain all the code for our modal."),(0,a.kt)("h3",{id:"implementing-the-component"},"Implementing the Component"),(0,a.kt)("p",null,"Before we proceed, it's important to note that most people install ",(0,a.kt)("inlineCode",{parentName:"p"},"react-modal")," or a similar package when they add modals to a React application. However, this isn't necessary. We can easily implement our own modal.\nWe'll import ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," from React and ",(0,a.kt)("inlineCode",{parentName:"p"},"styled")," from styled-components to add the actual modal styling."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from 'react';\nimport styled from 'styled-components';\nThen, our basic modal component will look like this:\njsx\nexport const Modal = ({ children }) => {...}\n")),(0,a.kt)("p",null,"This is similar to our split screen component. We won't pass in the modal contents as a prop; instead, we'll just display them."),(0,a.kt)("h3",{id:"creating-state-variable"},"Creating State Variable"),(0,a.kt)("p",null,"In the component body, we'll have a state variable called ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldShow")," and set it to ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," initially. This means the modal will be hidden at first."),(0,a.kt)("h3",{id:"creating-styled-components"},"Creating Styled Components"),(0,a.kt)("p",null,"We'll create two different styled components for the modal structure: ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalBackground")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalBody")," ."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const ModalBackground = styled.div`...`\nconst ModalBody = styled.div`...`\n")),(0,a.kt)("h3",{id:"jsx-structure"},"JSX Structure"),(0,a.kt)("p",null,"The JSX will have the ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalBackground")," , inside which will be the ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalBody")," . Inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalBody")," , we'll display the actual children passed to this modal component."),(0,a.kt)("h3",{id:"conditional-rendering"},"Conditional Rendering"),(0,a.kt)("p",null,"We only want the modal background and modal body to show when ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldShow")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," . We'll use short circuit evaluation for this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"{\n  shouldShow && (\n    <ModalBackground>\n      <ModalBody>{children}</ModalBody>\n    </ModalBackground>\n  )\n}\n")),(0,a.kt)("h3",{id:"button-to-show-modal"},"Button to Show Modal"),(0,a.kt)("p",null,"We'll add a button to display the modal. This button's ",(0,a.kt)("inlineCode",{parentName:"p"},"onClick")," property sets the ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldShow")," state to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," ."),(0,a.kt)("h3",{id:"button-to-hide-modal"},"Button to Hide Modal"),(0,a.kt)("p",null,"We'll add an ",(0,a.kt)("inlineCode",{parentName:"p"},"onClick")," property to the modal background that sets ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldShow")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," when a user clicks on it. Inside the modal body, we'll add another button that allows the user to hide the modal. This button will also set ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldShow")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," ."),(0,a.kt)("h3",{id:"stopping-event-propagation"},"Stopping Event Propagation"),(0,a.kt)("p",null,"Lastly, for our ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalBody")," , we need to add an ",(0,a.kt)("inlineCode",{parentName:"p"},"onClick")," event that calls ",(0,a.kt)("inlineCode",{parentName:"p"},"event.stopPropagation()")," . This ensures that when a user clicks on one of the children inside our component, the click event doesn't bubble up and close the modal."),(0,a.kt)("h3",{id:"adding-styles"},"Adding Styles"),(0,a.kt)("p",null,"Next, we'll add some styles to our modal. The modal background will be a semi-transparent dark gray that covers the rest of the page. The modal body will have a white background, take up 50% of the screen, and have a little bit of margin and padding."),(0,a.kt)("h3",{id:"using-the-modal-component"},"Using the Modal Component"),(0,a.kt)("p",null,"To demonstrate what this will look like, we'll open up our ",(0,a.kt)("inlineCode",{parentName:"p"},"app.js")," and display our ",(0,a.kt)("inlineCode",{parentName:"p"},"Modal")," . Inside the modal, we'll display a ",(0,a.kt)("inlineCode",{parentName:"p"},"LargeProductListItem")," ."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"<Modal>\n  <LargeProductListItem product={products[0]} />\n</Modal>\n")),(0,a.kt)("p",null,'When we run our app and click on "Show Modal", we\'ll see the details of the product inside our modal. We can click either on the background or on the "Hide Modal" button to hide the modal.\nIf we were going to use this ',(0,a.kt)("inlineCode",{parentName:"p"},"LargeProductListItem")," for other things besides list items, we might want to rename it to something like ",(0,a.kt)("inlineCode",{parentName:"p"},"LargeProductDetails")," . This would allow us to display it now either in a list or in a modal, which is the strength of layout components."))}m.isMDXComponent=!0}}]);