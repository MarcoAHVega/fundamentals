"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[3118],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var h=i.createContext({}),l=function(e){var t=i.useContext(h),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(h.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,h=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),f=l(n),p=o,u=f["".concat(h,".").concat(p)]||f[p]||d[p]||a;return n?i.createElement(u,s(s({ref:t},c),{},{components:n})):i.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var r={};for(var h in t)hasOwnProperty.call(t,h)&&(r[h]=t[h]);r.originalType=e,r[f]="string"==typeof e?e:o,s[1]=r;for(var l=2;l<a;l++)s[l]=n[l];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1595:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2},s="CSS Flexbox",r={unversionedId:"2 CSS/2 Flexbox",id:"2 CSS/2 Flexbox",title:"CSS Flexbox",description:"Introduction",source:"@site/docs/2 CSS/2 Flexbox.md",sourceDirName:"2 CSS",slug:"/2 CSS/2 Flexbox",permalink:"/fundamentals/2 CSS/2 Flexbox",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"CSS",permalink:"/fundamentals/2 CSS/1 CSS"},next:{title:"CSS Grid",permalink:"/fundamentals/2 CSS/3 Grid"}},h={},l=[],c={toc:l},f="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"css-flexbox"},"CSS Flexbox"),(0,o.kt)("p",null,"Introduction"),(0,o.kt)("p",null,"hey everyone my name is vishwas and welcome to this crash course on css\nflexbox for complete beginners in this crash course we will understand\nthe various concepts in flexbox"),(0,o.kt)("p",null,"Before we begin"),(0,o.kt)("p",null,"before we begin let me go over a few\npoints first i would like to mention this course is for complete beginners\nif you're someone who is new to flexbox or have an idea about flexbox and want\nto understand better please continue if you are an expert\nthis is your cue to probably hop into another video where your time can be better utilized\nsecond this video is a continuation of the css\ncrash course make sure you are familiar with both html and css before proceeding\nin this video we are going to learn the important concepts in flexbox\nif you are also interested in css grid we will be learning that in a separate\nvideo but if you have the question should you be learning flexbox or grid\nmy advice would be to learn both flexbox is great for one directional\nflow and can actually work alongside grid for more complex layouts\nit's not rare to see code bases which use both now please do make sure you could along\nwith me as that is the best way to learn by the end of this video you will have a\nsolid understanding of creating layouts with css flexbox"),(0,o.kt)("p",null,"What is Flexbox?"),(0,o.kt)("p",null,"all right with these points in mind let's get started what is flexbox\nthe css flexible box module or simply known as flexbox is a one-dimensional\nlayout model it allows you to design flexible and efficient layouts\nalign and distribute space among items in a container to put it in non-technical terms\nflexbox helps you arrange elements in a web page with ease\nnow why was this introduced well before flexbox there were four\nlayout modes and we had a look at all of them in the css crash course\nblock for sections in a web page inline for text\ntable for two-dimensional table data and positioned for explicit position of\nan element these layouts however did not provide enough flexibility\nwe had to find all kinds of hacks to get the layout just the way we wanted\nworking with floats trying to vertically align content create equal height columns\nwell they were kind of a nightmare the flex layout on the other hand provides a lot of flexibility\nwith flexbox we can arrange items left to right right to left top to bottom or\nbottom to top and at the same time control the spacing alignment\nand order of items in the container and to be honest it has sort of become a\nmust-know for front-end developers in 2022. if you're comfortable with html and css\nflexbox is the logical next step for you"),(0,o.kt)("p",null,"Terminology"),(0,o.kt)("p",null,"all right now that we understand the\nwhat and why of flexbox let's dive into understanding the different concepts\nwe first need to start off by understanding the terminology in flexbox\ntrust me when i say this the next few minutes you spend understanding what each term means\nwill decide how easy it is to understand the flexbox properties\nunderstanding the terminology is essential to this course so please make\nsure you pay attention when we talk about flexbox we mainly\nhave two entities a parent container which we term as the\nflex container and the immediate children elements which we term as flex items\nif you take a look at some sample html the parent div is the flex container\nand all the children divs are the flex items\nnow we also deal with two axes when working with flexbox\nthe main axis and the cross axis by default the main axis runs left to\nright and the cross axis is perpendicular to the main axis and runs top to bottom\nthe start point of the main axis is termed as main start and the end point\nis termed as main end the length from main start to main end\nis called the main size so we can say that the flex items flow\nfrom main start till main end and take up the main size as the length\nsimilarly with cross access we have cross start cross end and cross size\nwe can also change the direction of the main and cross axis by changing how the\nitems are laid out in the container we will talk more about that later in\nthe course understanding flexbox is basically getting familiar with the properties\nassociated with the flex container and the flex items nothing fancy you just learn it like how\nyou learned css know what properties exist and how they work"),(0,o.kt)("p",null,"Flex container properties"),(0,o.kt)("p",null,"with the terminology now familiar let's begin by focusing first on the\nproperties that are associated with just the flex container\nthere are 10 in total first we have the display property this\nis what defines a flex container and is mandatory to work with flexbox\nnext is flex direction it defines the direction in which the flex items are placed within the\ncontainer third we have flex wrap which is used to control the wrapping of items within the\ncontainer we then have flex flow which is a shorthand for the combination of flex\ndirection and flex wrap we then have column and row gap\nproperties to set the gap between columns and rows and just gap which is a shorthand for\nboth that is justify content that defines the alignment of the items along the main\naxis and similarly align items which defines how flex items\nare laid out along the cross access finally we have the align content\nproperty this is similar to justify content with the difference being this will align\nalong the cross access and not mean access also this works only when there are\nmultiple rows of flex items in the container"),(0,o.kt)("p",null,"Setup"),(0,o.kt)("p",null,"to get us started with flexbox i have\nset up some very simple html and css that i am now going to walk you\nthrough i have created a folder called flexbox crash course and within the\nfolder i've created an index.html file and a\nstyles.css file the html is pretty standard\nthe head tag contains what you would normally find and a link to the css file\nwithin the body we have a parent div tag with a class called container\nthis parent container has nine div tags as children\neach div has a class flex item and also a class specific to the item\nnumber item 1 item 2 till item 9.\nin the css file i've set margin to 0 on the body element\nand on the container class i've added a thick black border\non the flex item class i've added a font color white a font size of 1.5 ram\npadding of one rem and have also center aligned the text\nfor items 1 through 9 i've set a different background color so as to\nvisually separate each item in the browser the html and css code can be found on my\ngithub page in the crash course 2022 repo i'll make sure to include a link in the\ndescription once you clone the repo or download the code\nif you open the html file in the browser you should be able to see this layout\nyou can see we have nine items enclosed within the container that has a solid\nblack border"),(0,o.kt)("p",null,"display"),(0,o.kt)("p",null,"now we can focus on our very first\nproperty which is the display property to create a flex container we make use\nof the display property and set it to a value of flex\nin the css file on the container class add the property display\nand set it to flex now when i refresh the browser\nyou can immediately see the change as with all properties in css some\ninitial values are defined so when creating a flex container all of the contained flex items behave\nin a certain way first they will display in a row\nsecond items start from the beginning of the main access that is the leftmost\npoint but do not stretch till the end however they can shrink to a certain\nextent third items will stretch to fill the size of the cross axis that is from the\ntop to the bottom also you can notice from the border that\nthe container itself has 100 percent width so it does behave similar to a\nblock level element now if you do not want a block level flex container you can set the display\nproperty to inline flags and create an inline flex container\nso back in the css file display is inline flex\nif i now refresh you can see the border now wraps around\nthe flex items the container only takes up width to accommodate its children\nso the display property is used to create either a block level or inline level flex container\nthe possible values are flex and inline flex"),(0,o.kt)("p",null,"flex-direction"),(0,o.kt)("p",null,"the next property we are going to learn is flex direction the flex direction establishes the main\naxis which in turn decides how the flex items are placed within the flex container\nby default the main axis flows from left to right which is the reason we see the\nitems placed from left to right in the browser by changing the value of the flex\ndirection property we can change how the items are placed\nlet's revert display to flex and now define the flex direction\nproperty this property can accept one of four different values\nthe first value is row which is the default value so if we set flex direction to row\nand refresh you can see it doesn't make a difference\nthe items still flow from left to right flex direction of row sets the main axis\nfrom left to right and hence no change\nthe next alert value is row reverse and you might have guessed it\nrow reverse sets the main axis direction from right to left which results in the flex items being\nplaced from right to left if i refresh\nyou can see the items are now placed in the reverse order item 1 starts at the end of the\ncontainer the third alert value is column\nwhen you set flex direction to column the main axis flows from top to bottom\nthe items will be stacked on top of each other refresh the browser\nand you can see the items flow from top to bottom item 1 at the top and item 9 at the\nbottom finally we have column reverse\nwhich stacks items in the reverse order if i\nrefresh you can see that item nine is at the top and item one is at the bottom\nso the flex direction property sets the direction of the main access thereby controlling how the items are placed in\nthe container possible values are row which sets main axes from left to right\nrow reverse for right to left column for top to bottom and column\nreverse for bottom to top"),(0,o.kt)("p",null,"flex-wrap"),(0,o.kt)("p",null,"let's now move on to the third flex\ncontainer property which is flex wrap as i mentioned a few minutes ago\nthe items in a flex container can shrink to a certain extent to fit in a single\nline if there is not enough space though the items simply overflow\nlet me show that to you in the css file i'm going to comment out\nflex direction and refresh the browser\nif i now start to reduce the browser width\nyou can see that the items begin to shrink but after a certain extent they are no\nlonger in view you can change this behavior using the flex wrap property\nin the css file on the container class i'm going to add a new property which is\nflex wrap keep in mind i haven't removed the display flex property on the container\nand never will throughout this course now flex wrap can accept one of three\npossible values the first one is no wrap and this is the\ndefault value when i refresh\nyou can see there is no change if we want the items to wrap within the\ncontainer then we set a value of wrap so flex wrap\nset to wrap now when i refresh the browser\nyou can see that when i reduce the browser width the items have been wrapped in the\ncontainer and the wrapping takes place only when needed\nif i expand the browser width there is no wrapping if there is not enough space for just\none item which is item nine you can see only item nine moves into\nthe next row reduce the size further item eight moves into the next row and\nso on the final possible value is wrap reverse\nand what wrap reverse does is instead of items falling into the row below\nit climbs into the row above let me show that in the browser\nrefresh and you can see we have nine items when i reduce the browser width\nyou can see that item nine instead of moving to the row below moves to the row\nabove now do not get confused that wrap reverse starts wrapping in the reverse\norder of items item one will not move into the second row if the space is inadequate\nwrapping always occurs from the last item rap reverse just pushes the last item\nabove instead of below what you should know is that vertical\nwrapping of items is also possible and for that we need to change flex\ndirection to column and add a height to the flex container\nso let's uncomment flex direction set it to column and we're going to add a height\nof 400 pixels let's also set flex wrap to just wrap\nif we refresh you can see that a column is created to the right and the items\nare placed in that column so 789 which could not be accommodated\nwith a height of 400 pixels are shifted to the second column\nif i change flexwrap to wrap reverse refresh\nthe items are placed in a new column to the left\nso the flexwrap property is used to control the wrapping of flex items\nwithin the container the possible values are no wrap which is default\nwrap which wraps the content into the next row or column and wrap reverse\nwhich wraps the content into the previous row or column"),(0,o.kt)("p",null,"flex-flow"),(0,o.kt)("p",null,"all right let's proceed to the fourth flex container property which is flex flow\nit is a shorthand for flex direction and flex wrap\nlet's comment height of 400 pixels flex direction\nand flex wrap instead define flex flow\nby default the flex flow property is set to row and no wrap\nwhich is the default value of the individual properties the first value is the flex direction\nand the second value is the flex wrap property value if i refresh\nand you can see once again the items are laid from left to right and there is no wrapping of items\nyou can type any combination of the possible values and the layout will adjust accordingly\nlet's go with flex flow set to row reverse\nand wrap refresh\nand you can see the layout in the browser the flex direction is from right to left\nand when i reduce the browser width the items are wrapped into the next row\nso the flex flow property is a shorthand for flex direction and flex wrap\nthe first value is flex direction and the second value is flex wrap\nall possible combinations of the two properties work just fine"),(0,o.kt)("p",null,"gap properties"),(0,o.kt)("p",null,"all right let's now move on to the next set of properties which deal with spacing between rows and columns\nfirst we have the column gap property which sets the gap between columns\nfor example if we set column gap 20 pixels and refresh\nwe can see a gap of 20 pixels between the columns\nsimilarly we can also set the gap between rows the property is row gap\nand we can set it to 30 pixels to verify this property though we need\nmore than one row so let's set flex wrap to wrap and head back to the browser\nrefresh and reduce the browser width\nyou can see there is now a 30 pixel gap between the two rows\nnow it's also possible to specify both column and row gap using the gap\nshorthand property so let's comment these out and instead\nset gap to 40 pixels and 20 pixels\nhere the first value is the row gap and the second value is the column gap\nwhen i refresh you can see 40 pixels between the rows\nand 20 pixels between the columns so to specify a gap between columns you\ncan use the column gap property to specify gap between rows you can use\nthe row gap property you can also use the shorthand gap property to specify both row gap and\ncolumn gap the values can be a non-negative value or a percentage"),(0,o.kt)("p",null,"justify-content"),(0,o.kt)("p",null,"now let's move on to the next set of properties which are concerned with alignment\nwe're going to start with the justify content property to see the alignment more clearly i'm\ngoing to reduce the number of items from nine down to five\nall right now justify content defines the alignment along the main axis\nlet's understand with the ui how the different values work\nby default justify content is set to the value flex start\nwhich places the flex items at the beginning of the main axis which is also\nknown as main start if i refresh the browser\nyou can see there is no difference in the alignment the second possible value is flex end\nthis causes the flex items to be placed at the end of the main axis which is\nalso known as main end if i refresh\nyou can see the items are now placed at the end of the main axis\nwe can also align the content at the center of the main axis\nset the value to center and refresh the page\nthe content is now placed at the center of the main access\nso these are some of the values you would expect for alignment left align right align and center align\nbut flexbox provides additional values that can control how the extra space has\nto be distributed within the container we have a value of space between so\njustify content space between when i refresh\nyou can see the extra space within the container is evenly split and added in\nbetween the different flex items sometimes you might also want the space\nbefore the first item and after the last item for such a scenario the value is space\naround let me change space between to space around\nand refresh the browser you can see there is now space at the beginning and at the end\nand the space is equal to half of the space between the flex items\nfor example if space in between the items is 20 pixels space at the start\nand end would be 10 pixels however if you want the same space at the start\nand end of the items as well the value you're looking for is space evenly\nif i change the value of justify content to space evenly\nand refresh the browser you can see the extra space is equally\ndistributed within the container a very important point to keep in mind\nis that justify content property aligns items based on the main access\nso if we set flex direction to column which changes the main axis from top to\nbottom justify content deals with vertical alignment so if i uncomment flex direction set to\ncolumn and set a height of let's say 800 pixels\nadd extra space within the container and change justify content to flex start\nrefresh the browser you can see all the items are pulled to the top\nif the value is flex end refresh all the items are pushed to the bottom\nset the value to center refresh and you have vertically centered\ncontent something that was a real struggle before flexbox\nnow space between space around and space evenly behave the same way\ni'm going to let you try them out so the justify content property is used\nto align items and distribute any extra spacing in the parent container\nthe alignment is always along the main axis the possible values are flex start flex\nend center space between space around and space evenly"),(0,o.kt)("p",null,"align-items"),(0,o.kt)("p",null,"all right the next alignment property is the align items property\nalign items defines the default behavior for how flex items are laid out along\nthe cross axis of the container this means it works just like justify\ncontent but in the perpendicular direction again let's understand with the ui how\nthe different values work to visualize the changes we need a\nheight on the container so let's set height to 800 pixels\nby default the value of align items is stretch\nthat means the flex items stretch the entire length of the cross axis\nso if i set align items to stretch and head back to the browser refresh\nyou can see the items take up all the available height of the container so they stretch to fill the container\nso stretch is the default value the second value we can specify is flex\nstart all items are pushed to the cross start\nwhich is the starting point of the cross access so if i refresh\nyou can see even though the container is 800 pixels in height the items do not stretch and are aligned\nwith the cross start of the line similar to flex start we also have flex\nend and this value as you might have guessed\nwill push the items to the bottom of the container or pushes the items to the end of the\ncross access the fourth possible value is center\nwhich centers the content along the cross axis so refresh\nand the items are now placed at the center of the cross axis the last value i want to discuss is\nbaseline to help us understand baseline i've got this image from stack overflow\nif there is a word for example sphinx the baseline is the line upon which most\nletters sit now coming to flexbox the base value for\nflex items will align flex items along their contents\nbaseline you can see we have five items each with different heights and content\nsize but you can see how all the content in the flex items sit on this baseline\nso if you ever want the text inside the items to line up go with baseline\nlet's quickly take a look at an example i'm going to slightly modify the css for\nthe first three items on item one padding bottom three ram\non item two padding bottom five ram\nand on item three padding bottom 3 ram\nnow i can set align items to baseline if i refresh\nyou can see that the text inside each item is aligned\nthe item itself is positioned based on where the text will sit\nnow you can also flip the axis by setting flex direction to column and test how the alignment works i'm going\nto leave that to you as an exercise so the align items property is used to\nalign items and distribute any extra space in the parent container\nthe alignment is always along the cross axis the possible values are flex start flex\nend center baseline and stretch which is the default value"),(0,o.kt)("p",null,"align-content"),(0,o.kt)("p",null,"all right let's now proceed to the last property that can be applied on the flex container which is the align content\nproperty the align content property aligns lines of content along the cross axis\nsimilar to how justify content aligns individual items within the main access\nso it distributes additional space but along the cross axis and a very important condition is\nthat multiple lines or rows must exist within the container\nif not it has no effect let's understand the different possible values with the ui\nfirst make sure to have a height on the container and also enable wrapping of\nitems so height 800 pixels and flex wrap set\nto wrap wrapping is required to force our content into two lines\nlet's go back to html let's also uncomment the remaining four items\nhead back to the browser and refresh if i reduce the width\nyou can see the content wraps into two rows the align content property is used to\nalign these rows of content within the container\nthe default value is stretch you can see both the lines stretch to fill the\navailable space so if we set align content\nto stretch and refresh the browser\nyou can see there is no change the second value possible\nis flex start this pulls the rows to the beginning of\nthe cross access refresh and you can see the cross access runs\nfrom top to bottom so the content of lines is pushed to the very top\nlet's also get rid of the padding we just added so from item 1 remove padding bottom\nfrom item 2 and 3 as well align content flex start\nrefresh you can see the rows of items are pulled to the top\nsimilarly we also have flex end which pushes the content to the end of\nthe cross access if i refresh you can see the content is at the bottom\nyou can also center the content by specifying a value of center\nrefresh and you can see the content is center aligned\nthe fourth value is space between which takes all the extra space and puts\nit in between the rows refresh\nand you can see all the space is in between the two rows\nfinally we have space around which distributes the space around the\nlines refresh and you can see the space\ndistributed the center portion has twice as that of the edges\nso the align content property is used to align lines of content or rows of\ncontent along the cross axis and distribute any extra spacing in the\nparent container the possible values are flex start flex end center space between space around\nand stretch which is the default value with that we have covered all the\nproperties that work on a flex container"),(0,o.kt)("p",null,"Flex item properties"),(0,o.kt)("p",null,"next let's take a look at list of\nproperties applicable on a flex item first we have order\nthe order property controls the order in which they appear in the flicks container\nnext we have flicks grow which defines the ability for a flex item to grow if\nnecessary on similar lines there is flex shrink which defines the ability for a flex\nitem to shrink if necessary after that we have flex basis\nwhich specifies the initial mean size of a flex item\nwe're also going to quickly take a look at the flex property which is a shorthand for flex grow flex shrink and\nflex bases we will wrap up flex item properties with align self which allows alignment\nof individual flex items"),(0,o.kt)("p",null,"order"),(0,o.kt)("p",null,"all right now that we know the\nproperties that can be applied to a flex item let's take a closer look at each of\nthe properties starting with the order property\non the container class if i comment out all the properties except display and\nborder with display being set to flex\nit is quite evident that flex item in a container are laid out in the order in\nwhich they appear in the source code that however can be changed using the\norder property in our example we have 9 items and you\ncan see they are laid out item 1 through 9 which is the order in which they appear\nin the code let's mix up this order in the css for item 3\ni'm going to set order 1.\nif we refresh the browser you can see that item 3 is pushed all\nthe way to the end and that is because all flex items by default have an order\nof zero order one is greater than the order of all other items and hence\nitem three appears at the very end if i change the order of item 7\nto 2 refresh you can see that item 7 is pushed to the\nend order zero first then order one and then order two\nif you specify the same order number for more than one item items are laid out in the order in which\nthey appear in the source code for example if i specify order of 1 to item 9\nyou can see that both item 3 and item 9 have the same order\nbut in the html item three appears before item nine\nand if i refresh that is how the items are laid out in\nthe browser so the order property accepts an integer\nvalue and is used to control the order of items in the flex container\nelements with the same order value are laid out in the order in which they appear in the source code"),(0,o.kt)("p",null,"flex-grow"),(0,o.kt)("p",null,"the next property that can be applied to a flex item is the flex grow property\nflex grow specifies what amount of space inside the fixed container the item\nshould take up if necessary the flex grow factor is always relative\nto the size of the other children in the flex container let's understand how it works with the\nui by default you can see that the flex items only take up space that is\nrequired to fit the content so there is a lot of extra space within\nthe container sometimes you don't want the additional white space\ninstead you want the flex items to grow to take up the remaining space\nby default all flex items have a flex grow value of 0 which is why they don't\ntake up the available extra space let's change that for one of the items\nand see what happens in the css file for item 5 i will set\nflex grow to 0 to begin with\nwhen i refresh the browser you can see there is no change so 0 is the default value\nwhen i change this to 1 though refresh\nyou can see the change right away item 5 now grows to take up all the\nremaining space in the container let's add the property to item 6 as well\nflex grow set to 1. now if we refresh\nwe can see that the additional space has been evenly distributed between the two flex items\nif there was 100 pixels available item 5 would grow by an additional 50 pixels\nand item 6 would also grow by an additional 50 pixels\nnow let me change the value of flex grill on item 6 to 3 from 1.\nwhat do you think is going to happen refresh\nand you can see that item five and six both grow but item six takes up the extra space\nthree times as much as item five remember flex grow factor is relative\nif item 5 grows by 25 pixels item 6 has to be 3 times that and hence grows by 75\npixels you can specify decimal values as well to flex grow and it works completely\nfine do not specify negative values\nnow if we want all the items to grow to take up the extra space evenly we simply add flex grow and set it to 1\nfor all the flex items so in the css let me comment out flex\ngrow on the individual items and instead on the flex item class which\nis applied to every item in the html let's add flex grow and set it to one\nrefresh and you can see all the items grow evenly to take up the\nleftover space nice and clean so the flexgear property dictates what\namount of the available space inside the flex container the item should take up\nflexible factor is also relative to the other items in the container\nby default the value is 0 which dictates the items should not grow\nsetting a flex grow value of 1 on all the flex items will cause the flex items\nto grow evenly whenever there is additional space in the container"),(0,o.kt)("p",null,"flex-shrink"),(0,o.kt)("p",null,"now on the other side of flex grow we have the flex shrink property\nas you might have already guessed flex shrink defines the ability for a flex\nitem to shrink if necessary unlike flex grow the default value for\nflex shrink is one however the flex shrink factor is still\nrelative to the other items in the container let's understand with the ui\nthe first point to make note of is that flex shrink is set to a value of 1 by\ndefault for every single flex item and that is why if i try to reduce the\nwidth of the parent container\nthe flex items shrink to fit inside the container in case you missed that let me repeat it\nyou can see the flex item's width if i decrease the screen size the width of the flex items also decrease\nthey are shrinking but the shrinking only happens up to a certain point after which the items\nsimply overflow you can see that items 8 and 9 are not visible anymore\nnow let's say you don't want the shrinking happening on the flex items\nfor that simply set the flex shrink value to zero\non the flex item class which is applied to every flex item\nset flex shrink to zero now if i go back to the browser\nrefresh reduce the width\nyou can see there is no shrinking and the items overflow right away\nit is also possible to control the shrinking for individual items i'm going to comment out flex shrink on\nthe flex item class and add a flex shrink of 4 to item 3.\nnow what this specifies is item three is going to shrink four times\nas much as the other items remember this is a relative factor if\nall the other items shrink by 25 pixels item 3 shrinks by 100 pixels\nlet's see this in action and just for this property demo i'm going to add a width to the flex\nitems class to make them larger so width is going to be equal to 6 ram\nnow you can see all the items occupy the same size if i start decreasing or reducing the\nwidth though you can see item 3 decreases more than the other items\nlet me repeat it in case you missed that reduce the browser width and you can see item 3 shrinks more than\nthe other items so the flex shrink property dictates the\nshrink factor of the flex items when the default size of the flex items is larger\nthan the flex container it is always relative to other items in\nthe container by default the value is 1 which dictates the items should shrink to a certain\nextent if necessary all right"),(0,o.kt)("p",null,"flex-basis"),(0,o.kt)("p",null,"let's move on to the next property which is flex basis the flex basis property specifies the\ninitial size of a flex item before the extra space in the container is distributed\nthis is used in place of the width property in flex layouts so it can accept values in percentages\npixels m rems or even keywords like auto\nlet's understand better with the ui by default flex basis has a value of\nauto which sets the initial width based on the item's content\nin our case you can see that the item's width is dependent on the text inside\nif i change the text on item 1 to item 1 flex basis\nand refresh the item now has a larger initial width\nback in the css file on item 1\ni'm going to add flex basis and set it to auto\nif i refresh you should not be seeing any difference as it is the default value\nif i change the value to 200 pixels\nrefresh you can see the initial size of item 1\nis now 200 pixels and what you have to make note of here is that flex grow and flex shrink apply\non top of flex bases for example on item 1 if flex grow is set to 1\nrefresh the extra space is added onto the 200 pixels\nit could be 300 pixels after growing flexbox doesn't try to decrease its\ngrowth just because it is larger than the other items to begin with\nand the same goes with flex shrink as well so the flex basis property is used to\nset the initial size of a flex item you can specify values in pixels\npercentages or relative units by default the value is auto which\ndecides the item's width based on the item's content"),(0,o.kt)("p",null,"flex"),(0,o.kt)("p",null,"all right the next property applicable to a flex item is the flex property\nwhich is a shorthand for flex grow flex shrink and flex bases\nalthough we can specify the three properties individually the recommended way is to use the flex property\nsince we have already covered the three properties i'll walk you through slides for this property\ni recommend you play around with it in code when you get the time now flex accepts three values separated\nby a space the first is flex grow the second is\nflex shrink and finally flex bases you can see that it is much simpler and\neasier as well by default flex property has a value of\n0 1 auto 0 for flex grow which implies the items\nwill not grow to fit the container one for flex shrink which implies the\nitems will shrink when necessary an auto for flex bases which implies the\nwidth of the items depends on their content the flex property can be specified using\none two or all three values try experimenting with different values\nand you'll get a good understanding of the flex property"),(0,o.kt)("p",null,"align-self"),(0,o.kt)("p",null,"let's now move on to the last flex item\nproperty which is the align self property align self is used to control the\nalignment of individual items the values are pretty much the same that are\napplicable for the align items property on the flex container let's take a look at them one by one\nthe first value is flick start which aligns the items at the start of the cross access\non item one let's set align self\nto flex start let's also set a height\nof 400 pixels on the container if we take a look at the browser\nrefresh you can see the item is pulled to the top which is where the cross axis starts\nthe second value is flex end which aligns the item with the end of the cross axis\non item 2 let's set align self to flex end\nand you can see the item is pushed to the bottom of the cross axis\nthe third value is center so let's add a line self\ncenter on item three and refresh\nyou can see item three is centered the fourth value is stretch which\nstretches the item from cross start to cross end on item 4 if i set align self\nto stretch and refresh you can see item 4 is stretched but so\nare items 5 through 9. now you might think okay stretch is the\ndefault value for align self but that is not true the default value for align self is auto\nand align self is computed from the align items property of the parent flex\ncontainer now items five through nine are stretched because the container has\nalign items of stretch which is the default value starting to get a bit confusing isn't it\nwell let me go over this slowly flex container\nwhich is the parent container has no align items property set\nso what is the default value it is stretch\nso container has align items set to stretch by default\nnow flex item 5 does it have a line self\nno but what is the default value of align self\nit is auto and what does auto specify well it specifies to take the value of\nthe parents align items value so item 5 takes the value of stretch\nso do items 6 7 and so on now if i specify align items on the\nparent container and set it to flex end\nitems 5 through 9 will now inherit that value\nand if i refresh you can see that they are pushed to the end of the cross access\nnow i understand this is a bit overwhelming to keep track of but i hope you now have a place to come\nback to any time you need to understand what is going on with the layout in your\nweb page so align self property is used to align\nthe items individually it accepts values like auto flex start\nflex end center and stretch if specified it will always override the\nalign items value of the flex container all right with that we wind up with the\ndifferent properties that are part of the flexbox module and in doing so we have come to the end\nof this crash course on css flexbox"))}d.isMDXComponent=!0}}]);