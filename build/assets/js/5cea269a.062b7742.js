"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[4437],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=o,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},473:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:12},l="Button Component",i={unversionedId:"6 React Native/12 Button",id:"6 React Native/12 Button",title:"Button Component",description:"Welcome back for our next core component",source:"@site/docs/6 React Native/12 Button.md",sourceDirName:"6 React Native",slug:"/6 React Native/12 Button",permalink:"/fundamentals/6 React Native/12 Button",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"ScrollView Component",permalink:"/fundamentals/6 React Native/11 Scroll View"},next:{title:"Pressable Component",permalink:"/fundamentals/6 React Native/13 Pressable"}},p={},s=[{value:"Welcome back for our next core component",id:"welcome-back-for-our-next-core-component",level:3},{value:"Switching to VS Code and Example",id:"switching-to-vs-code-and-example",level:3},{value:"Handling the Press Event",id:"handling-the-press-event",level:3},{value:"Customization with Props",id:"customization-with-props",level:3},{value:"Summary",id:"summary",level:3},{value:"Next Video",id:"next-video",level:3}],u={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"button-component"},"Button Component"),(0,o.kt)("h3",{id:"welcome-back-for-our-next-core-component"},"Welcome back for our next core component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's take a look at the ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," component in React Native")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Button component allows users to trigger actions similar to the button component in the web")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, it's important to note that the button component has platform-specific rendering for iOS and Android"))),(0,o.kt)("h3",{id:"switching-to-vs-code-and-example"},"Switching to VS Code and Example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First, we need to import the Button component from React Native")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Inside the View component, I'll invoke the Button component"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Unlike the HTML button element, the button component in React Native is a self-closing tag with no inner text or closing tag")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To specify the button text, we use a prop called ",(0,o.kt)("inlineCode",{parentName:"p"},"title"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Let\'s set it it to "Press"'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button title='Press' />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we save the file and take a look at the devices, we can see the button component rendered with iOS styles on iPhone 14 Pro and Android styles on the Android virtual device")),(0,o.kt)("h3",{id:"handling-the-press-event"},"Handling the Press Event"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In React Native, the button component provides an ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," prop to handle the Press event")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Let\'s add onPress equal to an arrow function that logs to the console "Button pressed"'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button title='Press' onPress={() => console.log('Button pressed')} />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When we press the button, the event handler is triggered and we see the log message in the terminal")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The event handler can be more complex by defining a separate function and assigning it to the onPress event"))),(0,o.kt)("h3",{id:"customization-with-props"},"Customization with Props"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The third prop to highlight is the color prop, which allows easy customization of the button color")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Let\'s set color to "midnight blue"'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button title='Press' onPress={() => console.log('Button pressed')} color='midnightblue' />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, if we take a look at the UI, we can see the button with the new color applied")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Lastly, there is the ",(0,o.kt)("inlineCode",{parentName:"p"},"disabled")," prop mainly used in form handling"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n        disabled\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By adding the disabled prop and setting it to true by default, the button is styled as disabled and won't trigger any press events when pressed")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's usually better to manage a state variable to control the disabled prop value instead of directly assigning true or false"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"disabled = { state }\n")),(0,o.kt)("h3",{id:"summary"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The button component is used to trigger actions on press")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can specify the title prop for the button text")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The onPress prop is used to handle the Press event")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The color prop is used to set the button color")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The disabled prop is used to disable the button"))),(0,o.kt)("h3",{id:"next-video"},"Next Video"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In the next video, we will take a look at another component to handle the Press event. See you there!")))}m.isMDXComponent=!0}}]);