"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[6442],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=o.createContext({}),l=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(a.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(t),f=r,m=d["".concat(a,".").concat(f)]||d[f]||u[f]||s;return t?o.createElement(m,i(i({ref:n},p),{},{components:t})):o.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=f;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c[d]="string"==typeof e?e:r,i[1]=c;for(var l=2;l<s;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const s={sidebar_position:5},i="Nested Scope",c={unversionedId:"3 Javascript/functions-scope-docs/nested-scope",id:"3 Javascript/functions-scope-docs/nested-scope",title:"Nested Scope",description:"Nested Functions",source:"@site/docs/3 Javascript/03-functions-scope-docs/05-nested-scope.md",sourceDirName:"3 Javascript/03-functions-scope-docs",slug:"/3 Javascript/functions-scope-docs/nested-scope",permalink:"/fundamentals/3 Javascript/functions-scope-docs/nested-scope",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Block Scope",permalink:"/fundamentals/3 Javascript/functions-scope-docs/block-scope"},next:{title:"Function Declaration vs Function Expression",permalink:"/fundamentals/3 Javascript/functions-scope-docs/declaration-vs-expression"}},a={},l=[{value:"Nested Functions",id:"nested-functions",level:3},{value:"Nested If",id:"nested-if",level:3}],p={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nested-scope"},"Nested Scope"),(0,r.kt)("h3",{id:"nested-functions"},"Nested Functions"),(0,r.kt)("p",null,"In JavaScript, we can also define a function within a function. This is called a ",(0,r.kt)("inlineCode",{parentName:"p"},"nested function"),". This relates to something called ",(0,r.kt)("inlineCode",{parentName:"p"},"closures"),", which we will talk about later. When it comes to scope, any variable defined in the parent function is available to the nested/child function, but not the other way around."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function first() {\n  const x = 500\n\n  function second() {\n    const y = 600\n    console.log(x) // 500\n  }\n\n  console.log(y) // ReferenceError: y is not defined\n\n  second()\n}\n\nfirst()\n")),(0,r.kt)("p",null,"As you can see, the ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," variable is defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"first()"),", so we have access to it in the child function, ",(0,r.kt)("inlineCode",{parentName:"p"},"second()"),". However, the ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," variable is defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"second()"),", so we can't access it in the parent function, ",(0,r.kt)("inlineCode",{parentName:"p"},"first()"),". We can access variables from parents but can not access variables from child functions."),(0,r.kt)("h3",{id:"nested-if"},"Nested If"),(0,r.kt)("p",null,"Just like with functions, we can access the parent block scope, but not the nested/child scope"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if (true) {\n  const x = 100\n  // Nested if\n  if (x === 100) {\n    const y = 200\n    console.log(x + y) // 300\n  }\n\n  // console.log(y); // ReferenceError: y is not defined\n}\n\n// console.log(y); // ReferenceError: y is not defined\n")))}u.isMDXComponent=!0}}]);