"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[4658],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),h=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=h(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=h(n),p=a,f=d["".concat(l,".").concat(p)]||d[p]||u[p]||o;return n?i.createElement(f,s(s({ref:t},c),{},{components:n})):i.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=p;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:a,s[1]=r;for(var h=2;h<o;h++)s[h]=n[h];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var i=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3},s="CSS Grid",r={unversionedId:"2 CSS/3 Grid",id:"2 CSS/3 Grid",title:"CSS Grid",description:"Intro",source:"@site/docs/2 CSS/3 Grid.md",sourceDirName:"2 CSS",slug:"/2 CSS/3 Grid",permalink:"/fundamentals/2 CSS/3 Grid",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"CSS Flexbox",permalink:"/fundamentals/2 CSS/2 Flexbox"},next:{title:"JAVASCRIPT",permalink:"/fundamentals/category/javascript"}},l={},h=[],c={toc:h},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"css-grid"},"CSS Grid"),(0,a.kt)("p",null,"Intro"),(0,a.kt)("p",null,"hey everyone my name is vishwas and welcome to this crash course on css grid\nfor complete beginners in this crash course we will understand the various concepts that css grid has\nto offer"),(0,a.kt)("p",null,"Before we begin"),(0,a.kt)("p",null,"before we begin let me go over a few points\nfirst i would like to mention this course is for complete beginners\nif you're someone who is new to css grid or have an idea about css grid and want\nto understand better please continue if you are an expert\nthis is your cue to probably hop into another video where your time can be better utilized\nsecond this video is a continuation of the css and flexbox crash courses\nmake sure you're familiar with both html and css before proceeding\nflexbox is not a prerequisite but if you have understood flexbox learning css\ngrid becomes relatively easier also make sure you could along with me as\nthat is the best way to learn by the end of this video you will have a solid\nunderstanding of creating layouts with css grid"),(0,a.kt)("p",null,"What is CSS Grid?"),(0,a.kt)("p",null,"the css grid layout module or simply known as css grid or just grid is a\ntwo-dimensional grid-based layout system with rows and columns grid makes it\neasier to design webpage layouts align and distribute space among items in a\ngrid flexbox is great when we are dealing with one-dimensional layouts but when\ndealing with two-dimensional layouts and you're concerned about laying down elements both horizontally and\nvertically css grid makes the task so much easier\nincluding the complex layouts that we typically tend to struggle with\nif you're comfortable with html css and flexbox css grid is the logical next step for\nyou all right now that we understand the what and why of css grid"),(0,a.kt)("p",null,"Terminology"),(0,a.kt)("p",null,"let's dive into\nunderstanding the different concepts we first need to start off by\nunderstanding the terminology in css grid trust me when i say this the next few\nminutes you spend understanding what each term means will decide how easy it\nis to understand the different properties css grid offers\nunderstanding the terminology is essential to this course so please make sure you pay attention\nwhen we talk about css grid we mainly have two entities a parent container which we term as the\ngrid container and the immediate children elements which we term as grid items\nif you look at the sample html the parent div is the grid container and\nall the children divs are the grid items very important to keep this in mind\nthe next term to make note of is grid line which is the horizontal or vertical\ndividing line in a grid the orange line is an example of a column grid line as it is a vertical\nline if it is horizontal it is called a row grid line\nnext we have a grid cell which is the smallest unit you can have on your css\ngrid it is the space between four intersecting grid lines as you can see\nhere denoted by the orange square next we have a grid track\nwhich is the space between two adjacent grid lines it is denoted by the green portion on\nthe screen finally we have grid area which is the total space surrounded by four grid\nlines a grid area may be composed of any number of grid cells\nnow these terms you don't have to memorize for the very first time however it does help when learning the\ndifferent properties but what is very important from the beginning is to understand grid\ncontainer and grid items understanding css grid is basically\ngetting familiar with the properties associated with the grid container and\nthe grid items knowing what properties exist and how they work\nyou can always refer to the documentation if you're having trouble building a particular layout"),(0,a.kt)("p",null,"Grid container properties"),(0,a.kt)("p",null,"let's begin by focusing first on the properties that are associated with just\ngrid container there are 18 properties in total of\nwhich we're going to learn 16 in this crash course the other two i would say they might be\na bit confusing from a beginner's point of view my recommendation is to understand the\n16 properties and then have a look at the other two which i will mention later\non in the course first we have the display property this\nis what defines a grid container and is mandatory to work with css grid\nnext we have the grid template column and row properties to set the number of\ncolumns and rows in the grid we then have column and row gap\nproperties to set the gap between columns and rows next we have justify align and place\nitems properties which are concerned with alignment of the grid items\nsimilarly we have content alignment properties which deal with alignment of the entire grid\nfinally we have properties to deal with auto generated grid tracks\nnow this is just a list of the different properties so don't get overwhelmed as to how each of them work\nwe will dive into each of them and understand how they work with a visual example in the browser"),(0,a.kt)("p",null,"Setup"),(0,a.kt)("p",null,"to get us started with css grid i have set up some very simple html and\ncss that i am now going to walk you through i have created a folder called grid\ncrash course and within the folder i've created an index.html file and a\nstyles.css file the html is pretty standard\nthe head tag contains what you would normally find and a link to the css file\nwithin the body we have a parent div tag with a class called container\nthis parent container has nine div tags as children\nand each div has a class grid item and also a class specific to the item\nnumber item 1 2 till 9.\nin the css file i've set margin to 0 on the body element and on the container class\ni've added a thick black border on the grid item class\ni've added a font color white a font size of 1.5 ram\none ram padding and i've also centered aligned the text\nfor items one through nine i've set a different background color so as to\nvisually separate each item in the browser the html and css code can be found on my\ngithub page in the crash courses 2022 repo\nyou can either clone copy or download the code\nif you open the html file in the browser you should be able to see this layout\nyou can see that we have nine items enclosed within a container that has a\nsolid black border"),(0,a.kt)("p",null,"display"),(0,a.kt)("p",null,"now let's focus on our very first grid\ncontainer property which is the display property\nto create a grid container we make use of the display property and set it to a\nvalue of grid in the css file on the container class\nadd the property display and set it to grid if we save this file\nand refresh the browser you won't see any difference to how the content is displayed\nas display grid has created a single column grid for the items\nso when creating a grid container all of the contained grid items are placed in\nrows by default and span the full width of the grid container\nso it does behave similar to a block level element if you do not want a block level grid\ncontainer you can set the display property to inline grid and create an\ninline grid container in the css file display is going to be\ninline grid save the file refresh\nyou can see the border now wraps around the grid items\nthe container only takes up width to accommodate its children which is in this case the text in each of the items\nso the display property is used to create either a block level or inline\nlevel grid container the possible values are grid and inline grid"),(0,a.kt)("p",null,"grid-template-columns"),(0,a.kt)("p",null,"now if you want to explicitly set a grid by creating columns and rows you need to make use of grid template columns and grid template rows property let's understand each of them\nfirst let's take a look at defining columns i'm going to revert display to grid\nand then set a new property called grid template columns\nand this property specifies the number of columns in a grid layout the values are a space separated list\nwhere each value specifies the size of the respective column for example we can set the value as 100\npixels 200 pixels and 300 pixels\nthis will create three columns in the grid the first column width is 100\npixels second column width is 200 pixels and third column width is 300 pixels\nif we head to the browser and refresh you can see we now have three columns of\nvarying size item 1 is 100 pixels item 2 is 200\npixels and item 3 is 300 pixels but since we have specified the grid\nshould have only three columns the fourth item is now pushed to the\nsecond row so items four five six now have the same size as 1 2 and 3.\nsimilar is the case with items 7 8 and 9. the grid container is still the entire\nwidth of the browser however the items only take up 600 pixels in width\nnow if you want equal width columns simply set 200 pixels three times\nso 200 200 and 200\nrefresh and all are equal with columns\nnow sometimes you might want to specify equal width columns but for a greater\nnumber of columns in such a scenario you can use the repeat function\nso instead of 200 pixels three times you can specify the value as repeat\nthree times 200 pixels refresh\nand the result is the same but now we can change three to six\nand we can easily have six equal width columns refresh\nyou can see we have the first six items in row one seven eight nine in row two\nthis is because we have specified six columns of equal width\nnow it is also possible to set the width of the column as a fraction of the available free space in the container\nfor example we can set grid template columns value to 1 fr 2 fr and 1 fr again\nso if you were to have 100 width columns 1 and 3 are given 25 of the\nspace while column 2 is given 50 percent of the space\nrefresh and you can see just that we have specified the width as a\nfraction of the available space another function that is useful with\ngrid is the min max function we can specify three columns\nso repeat three columns whose width should be\nmin max 200 pixels comma one fraction\nso the column should be at least 200 pixels but can grow to take up the free space if available\nwhen i refresh you can see we have three columns\nwe can reduce the browser width and the columns start to shrink\nbut at 200 pixels\nthey stop shrinking and simply overflow\nthese are some of the values we can specify so the grid template columns property is\nused to specify the number of columns in the grid the width can be any non-negative length\nvalue like pixels percentage etc or as a fraction of the free space\navailable you can also make use of functions like repeat and min max to achieve the\nperfect grid layout on a side note this property also accepts a line name as part of the value\nbut i feel it to be confusing for a beginner so i've decided to leave that out"),(0,a.kt)("p",null,"grid-template-rows"),(0,a.kt)("p",null,"all right the next property are going to understand is grid template rows\nwhich specifies the number of rows in the grid the value you can specify is pretty much\nwhat you can specify for grid template columns you're now setting the height of the row\ninstead of the width so we can set\ngrid template rows 100 pixels and this sets the height of the first\nrow to 100 pixels you can see item 1 2 and 3 have 100\npixels as height i can set the value as 100 pixels\n150 pixels 200 pixels refresh\nand we see three rows of different heights 100 150 and 200\nspecify repeat three times 100 pixels\nand we have three rows of equal height now if you specify a fourth row\nso repeat three times and then 200 pixels as the fourth value\nrefresh you can see a blank row at the end it\ndoesn't contain any items but the space is occupied by the grid container\nnow you can also use the fraction unit if the container has a defined height\nlet's add height of 400 pixels and grid template rows as repeat\none fraction three times\nrefresh and you can see the three euros grow to take up the available free space in the\ncontainer pretty straightforward as you can see so the grid template rows property is\nused to specify the number of rows in the grid the height can be any non-negative\nlength value like pixels percentage etc or as a fraction of the free space\navailable you can also make use of functions like repeat and min max\nthis property also accepts a line name as part of the value which i'm going to\nleave out as it is not significant from a beginner's perspective"),(0,a.kt)("p",null,"grid-template"),(0,a.kt)("p",null,"the third property is grid template which is a shorthand for defining rows\nand columns so instead of grid template rows\nand grid template columns i'm going to add grid template and the\nvalue is going to be the value of the rows so repeat three times one fraction\nfollowed by a forward slash followed by the value of columns\nso repeat three times min max of 200 pixels or one fraction\nwhen i refresh you can see there is no change in the layout\nso the grid template property is used to specify both rows and columns in the\ngrid its value is the value of grid template rows followed by a forward\nslash and then grid template columns"),(0,a.kt)("p",null,"column-gap"),(0,a.kt)("p",null,"all right let's now move on to the next set of properties which deal with\nspacing between rows and columns first we have the column gap property\nwhich sets the gap between the columns in the grid for example if we set column gap to 20\npixels and refresh\nwe can see a gap of 20 pixels between the columns"),(0,a.kt)("p",null,"row-gap"),(0,a.kt)("p",null,"similarly we can also set the gap between rows the property is row gap and we can set\nthis to 30 pixels refresh\nand we now see spacing between the rows as well"),(0,a.kt)("p",null,"gap"),(0,a.kt)("p",null,"now you can specify both column and row gap using just the shorthand gap\nproperty so let's comment column gap row gap\nand instead specify gap 40 pixels and 20 pixels\nhere the first value is row gap and the second value is column gap\nwhen i refresh you can see 40 pixels between the rows\nand 20 pixels between the columns so to specify gap between columns you\ncan use the column gap property to specify gap between rows you can use the row gap property and you can also\nuse the shorthand gap property to specify both row gap and column gap\nvalues can be any non-negative value or a percentage"),(0,a.kt)("p",null,"justify-items"),(0,a.kt)("p",null,"let's now move on to the next set of properties which are concerned with alignment\nand there are two types of alignment properties within the grid cell and\nwithin the grid container let's first take a look at alignment\nwithin the cell to align the grid items along the row\naxis we can make use of the justify items property on the grid container class i'm going to\ncomment out the grid gap as we don't need that anymore\nnow i'm going to add a new property called justify items\nand by default the value of this property is stretch\nif i set stretch as a value and refresh you can see there is no change apart\nfrom the gap being removed however if i set a value of start\nrefresh you can see that all the items are aligned to the start edge of their cell\nthis will be more clear when we inspect the element and hover on the grid container\nyou can see that the items are pushed to the start of the individual cells\nand we can also set a value of end in which case\nthe items are pushed to the end of the cell finally we can also set center\nin which case the item is horizontally center aligned within the cell\nso justify items for alignment along the row axis"),(0,a.kt)("p",null,"align-items"),(0,a.kt)("p",null,"if you want to adjust alignment along the column axis there is the align items\nproperty similar to justify items align items has\na default value of stretch if i refresh\nthere is no change in the grid layout however if i set the value to start\nrefresh you can see all the items are pushed to the top of the cell\nset it to end and all the items are pushed to the bottom of the cell\nset it to center and all the items are vertically\ncentered aligned within the cell so align items for alignment along the\ncolumn axis"),(0,a.kt)("p",null,"place-items"),(0,a.kt)("p",null,"now it is also possible to specify both\nthe properties in a single declaration using the place items property\nso i can comment out justify items align items and instead specify place items\nand let the value be start and end the first value here which is start is\nfor align items and the second value is for justify items\nso if you've got this right the items should be pushed to the top of the cell and then to the right of the cell\nrefresh and we see just that place items can also accept a single\nvalue in which case the same value is assigned to both align items and justify items\nlet's set one value of center\nnow when i refresh you can see the item is center aligned\nboth horizontally and vertically within the cell\nso for alignment and spacing within the cell you have justify items for variation\nalong the row axis align items for variation along the column axis and place items which is a\nshorthand for both the possible values are start end center\nand stretch which is the default value"),(0,a.kt)("p",null,"justify-content"),(0,a.kt)("p",null,"all right let's now take a look at the\nsecond set of alignment properties which deal with alignment within the container\nnow to understand the different properties we have to make a small change in the grid template value\nwe're going to create a grid with three rows 200 pixels tall and three columns\n200 pixels wide so repeat 3 comma 200 pixels\nand repeat 3 comma 200 pixels i'm going to set height to 800 pixels\nand comment out the place items property if we take a look at the browser\nrefresh you can see the grid container with the black border\nbut the 3x3 grid itself is smaller this extra space gives you an\nopportunity to align the entire 3x3 grid block within the container\nnow to align the content along the row axis we have the justify content property\nby default the value is set to start so if i specify justify content start\nrefresh you can see there is no change in the layout\nif i set it to end and\nthe content is now moved to the end of the row access\nset it to center and the content is now center aligned\nwith respect to the container horizontally of course\nnow grid also provides additional values that can control how the extra space has to be distributed within the container\nfirst we have a value of space between when i refresh the browser\nyou can see the extra space that was left out is evenly split and added in\nbetween the grid columns sometimes you might also want the space\nbefore the first column and after the last column for such a scenario the value is space\naround let me change the value and refresh the browser\nyou can see there is now space at the beginning and at the end and the space is equal to half of the\nspace between the grid columns for example if the space in between the\ncolumns is 200 pixels space at the start and the end would be 100 pixels\nhowever if you want the same space at the start and the end of the items as well the value you're looking for is\nspace evenly so justify content space evenly\nif i refresh you can see the extra space equally distributed within the container"),(0,a.kt)("p",null,"align-content"),(0,a.kt)("p",null,"of course we can expect the same behavior along the column axis as well\ngrid provides another property called align content\nthe values are the same as justify content so i'm going to go over this fairly quicker\nfirst we have start which is also the default value this pushes the content to the top of\nthe container refresh and you can see there is no change as it\nis the default value specify end\nand it pushes the content to the bottom of the container center\nrefresh and the content is now center aligned vertically ","[Music]","\nto control spacing we have space between\nin which case the space is evenly distributed between the rows\nyou can also specify space around which adds space at the top and at the\nbottom ","[Music]"," the space is equal to half of the space\nbetween the rows if you want the same space at the top and bottom of the rows as well\nthe value is space evenly refresh\nand you can see the extra space is equally distributed within the container"),(0,a.kt)("p",null,"place-content"),(0,a.kt)("p",null,"now the next property is place content which is a shorthand for aligned content\nand justify content so place content start end\nand comment out the other two properties here the first value of start is for\nalign content and the second value of end is for justify content\nif you have understood this right the content should be pushed to the top of the container and then to the right of\nthe container refresh and we see just that\nnow place content can also accept a single value in which case the same value is assigned to both align content\nand justify content let's set one value of center\nnow when i refresh you can see the content is center\naligned both horizontally and vertically within the container\nso for alignment and spacing within the container you have justify content for\nalignment along the row axis align content for alignment along the column axis and place content which is a\nshorthand for both the possible values are start end center\nand stretch with start being the default value you also have space between space around\nand space evenly for adding spacing between the rows and columns"),(0,a.kt)("p",null,"grid-auto-flow"),(0,a.kt)("p",null,"all right let's now move on to the last few properties that apply to a grid\ncontainer the next property to know about is grid order flow which controls how auto\nplaced items get inserted into the grid for this property i'm going to comment\nout all the properties except display grid and of course the border\nif we take a look at the browser can see that the items are placed by\nfilling each row nine rows for nine items\nthis is because the default value of grid order flow is row\nso if i specify grid order flow and set a value of row\nrefresh we see no change in the browser\nhowever set it to column refresh\nand you can see the items being placed by filling each column nine columns for nine items"),(0,a.kt)("p",null,"grid-auto-columns"),(0,a.kt)("p",null,"the next property is grid auto columns which is used to specify the default\nwidth of a column currently we have not specified a column width\nso if we were to set grid order columns 100 pixels\nrefresh you can see every column is now 100 pixels\nthis value of course will be overridden if you have specified a column width using the grid template columns property"),(0,a.kt)("p",null,"grid-auto-rows"),(0,a.kt)("p",null,"similar to grid order columns we also have grid auto rows\nwhich sets the default height for rows within the grid if we set it to 200 pixels\nrefresh you can see the only row we have is now 200 pixels tall\nso some of the auto properties as i call them include grid order flow which\ncontrols how auto placed items get inserted into the grid by default it is set to row but you can\nalso set it to column three other values are dense row dense\nand column dense which are applicable for more complex layouts that you can\nlook at once you've mastered the fundamentals then have grid auto columns for setting\nthe default column width and grid auto rows for setting the default row height\nthe value can be in pixels percentage min max etc with auto being the default\nvalue with that we've had a look at all the grid container properties that i wanted\nto cover in this crash course two more properties which i would like\nyou to read about once you are comfortable with the properties discussed so far are grid template areas and grid\ngrid template areas is used to specify areas within the grid layout and the grid property is a shorthand for grid\ntemplate rows grid template columns with template areas grid auto rows grid auto\ncolumns and finally grid autoflow"),(0,a.kt)("p",null,"Grid item properties"),(0,a.kt)("p",null,"all right next let's take a look at the\nlist of properties applicable on a grid item\nfirst we have grid column start and grid column end these two properties control on which\ncolumn line the item starts and ends similarly we have grid row start and\ngrid row end which control on which row line the item starts and ends\nthen have grid column and grid row which is a shorthand for the previously mentioned properties\nfinally we have justify self align self and place self which deal with alignment\nof the item"),(0,a.kt)("p",null,"grid-column-start / grid-column-end"),(0,a.kt)("p",null,"all right now that we know the different properties that can be applied to a grid\nitem let's take a closer look at each of the properties starting with grid column\nstart and grid column end i'm going to comment out all the grid\ncontainer properties except display and grid template\nnow if we take a look at the browser refresh it is quite evident that grid items by\ndefault take up one column in the container that can be changed using grid column\nstart and grid column end on item 1\ni'm going to set grid column start 1\nand grid column end 3. if you now take a look at the browser\nrefresh you can see item one starts at the first\nline in the grid and ends at the third line in the grid so it now takes up two columns worth of\nspace if i set it to end at four\nrefresh it takes up three columns\nset it to five and it will add a new column and the width will be the rest of the\navailable space which is why you see item 5 and 9 also\ntake up more space than 200 pixels now if you're unsure about the end\ncolumn line you can also mention how many columns it should span using the span keyword\nso grid column end let's say it has to span for two columns\nrefresh and you can see item one now spans across two columns"),(0,a.kt)("p",null,"grid-row-start / grid-row-end"),(0,a.kt)("p",null,"similarly let's take a look at the next two properties which deal with row lines\non item one again we can set grid row start\none and grid row end three\nif i now refresh the browser you can see item one starts at the first\nrow line and ends at the third row line effectively taking up two rows of space\nyou can also use the span keyword so span for two rows\nrefresh and the layout remains the same"),(0,a.kt)("p",null,"grid-column and grid-row"),(0,a.kt)("p",null,"it is also possible to specify these values using the grid column and grid row\nshorthand so let me comment out the four properties\nand instead specify grid column is going to be one slash span two so\ngrid column start and grid column end and similarly grid row\nis going to be one slash span two so again the first value is the start\nvalue and then a forward slash and then the end value refresh\nand we still see the same layout so the grid column start grid column end\ngrid row start and grid row end properties control the position of the\nitem in the grid you can also make use of the grid column and grid row shorthand for the same\npurpose values can be a grid line number or the number of columns or rows the item has\nto span"),(0,a.kt)("p",null,"justify-self"),(0,a.kt)("p",null,"all right for the final set of properties let's take a look at aligning\nitems within a cell earlier in the video we had a look at\njustify items align items and place items which apply to every item in the\ncontainer however if you want alignment for one single item you make use of justify self\nalign self and place self let's look at an example\non item two i'm going to set justify self\nstretch now this is the default value so when i refresh the browser\nyou're not going to see any change however if i set it to start\nrefresh you can see the item is pushed to the start of the row access\nset it to end refresh and the item is at the end of the row\naccess so it is center and the item is center aligned along the\nrow axis similarly we have align self for\nalign-self\nalignment along the column axis the default value is stretch\nwhen i refresh you can see the item stretches from top to bottom there is no change\nif i set it to start refresh it is pushed to the top of the column\naxis set it to end\nit is pushed to the bottom set it to center\nand it is center aligned along the column axis"),(0,a.kt)("p",null,"place-self"),(0,a.kt)("p",null,"now you can combine both justify self and align self into one\nplace self shorthand property so comment out the two properties\nand specify place self first we specify align self property\nvalue so let's push it to the top using start and then the justify self property value\nlet's push it to the right using end refresh\nand you can see the item is placed at the top right you can also set one value\nin which case it will be applied to both the properties if i set it to center\nrefresh you can see the item is center aligned both horizontally and vertically\nso for alignment of an item within the cell you have justify self for variation\nalong the row axis align self for variation along the column axis\nand place self which is a shorthand for both the possible values are start end center\nand stretch which is the default value all right with that we wind up with the\ndifferent properties that are part of the grid module and in doing so we have come to the end\nof this crash course on css grid"))}u.isMDXComponent=!0}}]);