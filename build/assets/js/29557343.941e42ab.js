"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[2074],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=u(a),m=l,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=a.length,i=new Array(o);i[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[d]="string"==typeof e?e:l,i[1]=r;for(var u=2;u<o;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4043:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>u});var n=a(7462),l=(a(7294),a(3905));const o={sidebar_position:3},i="Section 3: On to JavaScript!",r={unversionedId:"10 Black.io JS/Section 3 On to JavaScript",id:"10 Black.io JS/Section 3 On to JavaScript",title:"Section 3: On to JavaScript!",description:"17. Setting up JavaScript file",source:"@site/docs/10 Black.io JS/Section 3 On to JavaScript.md",sourceDirName:"10 Black.io JS",slug:"/10 Black.io JS/Section 3 On to JavaScript",permalink:"/fundamentals/10 Black.io JS/Section 3 On to JavaScript",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Section 2: HTML and CSS",permalink:"/fundamentals/10 Black.io JS/Section 2 HTML and CSS"},next:{title:"Section 4: JavaScript Tools",permalink:"/fundamentals/10 Black.io JS/Section 4 JavaScript Tools"}},s={},u=[{value:"17. Setting up JavaScript file",id:"17-setting-up-javascript-file",level:2},{value:"Create a new project folder",id:"create-a-new-project-folder",level:3},{value:"the script tag - how to link your JavaScript files to your HTML file.",id:"the-script-tag---how-to-link-your-javascript-files-to-your-html-file",level:3},{value:"link the css file",id:"link-the-css-file",level:3},{value:"18. Comments",id:"18-comments",level:2},{value:"using comments",id:"using-comments",level:3},{value:"single line comments",id:"single-line-comments",level:3},{value:"multi-line comments",id:"multi-line-comments",level:3},{value:"Code Blacks {}",id:"code-blacks-",level:3},{value:"keyboard shortcut for comments",id:"keyboard-shortcut-for-comments",level:3},{value:"19. Strings",id:"19-strings",level:2},{value:"Data types",id:"data-types",level:3},{value:"string",id:"string",level:3},{value:"This is how you write a string.",id:"this-is-how-you-write-a-string",level:3},{value:"scape character",id:"scape-character",level:3},{value:"Practice on W3Schools",id:"practice-on-w3schools",level:3},{value:"21. Var, Let, and Const",id:"21-var-let-and-const",level:2},{value:"variables",id:"variables",level:3},{value:"let",id:"let",level:3},{value:"changing a variable",id:"changing-a-variable",level:3},{value:"const and var",id:"const-and-var",level:3},{value:"let vs const vs var",id:"let-vs-const-vs-var",level:3},{value:"23. Scope",id:"23-scope",level:2},{value:"scope is where variables exist.",id:"scope-is-where-variables-exist",level:3},{value:"Block scope",id:"block-scope",level:3},{value:"function and global scope",id:"function-and-global-scope",level:3},{value:"we need our code to be as predictable as possible",id:"we-need-our-code-to-be-as-predictable-as-possible",level:3},{value:"is best practice not to declare variables with this VAR keyword",id:"is-best-practice-not-to-declare-variables-with-this-var-keyword",level:3},{value:"24. Console Object (and intro to objects)",id:"24-console-object-and-intro-to-objects",level:2},{value:"objects",id:"objects",level:3},{value:"objects can have properties and methods",id:"objects-can-have-properties-and-methods",level:3},{value:"console object",id:"console-object",level:3},{value:"the log method",id:"the-log-method",level:3},{value:"dot notation",id:"dot-notation",level:3},{value:"25. (console) Logging (to further explain) Scope",id:"25-console-logging-to-further-explain-scope",level:2},{value:"I want to use this logging method to further explain scope.",id:"i-want-to-use-this-logging-method-to-further-explain-scope",level:3},{value:"variables created with let or const only exist within the block {}",id:"variables-created-with-let-or-const-only-exist-within-the-block-",level:3},{value:"avoid unpredictable code",id:"avoid-unpredictable-code",level:3},{value:"Never use the var keyword",id:"never-use-the-var-keyword",level:3},{value:"26. Functions (Arrow)",id:"26-functions-arrow",level:2},{value:"using functions",id:"using-functions",level:3},{value:"This is how you write a function.",id:"this-is-how-you-write-a-function",level:3},{value:"calling the function",id:"calling-the-function",level:3},{value:"another example a bit more complex",id:"another-example-a-bit-more-complex",level:3},{value:"27. Arrow Functions (vs function keyword)",id:"27-arrow-functions-vs-function-keyword",level:2},{value:"the older way of writing functions",id:"the-older-way-of-writing-functions",level:3},{value:"arrow function",id:"arrow-function",level:3},{value:"Now let&#39;s see that as the older way of writing a function.",id:"now-lets-see-that-as-the-older-way-of-writing-a-function",level:3},{value:"parameters",id:"parameters",level:3},{value:"this works the exact same way if we wish to use the older way of writing a function.",id:"this-works-the-exact-same-way-if-we-wish-to-use-the-older-way-of-writing-a-function",level:3},{value:"if we only had one parameter <code>using this arrow function</code>, we can remove these parentheses",id:"if-we-only-had-one-parameter-using-this-arrow-function-we-can-remove-these-parentheses",level:3},{value:"setting parameters to a default value",id:"setting-parameters-to-a-default-value",level:3},{value:"Default Parameters",id:"default-parameters",level:3},{value:"29. Debugging Part 1",id:"29-debugging-part-1",level:2},{value:"The debugger Keyword",id:"the-debugger-keyword",level:3},{value:"using chrome devtools with debugger",id:"using-chrome-devtools-with-debugger",level:3},{value:"the source tab in devtools",id:"the-source-tab-in-devtools",level:3},{value:"How do we use this debugger?",id:"how-do-we-use-this-debugger",level:3},{value:"30. Debugging Part 2",id:"30-debugging-part-2",level:2},{value:"Let&#39;s have a little bit more fun with this.",id:"lets-have-a-little-bit-more-fun-with-this",level:3},{value:"and this debugger can also go within this function here.",id:"and-this-debugger-can-also-go-within-this-function-here",level:3},{value:"chrome tools debugger",id:"chrome-tools-debugger",level:3},{value:"31. Null and Undefined",id:"31-null-and-undefined",level:2},{value:"null",id:"null",level:3},{value:"undefined",id:"undefined",level:3},{value:"null and undefined also represent Boolean values.",id:"null-and-undefined-also-represent-boolean-values",level:3},{value:"Boolean()",id:"boolean",level:3},{value:"falsy values",id:"falsy-values",level:3},{value:"truthy values",id:"truthy-values",level:3},{value:"How can we use truthy and falsy values?",id:"how-can-we-use-truthy-and-falsy-values",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...a}=e;return(0,l.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"section-3-on-to-javascript"},"Section 3: On to JavaScript!"),(0,l.kt)("h2",{id:"17-setting-up-javascript-file"},"17. Setting up JavaScript file"),(0,l.kt)("h3",{id:"create-a-new-project-folder"},"Create a new project folder"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"  project folder/\n                index.html\n                main.css\n                app.js\n")),(0,l.kt)("h3",{id:"the-script-tag---how-to-link-your-javascript-files-to-your-html-file"},"the script tag - how to link your JavaScript files to your HTML file."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In this course, we will always link our JavaScript file in the body tag")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Document</title>\n  </head>\n  <body>\n    <script src="app.js"><\/script>\n  </body>\n</html>\n')),(0,l.kt)("h3",{id:"link-the-css-file"},"link the css file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Document</title>\n    <link rel="stylesheet" href="main.css" />\n  </head>\n  <body>\n    <script src="app.js"><\/script>\n  </body>\n</html>\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"you can link CSS files and you can link JavaScript files to your HTML, but you must follow the folder structure.")),(0,l.kt)("h2",{id:"18-comments"},"18. Comments"),(0,l.kt)("h3",{id:"using-comments"},"using comments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"comments are used to remind yourself what a piece of code does. It also helps other developers understand what you are writing and your intentions behind you.")),(0,l.kt)("h3",{id:"single-line-comments"},"single line comments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"are written with two forward slashes")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// This is a comment\n")),(0,l.kt)("h3",{id:"multi-line-comments"},"multi-line comments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"is just a forward slash, star, star, and another forward slash, and in between your comment")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/* I can move this damage to the next line and start writing some more notes here, just like that.*/\n")),(0,l.kt)("h3",{id:"code-blacks-"},"Code Blacks {}"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"just like in HTML where we had to section all the HTML from the rest of the code, in JavaScript we use code blocks to a section of the JavaScript from the rest")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"a code block is written like this opening curly bracket and closing curly bracket"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  // This is a comment\n  // This is a comment\n}\n")),(0,l.kt)("h3",{id:"keyboard-shortcut-for-comments"},"keyboard shortcut for comments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"You basically highlight any line you want to comment and then press ",(0,l.kt)("inlineCode",{parentName:"li"},"command/control forward slash"),", and that automatically creates these single line comments for you")),(0,l.kt)("h2",{id:"19-strings"},"19. Strings"),(0,l.kt)("h3",{id:"data-types"},"Data types"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Data types is how JavaScript represents data.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"There are a number of data types out there, but the first one I want to teach you about is a ",(0,l.kt)("inlineCode",{parentName:"p"},"string")))),(0,l.kt)("h3",{id:"string"},"string"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"strings are used to represent text.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"This is a good place to add names, messages, tiles, etcetera."))),(0,l.kt)("h3",{id:"this-is-how-you-write-a-string"},"This is how you write a string."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"You write a string in either ",(0,l.kt)("inlineCode",{parentName:"p"},"double quotes or single quotes"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"but I recommend using the double quotes because you can run into an error when using single quotes improperly."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"'my strings'\n")),(0,l.kt)("h3",{id:"scape-character"},"scape character"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"This backslash (",")"," is the escape character.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"'my string\\'s'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"It ignores the character that follows the backslash.")),(0,l.kt)("h3",{id:"practice-on-w3schools"},"Practice on W3Schools"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Copy and paste the links into a new tab and complete the exercises.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://www.w3schools.com/js/exercise_js.asp?filename=exercise_js_strings2"},"https://www.w3schools.com/js/exercise_js.asp?filename=exercise_js_strings2")))),(0,l.kt)("h2",{id:"21-var-let-and-const"},"21. Var, Let, and Const"),(0,l.kt)("h3",{id:"variables"},"variables"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"in JavaScript We store data in variables.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"You can think of a variable as a box, We dump data inside of them and come back to them once we need them."))),(0,l.kt)("h3",{id:"let"},"let"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"creating/declaring/initializing a variable with the ",(0,l.kt)("inlineCode",{parentName:"li"},"let")," keyword")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let myDogName = 'Max'\n")),(0,l.kt)("h3",{id:"changing-a-variable"},"changing a variable"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let myDogName = 'Max'\nmyDogName = 'Maxine'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"So when you change a variable name, you don't write the declaration")),(0,l.kt)("h3",{id:"const-and-var"},"const and var"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"creating/declaring/initializing a variable with the ",(0,l.kt)("inlineCode",{parentName:"li"},"const")," keyword and the ",(0,l.kt)("inlineCode",{parentName:"li"},"var")," key word")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let myDogName = 'Max'\nmyDogName = 'Maxine'\n\nconst pi = 3.14\nvar dinner = 'chicken and rice'\n")),(0,l.kt)("h3",{id:"let-vs-const-vs-var"},"let vs const vs var"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"let")," is the keyword that you use if you know that you may change the value of that variable sometime in the future.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"const")," is the declaration that you make when you know that you would never change that variable.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"var")," is the keyword that you want to use to declare variable if you have a variable, is going to change sometime in your future.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"The difference between let and var")," is that var variables can be accessed in a wider scope."))),(0,l.kt)("h2",{id:"23-scope"},"23. Scope"),(0,l.kt)("h3",{id:"scope-is-where-variables-exist"},"scope is where variables exist."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Scope determines the accessibility (visibility) of variables from different parts of your code.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"JavaScript has 3 types of scope:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Block scope")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Function scope")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Global scope")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://www.w3schools.com/js/js_scope.asp"},"https://www.w3schools.com/js/js_scope.asp")))),(0,l.kt)("h3",{id:"block-scope"},"Block scope"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Variables to clear with let and const only exist between these two curly brackets")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  let myDogName = 'Max'\n  const pi = 3.14\n}\n")),(0,l.kt)("h3",{id:"function-and-global-scope"},"function and global scope"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The var keyword is used to declare function-scoped variables and globally-scoped variables.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If you use var inside a block, the variable will not be a block scoped. It will either be function scoped or globally scoped depending upon where the block is present.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://www.section.io/engineering-education/variables-in-javascript/#:~:text=The%20var%20keyword%20is%20used,where%20the%20block%20is%20present"},"https://www.section.io/engineering-education/variables-in-javascript/#:~:text=The%20var%20keyword%20is%20used,where%20the%20block%20is%20present"),"."))),(0,l.kt)("h3",{id:"we-need-our-code-to-be-as-predictable-as-possible"},"we need our code to be as predictable as possible"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"var")," would let you redeclare a variable with the same name while ",(0,l.kt)("inlineCode",{parentName:"li"},"let")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"const")," would not")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var dinner = 'chicken'\nvar dinner = 'fish'\nconsole.log(dinner) // fish\n/////////////////////////////////\nlet dinner = 'chicken'\nlet dinner = 'fish'\nconsole.log(dinner) // Uncaught SyntaxError: Identifier 'dinner' has already been declared\n")),(0,l.kt)("h3",{id:"is-best-practice-not-to-declare-variables-with-this-var-keyword"},"is best practice not to declare variables with this VAR keyword"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"use ",(0,l.kt)("inlineCode",{parentName:"p"},"let")," for variables that can possibly be changed later on")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"use ",(0,l.kt)("inlineCode",{parentName:"p"},"const")," for variables that we know won't change later on."))),(0,l.kt)("h2",{id:"24-console-object-and-intro-to-objects"},"24. Console Object (and intro to objects)"),(0,l.kt)("h3",{id:"objects"},"objects"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In JavaScript, an object is an unordered collection of key-value pairs. Each key-value pair is called a property.")),(0,l.kt)("h3",{id:"objects-can-have-properties-and-methods"},"objects can have properties and methods"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"properties are attributes of the object")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Methods define functionality"))),(0,l.kt)("h3",{id:"console-object"},"console object"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"JavaScript has some built in objects that allow you to access information and use functionality.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The first JavaScript object I want to introduce you to is the ",(0,l.kt)("inlineCode",{parentName:"p"},"console object"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"console object")," is nothing but a variable that's already built into JavaScript"))),(0,l.kt)("h3",{id:"the-log-method"},"the log method"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"we will use a method on this console object to help us debug our code.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"And the method that we will use on this object is the ",(0,l.kt)("inlineCode",{parentName:"p"},"log()")," method."))),(0,l.kt)("h3",{id:"dot-notation"},"dot notation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"on objects, you access its properties and methods by using dot notation.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log()\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"This console object allows us to log things to the console.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let myDogName = 'Max'\nconsole.log(myDogName)\n")),(0,l.kt)("h2",{id:"25-console-logging-to-further-explain-scope"},"25. (console) Logging (to further explain) Scope"),(0,l.kt)("h3",{id:"i-want-to-use-this-logging-method-to-further-explain-scope"},"I want to use this logging method to further explain scope."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  let myDogName = 'Max'\n  const pi = 3.14\n  var dinner = 'chicken and rice'\n\n  console.log(myDogName) // Max\n  console.log(pi) // 3.14\n  console.log(dinner) // chicken and rice\n}\n")),(0,l.kt)("h3",{id:"variables-created-with-let-or-const-only-exist-within-the-block-"},"variables created with let or const only exist within the block {}"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  let myDogName = 'Max'\n  const pi = 3.14\n  var dinner = 'chicken and rice'\n}\nconsole.log(myDogName) // error\nconsole.log(pi) // error\nconsole.log(dinner) // chicken and rice\n")),(0,l.kt)("h3",{id:"avoid-unpredictable-code"},"avoid unpredictable code"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The fact that we can access the var keyword outside of Code Blocks makes our code unpredictable and when code becomes unpredictable Bugs are likely to come.")),(0,l.kt)("h3",{id:"never-use-the-var-keyword"},"Never use the var keyword"),(0,l.kt)("h2",{id:"26-functions-arrow"},"26. Functions (Arrow)"),(0,l.kt)("h3",{id:"using-functions"},"using functions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"functions are used to run code blocks when we want to run them, instead of them just running by default.")),(0,l.kt)("h3",{id:"this-is-how-you-write-a-function"},"This is how you write a function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const myFunction = () => {}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"We write our code between these two code blocks {}")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const myFunction = () => {\n  console.log('my code goes here')\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"we are storing this function inside of this variable with the name of myFunction.")),(0,l.kt)("h3",{id:"calling-the-function"},"calling the function"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"functions don't run unless you explicitly run them")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const myFunction = () => {\n  console.log('my code goes here')\n}\n\nmyFunction()\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"This is ",(0,l.kt)("inlineCode",{parentName:"li"},"calling")," a function and is also ",(0,l.kt)("inlineCode",{parentName:"li"},"invoking")," a function. You can also think of it as ",(0,l.kt)("inlineCode",{parentName:"li"},"running")," the function.")),(0,l.kt)("h3",{id:"another-example-a-bit-more-complex"},"another example a bit more complex"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const sayHello = () => {\n  const greeting = 'John Does say hi'\n  console.log(greeting)\n}\n\nsayHello()\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In this function, I'm declaring a variable with the const keyword here, I'm naming the greeting, Setting it to a string and I'm logging that to the console.")),(0,l.kt)("h2",{id:"27-arrow-functions-vs-function-keyword"},"27. Arrow Functions (vs function keyword)"),(0,l.kt)("h3",{id:"the-older-way-of-writing-functions"},"the older way of writing functions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function myFn() {\n  ...\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"This is the older way of writing a function")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"when you look at code online, you may see someone use this type of function.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"However, we won't be using this type of function in this course because ",(0,l.kt)("inlineCode",{parentName:"p"},"I want it to be consistent with which version of a function I'm using"),"."))),(0,l.kt)("h3",{id:"arrow-function"},"arrow function"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"this function is an arrow function. The one we learned in a previous video.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const sayHello = () => {\n  const message = 'Hello'\n  console.log(message)\n}\n\nsayHello()\n")),(0,l.kt)("h3",{id:"now-lets-see-that-as-the-older-way-of-writing-a-function"},"Now let's see that as the older way of writing a function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function sayHello() {\n  const message = 'Hello'\n  console.log(message)\n}\n\nsayHello()\n")),(0,l.kt)("h3",{id:"parameters"},"parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"You can think of a parameter as a variable being passed into a function.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Function ",(0,l.kt)("inlineCode",{parentName:"p"},"parameters")," are the ",(0,l.kt)("inlineCode",{parentName:"p"},"names")," listed in the function definition. (possible parameters)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Function ",(0,l.kt)("inlineCode",{parentName:"p"},"arguments")," are the ",(0,l.kt)("inlineCode",{parentName:"p"},"real values")," passed to (and received by) the function. (actual arguments)"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const sayHello = (message) => {\n  console.log(message)\n}\n\nsayHello('Hello')\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Let's say we wanted to log more than one message.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const sayHello = (message, message2) => {\n  console.log(message)\n  console.log(message2)\n}\n\nsayHello('Hello', 'there')\n")),(0,l.kt)("h3",{id:"this-works-the-exact-same-way-if-we-wish-to-use-the-older-way-of-writing-a-function"},"this works the exact same way if we wish to use the older way of writing a function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function sayHello(message, message2) {\n  console.log(message)\n  console.log(message2)\n}\n\nsayHello('Hello', 'there')\n")),(0,l.kt)("h3",{id:"if-we-only-had-one-parameter-using-this-arrow-function-we-can-remove-these-parentheses"},"if we only had one parameter ",(0,l.kt)("inlineCode",{parentName:"h3"},"using this arrow function"),", we can remove these parentheses"),(0,l.kt)("h3",{id:"setting-parameters-to-a-default-value"},"setting parameters to a default value"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"adding the parameters inside the parenthesis is the same as declaring a variable inside the function without assigning a value to it")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"A parameter is a variable in a function definition. It is a placeholder and hence does not have a concrete value."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let message\nlet message2\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"An argument is a value passed during function invocation.")),(0,l.kt)("h3",{id:"default-parameters"},"Default Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In JavaScript, default function parameters allow you to initialize named parameters with default values if no values or undefined are passed into the function.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const say = (message = 'Hi') => {\n  console.log(message)\n}\n\nsay() // 'Hi'\nsay('Hello') // 'Hello'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"We're using these default values. These have to be the last parameters")),(0,l.kt)("h2",{id:"29-debugging-part-1"},"29. Debugging Part 1"),(0,l.kt)("h3",{id:"the-debugger-keyword"},"The debugger Keyword"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The debugger keyword stops the execution of JavaScript, and calls (if available) the debugging function.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"This has the same function as setting a breakpoint in the debugger."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const sayHello = (message) => {\n  console.log(message)\n}\n\ndebugger\n\nsayHello('Hello')\n")),(0,l.kt)("h3",{id:"using-chrome-devtools-with-debugger"},"using chrome devtools with debugger"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"First thing I want you to notice is that when we refreshed the code, automatically stop execution.")),(0,l.kt)("h3",{id:"the-source-tab-in-devtools"},"the source tab in devtools"),(0,l.kt)("h3",{id:"how-do-we-use-this-debugger"},"How do we use this debugger?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"We have a few buttons here at the bottom, and yours may be at a different spot.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"this play button basically continues execution.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"step over next function")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"step into function"))),(0,l.kt)("h2",{id:"30-debugging-part-2"},"30. Debugging Part 2"),(0,l.kt)("h3",{id:"lets-have-a-little-bit-more-fun-with-this"},"Let's have a little bit more fun with this."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Let's pass in another variable.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const sayHello = (message1, message2) => {\n  console.log(message1)\n  console.log(message2)\n  const myDog = 'Max'\n  console.log(myDog)\n}\n\ndebugger\n\nsayHello('Hello', 'there')\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"You can already see the power of using this debugger")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"if your code is something that's unexpected You can also put a debugger somewhere in your code,"))),(0,l.kt)("h3",{id:"and-this-debugger-can-also-go-within-this-function-here"},"and this debugger can also go within this function here."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const sayHello = (message1, message2) => {\n  debugger\n  console.log(message1)\n  console.log(message2)\n  const myDog = 'Max'\n  console.log(myDog)\n}\n\nsayHello('Hello', 'there')\n")),(0,l.kt)("h3",{id:"chrome-tools-debugger"},"chrome tools debugger"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"if I click any of these numbers (for the lines in the source tab) This also stops execution.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"It does the exact same thing the debugger keyword does"))),(0,l.kt)("h2",{id:"31-null-and-undefined"},"31. Null and Undefined"),(0,l.kt)("h3",{id:"null"},"null"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If we were to declare a variable, let's say myDogName.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If we didn't want to set this to a value, if we wanted to intentionally leave out a value, we can assign it to null.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"And that literally means that we don't have a value for that."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let myDogName = null\n// null\n")),(0,l.kt)("h3",{id:"undefined"},"undefined"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"On other hand, if we was to initiate this with the let keyword but not assign it any value.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"My dog name will automatically equal undefined and undefined just literally means that you did not define this."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"//let myDogName = null\nlet myDogName\n// undefine\n// null\n")),(0,l.kt)("h3",{id:"null-and-undefined-also-represent-boolean-values"},"null and undefined also represent Boolean values."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Technically there are considered ",(0,l.kt)("inlineCode",{parentName:"li"},"falsy")," values")),(0,l.kt)("h3",{id:"boolean"},"Boolean()"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Boolean() is a built in JavaScript object, and we can use it to convert different types to booleans")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log(Boolean(null)) //false\nconsole.log(Boolean(undefined)) //false\nconsole.log(Boolean('Hey')) //true\nconsole.log(Boolean('')) //false\nconsole.log(Boolean(2)) //true\nconsole.log(Boolean(0)) //false\n")),(0,l.kt)("h3",{id:"falsy-values"},"falsy values"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"null, Undefined, an empty string and zero all evaluate to false because they're all falsy values.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'null, undefined, "", 0 -> false\n')),(0,l.kt)("h3",{id:"truthy-values"},"truthy values"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"any number but 0, any string")),(0,l.kt)("h3",{id:"how-can-we-use-truthy-and-falsy-values"},"How can we use truthy and falsy values?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let myDogName\n\nif (myDogName) {\n  console.log('My dog has a name')\n} else {\n  console.log('My dog does NOT have a name') //\n}\n")))}p.isMDXComponent=!0}}]);