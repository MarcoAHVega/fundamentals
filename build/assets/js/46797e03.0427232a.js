"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[8172],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,d=u["".concat(p,".").concat(m)]||u[m]||x[m]||l;return n?o.createElement(d,a(a({ref:t},c),{},{components:n})):o.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var s=2;s<l;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4034:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>x,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const l={sidebar_position:37},a="Flex Grow",i={unversionedId:"6 React Native Expo CLI/Section 4: Layout/37 flexGrow",id:"6 React Native Expo CLI/Section 4: Layout/37 flexGrow",title:"Flex Grow",description:"=> Intro",source:"@site/docs/6 React Native Expo CLI/Section 4: Layout/37 flexGrow.md",sourceDirName:"6 React Native Expo CLI/Section 4: Layout",slug:"/6 React Native Expo CLI/Section 4: Layout/37 flexGrow",permalink:"/fundamentals/6 React Native Expo CLI/Section 4: Layout/37 flexGrow",draft:!1,tags:[],version:"current",sidebarPosition:37,frontMatter:{sidebar_position:37},sidebar:"tutorialSidebar",previous:{title:"Flex Shrink",permalink:"/fundamentals/6 React Native Expo CLI/Section 4: Layout/36 flexShrink"},next:{title:"Relative and Absolute Layout",permalink:"/fundamentals/6 React Native Expo CLI/Section 4: Layout/38 Relative and Absolute Layout"}},p={},s=[{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"Exploring Flex Grow",id:"exploring-flex-grow",level:3},{value:"Applying Flex Grow",id:"applying-flex-grow",level:3},{value:"To summarize:",id:"to-summarize",level:3}],c={toc:s},u="wrapper";function x(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flex-grow"},"Flex Grow"),(0,r.kt)("blockquote",null),(0,r.kt)("h3",{id:"-intro"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In this final section, we'll explore the ",(0,r.kt)("strong",{parentName:"p"},"FlexGrow")," property in React Native.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow")," determines how much space an item should occupy inside a flex container when there's extra space available.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"flexShrink"),", the flex grow factor is always relative to other items within the container."))),(0,r.kt)("h3",{id:"exploring-flex-grow"},"Exploring Flex Grow"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Let's gain clarity on how ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow")," works with an example UI.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By default, flex items only occupy the space required to fit their content."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This often leaves extra space within our container.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"However, in certain situations, we want flex items to grow and utilize the remaining space.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By default, all flex items have a ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow")," value of 0, preventing them from utilizing the extra space.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To change this behavior, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow")," property with a positive value."))),(0,r.kt)("p",null,"For instance:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Initially, we'll set ",(0,r.kt)("inlineCode",{parentName:"li"},"flexGrow"),' of "Item 5" to 0 (default).')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803', flexGrow: 0 }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"No change will be observed since 0 is the default value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow"),' value to 1 for "Item 5"'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803', flexGrow: 1 }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"will cause it to grow and occupy the remaining space in the container.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Similarly, setting ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow"),' to 1 for "Item 6"'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803', flexGrow: 1 }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56', flexGrow: 1 }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"will distribute the additional space evenly between items 5 and 6.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'To experiment further, changing "Item 6"\'s ',(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow")," value to 3 from 1"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803', flexGrow: 1 }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56', flexGrow: 3 }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'will cause it to grow three times more than "Item 5".')),(0,r.kt)("h3",{id:"applying-flex-grow"},"Applying Flex Grow"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Instead of setting ",(0,r.kt)("inlineCode",{parentName:"li"},"flexGrow")," individually for each item,")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"we can add it to the common style (",(0,r.kt)("inlineCode",{parentName:"li"},"box"),") applied to every item.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function Box({ children, style }) {\n  return (\n    <View style={[styles.box, style]}>\n      <Text style={styles.text}>{children}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    backgroundColor: '#fff',\n    padding: 20,\n    flexGrow: 1,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: 'white',\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This will result in all items evenly utilizing the leftover space.")),(0,r.kt)("h3",{id:"to-summarize"},"To summarize:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow")," property determines how much available space an item should take up in the flex container.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The flexGrow factor is relative to other items in the container.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A default value of 0 means items shouldn't grow.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow")," to 1 for all flex items will cause them to grow evenly when there's extra space."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You might wonder about the relationship between the ",(0,r.kt)("inlineCode",{parentName:"p"},"flex")," property and ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When ",(0,r.kt)("inlineCode",{parentName:"p"},"flex")," is set to a positive number, it's equivalent to setting ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow")," with the same number.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"However, ",(0,r.kt)("inlineCode",{parentName:"p"},"flex")," also implicitly sets ",(0,r.kt)("inlineCode",{parentName:"p"},"flexShrink")," to 1 and ",(0,r.kt)("inlineCode",{parentName:"p"},"flexBasis")," to 0.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In essence, ",(0,r.kt)("inlineCode",{parentName:"p"},"flex")," with a positive number is equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow")," set to the same positive number, ",(0,r.kt)("inlineCode",{parentName:"p"},"flexShrink")," set to 1, and ",(0,r.kt)("inlineCode",{parentName:"p"},"flexBasis")," set to 0.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This clarifies what the ",(0,r.kt)("inlineCode",{parentName:"p"},"flex")," property does under the hood."))),(0,r.kt)("p",null,"With a solid understanding of ",(0,r.kt)("inlineCode",{parentName:"p"},"flexBasis"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"flexShrink"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"flex-grow"),", you can fine-tune the behavior of flex items within your layouts."))}x.isMDXComponent=!0}}]);