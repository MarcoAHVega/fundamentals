"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[8835],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),y=r,u=c["".concat(s,".").concat(y)]||c[y]||d[y]||i;return n?o.createElement(u,a(a({ref:t},m),{},{components:n})):o.createElement(u,a({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},124:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:56},a="SectionList",l={unversionedId:"6 React Native Expo CLI/Section 7: How to render list/56 SectionList",id:"6 React Native Expo CLI/Section 7: How to render list/56 SectionList",title:"SectionList",description:"=> Intro",source:"@site/docs/6 React Native Expo CLI/Section 7: How to render list/56 SectionList.md",sourceDirName:"6 React Native Expo CLI/Section 7: How to render list",slug:"/6 React Native Expo CLI/Section 7: How to render list/56 SectionList",permalink:"/fundamentals/6 React Native Expo CLI/Section 7: How to render list/56 SectionList",draft:!1,tags:[],version:"current",sidebarPosition:56,frontMatter:{sidebar_position:56},sidebar:"tutorialSidebar",previous:{title:"List Header and Footer",permalink:"/fundamentals/6 React Native Expo CLI/Section 7: How to render list/55 List Header and Footer"},next:{title:"Section 8: Inputs and Forms ",permalink:"/fundamentals/category/section-8-inputs-and-forms-"}},s={},p=[{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"Grouping by Pok\xe9mon Type",id:"grouping-by-pok\xe9mon-type",level:3},{value:"Styling Section Headers",id:"styling-section-headers",level:3},{value:"ItemSeparatorComponent",id:"itemseparatorcomponent",level:3},{value:"SectionSeparatorComponent",id:"sectionseparatorcomponent",level:3},{value:"Conclusion",id:"conclusion",level:3}],m={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sectionlist"},"SectionList"),(0,r.kt)("blockquote",null),(0,r.kt)("h3",{id:"-intro"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In this final video of the section on lists in React Native, we will explore the ",(0,r.kt)("inlineCode",{parentName:"p"},"SectionList")," component")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"As the name suggests, ",(0,r.kt)("strong",{parentName:"p"},"it is a performant component designed for rendering sectioned lists."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We will render a list of Pok\xe9mon categorized by ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", with sections for different types.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Begin by creating a mock data set representing a list of Pokemon by type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"within the project folder I will create a file ",(0,r.kt)("inlineCode",{parentName:"p"},"grouped-data.Json"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"in this file I'll paste Json data which you can find on my GitHub repo"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "type": "Grass",\n    "data": ["Bulbasaur", "Ivysaur", "Venusaur"]\n  },\n  {\n    "type": "Fire",\n    "data": ["Charmander", "Charmeleon", "Charizard"]\n  },\n  {\n    "type": "Water",\n    "data": ["Squirtle", "Wartortle", "Blastoise"]\n  },\n  { "type": "Electric", "data": ["Pikachu", "Raichu"] }\n]\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it consists of an array of four objects"),(0,r.kt)("li",{parentName:"ul"},"and each object contains two key value pairs ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," representing the Pokemon type and ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," representing the list of Pokemon for that type"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"it is crucial to name this property ",(0,r.kt)("inlineCode",{parentName:"strong"},"data")," as that is what the ",(0,r.kt)("inlineCode",{parentName:"strong"},"SectionList")," component expects")),(0,r.kt)("li",{parentName:"ul"},"if your API data set for example doesn't have the ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," property you would have to transform your data"),(0,r.kt)("li",{parentName:"ul"},"the other property though can be named anything and I've chosen to call it ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," as it seems logical")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Comment out the FlatList component from before.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We still need the wrapping View component for horizontal padding."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Import the ",(0,r.kt)("inlineCode",{parentName:"p"},"SectionList")," component from React Native.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Import the JSON data from ",(0,r.kt)("inlineCode",{parentName:"p"},"grouped-data.json"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Invoke the ",(0,r.kt)("inlineCode",{parentName:"p"},"SectionList")," component with the required props.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The Section List component has two mandatory props:"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"sections"),":")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It is the source of information for the Section List."),(0,r.kt)("li",{parentName:"ul"},"In our case, it is ",(0,r.kt)("inlineCode",{parentName:"li"},"groupedPokemonList"),".")),(0,r.kt)("ol",{parentName:"li",start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"renderItem"),":")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This prop is a function that returns the JSX for rendering each item in the list."),(0,r.kt)("li",{parentName:"ul"},"It receives an object containing the current ",(0,r.kt)("inlineCode",{parentName:"li"},"item"),", and you can define how each item should be rendered."),(0,r.kt)("li",{parentName:"ul"},"This is similar to what we return for the ",(0,r.kt)("inlineCode",{parentName:"li"},"FlatList")," component but without the Pok\xe9mon type.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n        <SectionList\n          sections={groupedPokemonList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.card}>\n                <Text style={styles.cardText}>{item}</Text>\n              </View>\n            )\n          }}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n})\n")),(0,r.kt)("h3",{id:"grouping-by-pok\xe9mon-type"},"Grouping by Pok\xe9mon Type"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To group the list by Pok\xe9mon type, add a prop called ",(0,r.kt)("strong",{parentName:"p"},"renderSectionHeader"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"This prop is a function that returns the JSX for rendering each section header in the list."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It receives an object containing the current ",(0,r.kt)("inlineCode",{parentName:"p"},"section"),", and you can define how each section header should be rendered.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We render ",(0,r.kt)("inlineCode",{parentName:"p"},"section.type")," and add some simple styling."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n        <SectionList\n          sections={groupedPokemonList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.card}>\n                <Text style={styles.cardText}>{item}</Text>\n              </View>\n            )\n          }}\n          renderSectionHeader={({ section }) => {\n            return <Text style={styles.sectionHeaderText}>{section.type}</Text>\n          }}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n})\n")),(0,r.kt)("h3",{id:"styling-section-headers"},"Styling Section Headers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Define styles for section headers.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Styles include a white background color, font size 24, and font weight bold."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n        <SectionList\n          sections={groupedPokemonList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.card}>\n                <Text style={styles.cardText}>{item}</Text>\n              </View>\n            )\n          }}\n          renderSectionHeader={({ section }) => {\n            return <Text style={styles.sectionHeaderText}>{section.type}</Text>\n          }}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n  sectionHeaderText: {\n    backgroundColor: 'white',\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n})\n")),(0,r.kt)("h3",{id:"itemseparatorcomponent"},"ItemSeparatorComponent"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"SectionList")," component accepts many of the same props as ",(0,r.kt)("inlineCode",{parentName:"li"},"FlatList"),", including ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemSeparatorComponent"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n        <SectionList\n          sections={groupedPokemonList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.card}>\n                <Text style={styles.cardText}>{item}</Text>\n              </View>\n            )\n          }}\n          renderSectionHeader={({ section }) => {\n            return <Text style={styles.sectionHeaderText}>{section.type}</Text>\n          }}\n          ItemSeparatorComponent={() => <View style={{ height: 16 }} />}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n  sectionHeaderText: {\n    backgroundColor: 'white',\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n})\n")),(0,r.kt)("h3",{id:"sectionseparatorcomponent"},"SectionSeparatorComponent"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"and ",(0,r.kt)("inlineCode",{parentName:"li"},"SectionSeparatorComponents"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n        <SectionList\n          sections={groupedPokemonList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.card}>\n                <Text style={styles.cardText}>{item}</Text>\n              </View>\n            )\n          }}\n          renderSectionHeader={({ section }) => {\n            return <Text style={styles.sectionHeaderText}>{section.type}</Text>\n          }}\n          ItemSeparatorComponent={() => <View style={{ height: 16 }} />}\n          SectionSeparatorComponent={() => <View style={{ height: 16 }} />}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n  sectionHeaderText: {\n    backgroundColor: 'white',\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Be sure to return (",(0,r.kt)("inlineCode",{parentName:"li"},"() =>"),") the View component instead of directly assigning it to the ItemSeparator or SectionSeparator component.")),(0,r.kt)("h3",{id:"conclusion"},"Conclusion"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"With the SectionListComponent, we have learned how to render grouped data efficiently in React Native.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This concludes the section on lists in React Native, where we explored various list rendering methods, including the Map method, Scroll View component, FlatList component, and SectionListComponent."))))}d.isMDXComponent=!0}}]);