"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[6108],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),u=r,k=c["".concat(p,".").concat(u)]||c[u]||d[u]||o;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:51},i="Lists",l={unversionedId:"6 React Native Expo CLI/Section 7: How to render list/51 Lists",id:"6 React Native Expo CLI/Section 7: How to render list/51 Lists",title:"Lists",description:"=> Intro",source:"@site/docs/6 React Native Expo CLI/Section 7: How to render list/51 Lists.md",sourceDirName:"6 React Native Expo CLI/Section 7: How to render list",slug:"/6 React Native Expo CLI/Section 7: How to render list/51 Lists",permalink:"/fundamentals/6 React Native Expo CLI/Section 7: How to render list/51 Lists",draft:!1,tags:[],version:"current",sidebarPosition:51,frontMatter:{sidebar_position:51},sidebar:"tutorialSidebar",previous:{title:"Section 7: How to render list",permalink:"/fundamentals/category/section-7-how-to-render-list"},next:{title:"FlatList",permalink:"/fundamentals/6 React Native Expo CLI/Section 7: How to render list/52 FlatList"}},p={},s=[{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"Setting Up the Project:",id:"setting-up-the-project",level:3},{value:"Step 1: Creating Mock Data",id:"step-1-creating-mock-data",level:3},{value:"Step 2: Importing the Data",id:"step-2-importing-the-data",level:3},{value:"Step 3: Rendering the List",id:"step-3-rendering-the-list",level:3},{value:"Step 4: Making the List Scrollable",id:"step-4-making-the-list-scrollable",level:3},{value:"Step 5: Styling Improvements",id:"step-5-styling-improvements",level:3},{value:"1: Add Safe Area View",id:"1-add-safe-area-view",level:3},{value:"Add some styles",id:"add-some-styles",level:3},{value:"2: Add Styling to the ScrollView",id:"2-add-styling-to-the-scrollview",level:3},{value:"3: Create a card Style",id:"3-create-a-card-style",level:3},{value:"4: Create a Text Style",id:"4-create-a-text-style",level:3},{value:"Conclusion:",id:"conclusion",level:3}],m={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lists"},"Lists"),(0,r.kt)("blockquote",null),(0,r.kt)("h3",{id:"-intro"},(0,r.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Rendering lists is an essential aspect of mobile application development.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Whether it's a list of contacts, products, or any other collection of items, lists are a fundamental UI component.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In this seventh section of the course, we will explore how to render lists in React Native."))),(0,r.kt)("h3",{id:"setting-up-the-project"},"Setting Up the Project:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For this section on lists, I have created a new Expo project called ",(0,r.kt)("inlineCode",{parentName:"p"},"RNList"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can create a similar project using the command: ",(0,r.kt)("inlineCode",{parentName:"p"},"npx create-expo-app RNList")))),(0,r.kt)("h3",{id:"step-1-creating-mock-data"},"Step 1: Creating Mock Data"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We'll start by creating a mock data set that represents a list of Pok\xe9mon.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Each Pok\xe9mon will have properties like ID, type, and name.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"data.json")," within the project folder.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Copy and paste a list of 100 Pok\xe9mon into ",(0,r.kt)("inlineCode",{parentName:"p"},"data.json"),"."))),(0,r.kt)("h3",{id:"step-2-importing-the-data"},"Step 2: Importing the Data"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Import the Pok\xe9mon list from ",(0,r.kt)("inlineCode",{parentName:"li"},"data.json")," in your JavaScript file.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style='auto' />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n")),(0,r.kt)("h3",{id:"step-3-rendering-the-list"},"Step 3: Rendering the List"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To render the list, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," method.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Within the ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," container, use curly braces and ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," over the ",(0,r.kt)("inlineCode",{parentName:"p"},"PokemonList")," array."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"mport { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return <View style={styles.container}>{pokemonList.map()}</View>\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For each Pok\xe9mon, return a ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," component that renders the Pok\xe9mon type and name.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Remember to specify a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," prop for each item, in this case, use ",(0,r.kt)("inlineCode",{parentName:"p"},"Pokemon.id"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      {pokemonList.map(pokemon => {\n        return (\n          <View key={pokemon.id}>\n            <Text>{pokemon.typeList[0]}</Text>\n            <Text>{pokemon.name}</Text>\n          </View>\n        )\n      })}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n")),(0,r.kt)("h3",{id:"step-4-making-the-list-scrollable"},"Step 4: Making the List Scrollable"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," component is not scrollable.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To fix this, import the ",(0,r.kt)("inlineCode",{parentName:"p"},"ScrollView")," component from React Native.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Wrap your list with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ScrollView")," component to make it scrollable."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View, ScrollView } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <ScrollView>\n        {pokemonList.map(pokemon => {\n          return (\n            <View key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n")),(0,r.kt)("h3",{id:"step-5-styling-improvements"},"Step 5: Styling Improvements"),(0,r.kt)("h3",{id:"1-add-safe-area-view"},"1: Add Safe Area View"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Import ",(0,r.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," and replace the outermost ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," container with ",(0,r.kt)("inlineCode",{parentName:"p"},"SafeAreaView"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This adds top padding on iOS devices."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View, ScrollView, SafeAreaView } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView>\n        {pokemonList.map(pokemon => {\n          return (\n            <View key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To accommodate Android devices, import ",(0,r.kt)("inlineCode",{parentName:"li"},"StatusBar")," (from react native instead of Expo) and set ",(0,r.kt)("inlineCode",{parentName:"li"},"paddingTop")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"StatusBar.currentHeight"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView>\n        {pokemonList.map(pokemon => {\n          return (\n            <View key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: StatusBar.currentHeight,\n  },\n})\n")),(0,r.kt)("h3",{id:"add-some-styles"},"Add some styles"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"let's also change the background color to ",(0,r.kt)("inlineCode",{parentName:"p"},"#F5F5F5"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"and remove ",(0,r.kt)("inlineCode",{parentName:"p"},"alignItems")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"justifyContent")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView>\n        {pokemonList.map(pokemon => {\n          return (\n            <View key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n})\n")),(0,r.kt)("h3",{id:"2-add-styling-to-the-scrollview"},"2: Add Styling to the ScrollView"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a style for the ",(0,r.kt)("inlineCode",{parentName:"p"},"ScrollView")," by adding a ",(0,r.kt)("inlineCode",{parentName:"p"},"scrollView")," key to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Styles")," object and set a horizontal padding to 16.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Apply this style to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ScrollView")," component."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n})\n")),(0,r.kt)("h3",{id:"3-create-a-card-style"},"3: Create a card Style"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a style for each list item (card).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Set a white background color, padding, border radius, border width, and margin bottom.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Apply this style to the ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," component for each Pok\xe9mon."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n})\n")),(0,r.kt)("h3",{id:"4-create-a-text-style"},"4: Create a Text Style"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a style for the text content inside the card. so ",(0,r.kt)("inlineCode",{parentName:"p"},"cardText:"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Increase the font size for better readability.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Apply this style to both text components."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.typeList[0]}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,r.kt)("h3",{id:"conclusion"},"Conclusion:"),(0,r.kt)("p",null,"While our current code works fine, rendering lists using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ScrollView")," component and the ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," method is not the preferred technique. In the next video, we will explore why this is the case and learn about the recommended approach."))}d.isMDXComponent=!0}}]);