"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[6074],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>w});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=o.createContext({}),s=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(d.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=s(n),u=a,w=h["".concat(d,".").concat(u)]||h[u]||c[u]||r;return n?o.createElement(w,i(i({ref:t},p),{},{components:n})):o.createElement(w,i({ref:t},p))}));function w(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[h]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7845:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:23},i="Shadow and Elevation",l={unversionedId:"6 React Native/Section 3: Styling/23 Shadow and Elevation",id:"6 React Native/Section 3: Styling/23 Shadow and Elevation",title:"Shadow and Elevation",description:"- In the previous video, we learned about the differences in styling between web and React Native when it comes to some Box model properties.",source:"@site/docs/6 React Native/Section 3: Styling/23 Shadow and Elevation.md",sourceDirName:"6 React Native/Section 3: Styling",slug:"/6 React Native/Section 3: Styling/23 Shadow and Elevation",permalink:"/fundamentals/6 React Native/Section 3: Styling/23 Shadow and Elevation",draft:!1,tags:[],version:"current",sidebarPosition:23,frontMatter:{sidebar_position:23},sidebar:"tutorialSidebar",previous:{title:"Box Model",permalink:"/fundamentals/6 React Native/Section 3: Styling/22 Box Model"},next:{title:"Style Inheritance",permalink:"/fundamentals/6 React Native/Section 3: Styling/24 Style Inheritance"}},d={},s=[{value:"Box Shadows in CSS",id:"box-shadows-in-css",level:3},{value:"Box Shadows in React Native",id:"box-shadows-in-react-native",level:3},{value:"the elevation property",id:"the-elevation-property",level:3},{value:"shadowColor is the only property that works on both iOS and Android",id:"shadowcolor-is-the-only-property-that-works-on-both-ios-and-android",level:3},{value:"Conclusion",id:"conclusion",level:3}],p={toc:s},h="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"shadow-and-elevation"},"Shadow and Elevation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In the previous video, we learned about the differences in styling between web and React Native when it comes to some Box model properties.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We also understood the nuances of applying the Border radius property for iOS and Android."))),(0,a.kt)("h3",{id:"box-shadows-in-css"},"Box Shadows in CSS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Applying box shadows using CSS for the web is straightforward.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We specify the horizontal offset, vertical offset, blur, spread, and color."))),(0,a.kt)("h3",{id:"box-shadows-in-react-native"},"Box Shadows in React Native"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In React Native, we use a group of four properties.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Let's add a new key called ",(0,a.kt)("inlineCode",{parentName:"p"},"boxShadow")," to the Styles object and specify the different shadow properties.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The first property is ",(0,a.kt)("inlineCode",{parentName:"p"},"shadowColor")," , which determines the color of the box shadow. Let's set it to ",(0,a.kt)("inlineCode",{parentName:"p"},"#333333")," .")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The second property is ",(0,a.kt)("inlineCode",{parentName:"p"},"shadowOffset")," , which accepts an object containing width and height properties with numerical values. Let's set width to 6 and height to 6.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The third property is ",(0,a.kt)("inlineCode",{parentName:"p"},"shadowOpacity")," , which sets the transparency of the box shadow. Its value ranges from 0 to 1, with 0 representing complete transparency and 1 representing complete opacity. Let's set ",(0,a.kt)("inlineCode",{parentName:"p"},"shadowOpacity")," to 0.6 for our example.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The fourth property is ",(0,a.kt)("inlineCode",{parentName:"p"},"shadowRadius")," , which accepts a number to set the blur radius. A larger value creates a larger and lighter blur, making the shadow more prominent. Let's set it to 4.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Let's also change the box width and height to 250.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Next, we need to specify the box shadow in the Styles array for the light blue box."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <Text style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  boxShadow: {\n    shadowColor: '333333',\n    shadowOffset: { width: 6, height: 6 },\n    shadowOpacity: 0.6,\n    shadowRadius: 4,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"When we take a look at the iOS simulator, we can see that the box shadow is applied.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"However, if we take a look at Android, there is no box shadow."))),(0,a.kt)("h3",{id:"the-elevation-property"},"the elevation property"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"There are no common styles to apply shadows in both iOS and Android.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"To add box shadows in Android, we have to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"elevation")," property, which internally utilizes the Android elevation API.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Let's add a new key to our Styles object called ",(0,a.kt)("inlineCode",{parentName:"p"},"androidShadow")," with a property ",(0,a.kt)("inlineCode",{parentName:"p"},"elevation")," set to 10, and let's apply this to the light green box."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg, styles.androidShadow]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  boxShadow: {\n    shadowColor: '333333',\n    shadowOffset: { width: 6, height: 6 },\n    shadowOpacity: 0.6,\n    shadowRadius: 4,\n  },\n  androidShadow: {\n    elevation: 10,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When we view the Android device, we can see the shadow on the light green box.")),(0,a.kt)("h3",{id:"shadowcolor-is-the-only-property-that-works-on-both-ios-and-android"},"shadowColor is the only property that works on both iOS and Android"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"It's also worth mentioning that ",(0,a.kt)("inlineCode",{parentName:"p"},"shadowColor")," is the only property that works on both iOS and Android.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"As an exercise, I encourage you to change the shadow color to ",(0,a.kt)("inlineCode",{parentName:"p"},"blue")," and apply it to both iOS and Android. Let me know in the comment section if it works for you."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg, styles.androidShadow]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  boxShadow: {\n    shadowColor: 'blue',\n    shadowOffset: { width: 6, height: 6 },\n    shadowOpacity: 0.6,\n    shadowRadius: 4,\n  },\n  androidShadow: {\n    elevation: 20,\n    shadowColor: 'blue',\n  },\n})\n")),(0,a.kt)("h3",{id:"conclusion"},"Conclusion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Shadow properties do not work in Android, and you have to rely on the ",(0,a.kt)("inlineCode",{parentName:"p"},"elevation")," property.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"There are packages available that support cross-platform shadows, but that is not the topic we want to address right now."))))}c.isMDXComponent=!0}}]);