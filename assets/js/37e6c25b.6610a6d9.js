"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[8655],{3905:(e,r,a)=>{a.d(r,{Zo:()=>p,kt:()=>f});var t=a(7294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=t.createContext({}),c=function(e){var r=t.useContext(i),a=r;return e&&(a="function"==typeof e?e(r):s(s({},r),e)),a},p=function(e){var r=c(e.components);return t.createElement(i.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},y=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),y=n,f=u["".concat(i,".").concat(y)]||u[y]||d[y]||o;return a?t.createElement(f,s(s({ref:r},p),{},{components:a})):t.createElement(f,s({ref:r},p))}));function f(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=y;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[u]="string"==typeof e?e:n,s[1]=l;for(var c=2;c<o;c++)s[c]=a[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}y.displayName="MDXCreateElement"},6495:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=a(7462),n=(a(7294),a(3905));const o={sidebar_position:3},s="Nesting, concat, spread & Array Object Methods",l={unversionedId:"3 Javascript/arrays-and-objects-docs/array-nesting-concat-spread",id:"3 Javascript/arrays-and-objects-docs/array-nesting-concat-spread",title:"Nesting, concat, spread & Array Object Methods",description:"To get you more familiar with arrays, we are going to look at nesting, concatenation and the spread operator",source:"@site/docs/3 Javascript/02-arrays-and-objects-docs/03-array-nesting-concat-spread.md",sourceDirName:"3 Javascript/02-arrays-and-objects-docs",slug:"/3 Javascript/arrays-and-objects-docs/array-nesting-concat-spread",permalink:"/fundamentals/3 Javascript/arrays-and-objects-docs/array-nesting-concat-spread",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Array Methods",permalink:"/fundamentals/3 Javascript/arrays-and-objects-docs/array-methods"},next:{title:"Array Challenges",permalink:"/fundamentals/3 Javascript/arrays-and-objects-docs/array-challenges"}},i={},c=[{value:"Nesting arrays",id:"nesting-arrays",level:3},{value:"concat()",id:"concat",level:3},{value:"Spread operator (...)",id:"spread-operator-",level:3},{value:"Flatten an array",id:"flatten-an-array",level:3},{value:"Static properties on the Array object",id:"static-properties-on-the-array-object",level:3},{value:"Array.from()",id:"arrayfrom",level:3},{value:"Array.from",id:"arrayfrom-1",level:3},{value:"Array.of()",id:"arrayof",level:3}],p={toc:c},u="wrapper";function d(e){let{components:r,...a}=e;return(0,n.kt)(u,(0,t.Z)({},p,a,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"nesting-concat-spread--array-object-methods"},"Nesting, concat, spread & Array Object Methods"),(0,n.kt)("p",null,"To get you more familiar with arrays, we are going to look at nesting, concatenation and the spread operator"),(0,n.kt)("p",null,"Let's create our fruit array again"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const fruits = ['apple', 'pear', 'orange']\n")),(0,n.kt)("p",null,'and let\'s create a "berries" array'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const berries = ['strawberry', 'blueberry', 'rasberry']\n")),(0,n.kt)("h3",{id:"nesting-arrays"},"Nesting arrays"),(0,n.kt)("p",null,"Now let's nest the berries array inside the fruit array"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"fruits.push(berries) // ['apples', 'oranges', 'pears', ['strawberries', 'blueberries', 'raspberries']]\n")),(0,n.kt)("p",null,"Now if we want to access blueberries for example, we can do so"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"fruits[3][1] // blueberries\n")),(0,n.kt)("p",null,"We could also create a new variable and nest both arrays:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const allFruits = [fruits, berries];\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"allFruits[1][1] // blueberries\n")),(0,n.kt)("h3",{id:"concat"},"concat()"),(0,n.kt)("p",null,"We may not want to nest arrays, but we can concatenate them together into the same array using ",(0,n.kt)("inlineCode",{parentName:"p"},"concat()"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const newArr = fruits.concat(berries) // ['apples', 'oranges', 'pears', 'strawberries', 'blueberries', 'raspberries']\n")),(0,n.kt)("p",null,"So now we have a single array with all of the values of both arrays. There is no nesting going on."),(0,n.kt)("h3",{id:"spread-operator-"},"Spread operator (...)"),(0,n.kt)("p",null,"The spread operator is a very useful operator that allows us to spread out an array into another array. We can use it to achieve the same type of stuff that concat() does. The spread operator also works with object literals, which we will talk about very soon."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const newArr2 = [...fruits, ...berries] // ['apples', 'oranges', 'pears', 'strawberries', 'blueberries', 'raspberries']\n")),(0,n.kt)("h3",{id:"flatten-an-array"},"Flatten an array"),(0,n.kt)("p",null,"You can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"flat()")," method to flatten an array. It takes in a parameter for the depth. If you don't want a limit to the depth, you could use ",(0,n.kt)("inlineCode",{parentName:"p"},"Infinity"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const arr = [1, 2, [3, 4, 5], 6, [7, 8, [9, 10, [11, 12]]]]\nx = arr.flat(Infinity)\n")),(0,n.kt)("h3",{id:"static-properties-on-the-array-object"},"Static properties on the Array object"),(0,n.kt)("p",null,"The Array object in JavaScript actually has some helpful methods directly associated with it that we can use."),(0,n.kt)("h3",{id:"arrayfrom"},"Array.from()"),(0,n.kt)("p",null,"Check if something is an array."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"Array.isArray(fruits) // true\nArray.isArray('Hello') // false\n")),(0,n.kt)("h3",{id:"arrayfrom-1"},"Array.from"),(0,n.kt)("p",null,"Convert an array-like object into an array."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"Array.from('12345') // ['1', '2', '3', '4', '5']\n")),(0,n.kt)("h3",{id:"arrayof"},"Array.of()"),(0,n.kt)("p",null,"Create an array from a variable number of arguments."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const a = 1\nconst b = 2\nconst c = 3\ny = Array.of(a, b, c) // [1, 2, 3]\n")))}d.isMDXComponent=!0}}]);