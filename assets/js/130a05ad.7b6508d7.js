"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[9758],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,k=c["".concat(l,".").concat(h)]||c[h]||u[h]||o;return n?a.createElement(k,s(s({ref:t},m),{},{components:n})):a.createElement(k,s({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:13},s="State",i={unversionedId:"4 React 18/13 state",id:"4 React 18/13 state",title:"State",description:"props vs state",source:"@site/docs/4 React 18/13 state.md",sourceDirName:"4 React 18",slug:"/4 React 18/13 state",permalink:"/fundamentals/4 React 18/13 state",draft:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Props",permalink:"/fundamentals/4 React 18/12 props"},next:{title:"Hooks",permalink:"/fundamentals/4 React 18/14 Hooks at a glance"}},l={},p=[{value:"props vs state",id:"props-vs-state",level:3},{value:"useState hook",id:"usestate-hook",level:3},{value:"let&#39;s look at an example of how state works in the component",id:"lets-look-at-an-example-of-how-state-works-in-the-component",level:3},{value:"now here is our new requirement",id:"now-here-is-our-new-requirement",level:3},{value:"<code>let&#39;s create a button and on click of that button change the message</code>",id:"lets-create-a-button-and-on-click-of-that-button-change-the-message",level:3}],m={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"state"},"State"),(0,r.kt)("h3",{id:"props-vs-state"},"props vs state"),(0,r.kt)("p",null,"  now we have seen that every react\ncomponent returns jsx which describes the user interface"),(0,r.kt)("p",null,"  and a minute ago we have seen that it is possible to influence what is rendered\non the screen using props"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"as it turns out there is a second way to influence what is rendered on the screen and that is the state of the component"),(0,r.kt)("p",{parentName:"li"},"let's quickly review what we have learned about props and make a comparison by learning about state"),(0,r.kt)("p",{parentName:"li"},"after that let's dive into an example to get a better understanding of how state\nworks in react components"),(0,r.kt)("p",{parentName:"li"},"let's take a look at the comparison"))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"the first one is that ",(0,r.kt)("inlineCode",{parentName:"li"},"props get passed to the component")," whereas ",(0,r.kt)("inlineCode",{parentName:"li"},"state is managed within the component"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"analogy for this would be ",(0,r.kt)("inlineCode",{parentName:"li"},"function parameters")," against ",(0,r.kt)("inlineCode",{parentName:"li"},"variables declared within the function body"))),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"because a parent usually passes down the props to the child component ",(0,r.kt)("inlineCode",{parentName:"li"},"props are immutable"),", the parent owns the props and cannot be changed by the children components")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"state on the other hand is managed within the component and hence ",(0,r.kt)("inlineCode",{parentName:"li"},"the component has full control to change the state"))),(0,r.kt)("h3",{id:"usestate-hook"},"useState hook"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"now props are accessed using the ",(0,r.kt)("inlineCode",{parentName:"li"},"props parameter")," on the function component, however state is managed a little different, the simplest way to manage state is using a function that the react library provides which is the useState function also referred to as ",(0,r.kt)("inlineCode",{parentName:"li"},"useState hook"))),(0,r.kt)("h3",{id:"lets-look-at-an-example-of-how-state-works-in-the-component"},"let's look at an example of how state works in the component"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"within the components folder i'm going to create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"Message.js"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"within the file i'm going to create a function component"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"let me copy paste the code from Greet.js and make the necessary modifications")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"i'm going to change the function name to Message")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the jsx we return the text ",(0,r.kt)("inlineCode",{parentName:"p"},"Greet visitor")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"export const Message = (props) => {\n  return <h1>Welcome Visitor</h1>\n}\n")))),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"let me import the component in App.js"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport { Greet } from './components/Greet'\nimport { Message } from './components/Message'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Greet name='Bruce' heroName='Batman' />\n      <Greet name='Clark' heroName='Superman'>\n        <button>Action</button>\n      </Greet>\n      <Greet name='Diana' heroName='Wonder Woman'>\n        <p>This is children props</p>\n      </Greet>\n    </div>\n  )\n}\n\nexport default App\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"comment out rest of the components and include the message component"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\n// import { Greet } from './components/Greet'\nimport { Message } from './components/Message'\n\nfunction App() {\n  return (\n    <div className='App'>\n      // <Greet name='Bruce' heroName='Batman' />\n      // <Greet name='Clark' heroName='Superman'>\n        // <button>Action</button>\n        //{' '}\n      </Greet>\n      //{' '}\n      <Greet name='Diana' heroName='Wonder Woman'>\n        // <p>This is children props</p>\n        // //{' '}\n      </Greet>\n      <Message />\n    </div>\n  )\n}\n\nexport default App\n")),(0,r.kt)("p",{parentName:"li"},"if we take a look at the browser you should see the text welcome visitor"))),(0,r.kt)("h3",{id:"now-here-is-our-new-requirement"},"now here is our new requirement"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"we need to have a subscribe button right below the text")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"when we click on the button the text being displayed should change from welcome visitor to thank you for subscribing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"now if the text message were to be sent from app.js as a prop it would not work as props are immutable, once the message is set to welcome visitor it can never be changed from the message component"),(0,r.kt)("p",{parentName:"li"},"-",(0,r.kt)("inlineCode",{parentName:"p"},"so the solution is to use component state"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"let's see what are the steps involved"))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"step one is to ",(0,r.kt)("inlineCode",{parentName:"li"},"import the use state function")," from react,")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"so at the top import use state from react"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const Message = (props) => {\n  return <h1>Welcome Visitor</h1>\n}\n")))),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"step two invoke useState within the component,")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"so ",(0,r.kt)("inlineCode",{parentName:"p"},"useState()")," with parentheses"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const Message = (props) => {\n  useState()\n  return <h1>Welcome Visitor</h1>\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},". now this function ",(0,r.kt)("inlineCode",{parentName:"p"},"returns two values")," which we can store in two constants of an array")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"const array message comma set message"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const Message = (props) => {\n  const [message, setMessage] = useState()\n  return <h1>Welcome Visitor</h1>\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the syntax is called ",(0,r.kt)("inlineCode",{parentName:"p"},"array destructuring")," in case you want to look it up for better understanding"),(0,r.kt)("p",{parentName:"li"},"here ",(0,r.kt)("inlineCode",{parentName:"p"},"message is a simple variable")," we can call it anything but message\nmakes sense in this example"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setMessage is a function that can be used to update the message variable"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},". now useState also accepts an initial value as its argument this is going to be ",(0,r.kt)("inlineCode",{parentName:"p"},"welcome visitor")," to begin with"))),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"step 3, instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"<h1>welcome visitor</h1>")," we bind the state value in the jsx, ",(0,r.kt)("inlineCode",{parentName:"p"},"<h1>{message}</h1>")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const Message = (props) => {\n  const [message, setMessage] = useState('Welcome visitor')\n  return <h1>{message}</h1>\n}\n")),(0,r.kt)("p",{parentName:"li"},"if we take a look at the browser we see no change in the ui"),(0,r.kt)("p",{parentName:"li"},"however since we are using state to render the message we now have the ability to change the\nmessage"),(0,r.kt)("p",{parentName:"li"},"so"))),(0,r.kt)("h3",{id:"lets-create-a-button-and-on-click-of-that-button-change-the-message"},(0,r.kt)("inlineCode",{parentName:"h3"},"let's create a button and on click of that button change the message")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"for step 4 add an html button element"),(0,r.kt)("p",{parentName:"li"},"before we do that ",(0,r.kt)("inlineCode",{parentName:"p"},"create an enclosing div tag")," and then below the h1 tag ",(0,r.kt)("inlineCode",{parentName:"p"},"add a button")," with text subscribe"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const Message = (props) => {\n  const [message, setMessage] = useState('Welcome Visitor')\n  return (\n    <div>\n      <h1>{message}</h1>\n      <button>Subscribe</button>\n    </div>\n  )\n}\n")),(0,r.kt)("p",{parentName:"li"},"let's quickly take a look at the browser and see if it works"),(0,r.kt)("p",{parentName:"li"},"the button is now placed right below the message")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"the fifth and final step is to listen to the click event on this button and change the message"),(0,r.kt)("p",{parentName:"li"},"(we will take a detailed look at event handling in a few minutes but this will be a glimpse into how a click event on an element is handled)"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"on the button we add the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," attribute"),(0,r.kt)("p",{parentName:"li"},"(very important that it is camel cased)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"to this event we assign a handler and this again is going to be within ",(0,r.kt)("inlineCode",{parentName:"p"},"curly braces")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const Message = (props) => {\n  const [message, setMessage] = useState('Welcome Visitor')\n  return (\n    <div>\n      <h1>{message}</h1>\n      <button onClick={}>Subscribe</button>\n    </div>\n  )\n}\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"here we're going to have ",(0,r.kt)("inlineCode",{parentName:"p"},"an arrow function")," in the function body we ",(0,r.kt)("inlineCode",{parentName:"p"},"call the setMessage function")," returned from useState"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const Message = (props) => {\n  const [message, setMessage] = useState('Welcome Visitor')\n  return (\n    <div>\n      <h1>{message}</h1>\n      <button onClick={() => setMessage()}>Subscribe</button>\n    </div>\n  )\n}\n")),(0,r.kt)("p",{parentName:"li"},"to this setMessage function ",(0,r.kt)("inlineCode",{parentName:"p"},"we can pass in a value")," and react will update the message variable with that value let's pass in thank you for subscribing"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react'\n\nexport const Message = (props) => {\n  const [message, setMessage] = useState('Welcome Visitor')\n  return (\n    <div>\n      <h1>{message}</h1>\n      <button onClick={() => setMessage('Thank you for subscribing!')}>Subscribe</button>\n    </div>\n  )\n}\n")),(0,r.kt)("p",{parentName:"li"},'if we save the file and take a look at the browser you should see the text "welcome visitor" and when i click on the subscribe button the text changes to "thank you for subscribing"'),(0,r.kt)("p",{parentName:"li"},"this example demonstrates what exactly state is in react")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"a state is nothing but a variable that is maintained inside a component")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"unlike props state can be changed within the component")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"whenever the state changes react will automatically update the ui to reflect the updated state value"),(0,r.kt)("p",{parentName:"li"},"i hope you now have a slightly better understanding of props state and how they're used in react"))))}u.isMDXComponent=!0}}]);