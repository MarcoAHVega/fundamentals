"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[7586],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2305:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:8},l="Ternary operator",s={unversionedId:"3 Javascript/logic-control-scope-docs/ternary-operator",id:"3 Javascript/logic-control-scope-docs/ternary-operator",title:"Ternary operator",description:"In addition to if-else and switch, there is a third way to write conditional logic. This is called the ternary operator. It is basically a shorthand, one line if-else statement. The actual operator is just a question mark. Let's take a look at the syntax",source:"@site/docs/3 Javascript/04-logic-control-scope-docs/08-ternary-operator.md",sourceDirName:"3 Javascript/04-logic-control-scope-docs",slug:"/3 Javascript/logic-control-scope-docs/ternary-operator",permalink:"/fundamentals/3 Javascript/logic-control-scope-docs/ternary-operator",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Logical Assignment",permalink:"/fundamentals/3 Javascript/logic-control-scope-docs/logical-assignment"},next:{title:"Section 5: Loops, Iteration & High Order Array Methods",permalink:"/fundamentals/category/section-5-loops-iteration--high-order-array-methods"}},i={},c=[{value:"Assigning result to a variable",id:"assigning-result-to-a-variable",level:3},{value:"Multiple statements",id:"multiple-statements",level:3},{value:"Multiple Ternary Operators",id:"multiple-ternary-operators",level:3},{value:"Using <code>&amp;&amp;</code> as a shorthand",id:"using--as-a-shorthand",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ternary-operator"},"Ternary operator"),(0,o.kt)("p",null,"In addition to ",(0,o.kt)("inlineCode",{parentName:"p"},"if-else")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"switch"),", there is a third way to write conditional logic. This is called the ",(0,o.kt)("inlineCode",{parentName:"p"},"ternary")," operator. It is basically a shorthand, one line ",(0,o.kt)("inlineCode",{parentName:"p"},"if-else")," statement. The actual operator is just a question mark. Let's take a look at the syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"condition ? true : false\n")),(0,o.kt)("p",null,"First, we have the condition to be evaluated as a boolean. Then we have a ",(0,o.kt)("inlineCode",{parentName:"p"},"?"),", which is the ",(0,o.kt)("strong",{parentName:"p"},"ternary operator")," and after that is the expression that we want to happen if the condition is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},":")," is the else. So the expression after that will execute if the condition is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("p",null,"Let's look at a simple if-else statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const age = 19\n\nif (age >= 18) {\n  console.log('You can vote!')\n} else {\n  console.log('You can not vote!')\n}\n\n// You can vote!\n")),(0,o.kt)("p",null,"We can do the same thing using the ternary operator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"age >= 18 ? console.log('You can vote!') : console.log('You can not vote!')\n\n// You can vote!\n")),(0,o.kt)("h3",{id:"assigning-result-to-a-variable"},"Assigning result to a variable"),(0,o.kt)("p",null,"In many cases, we want to store the result of the ternary operator in a variable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const canVote = age >= 18 ? 'You can vote!' : 'You can not vote!'\n\nconsole.log(canVote) // You can vote!\n")),(0,o.kt)("p",null,"This is much more compact than this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let canVote\n\nif (age >= 18) {\n  canVote = 'You can vote!'\n} else {\n  canVote = 'You can not vote!'\n}\n\nconsole.log(canVote) // You can vote!\n")),(0,o.kt)("h3",{id:"multiple-statements"},"Multiple statements"),(0,o.kt)("p",null,"In most cases, you will just have a single expression in the true/false part of the ternary operator, however you can have Multiple statements by using a comma."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const auth = true\n\nconst redirect = auth\n  ? (alert('Welcome To The Dashboard'), '/dashboard')\n  : (alert('Access Denied'), '/login')\n\nconsole.log(redirect)\n")),(0,o.kt)("p",null,"In the case above, it will alert and then return the last value in the ternary."),(0,o.kt)("h3",{id:"multiple-ternary-operators"},"Multiple Ternary Operators"),(0,o.kt)("p",null,"We can also have multiple ternary operators and conditions. Much like an else-if."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const canDrink =\n  age >= 21 ? 'You can drink!' : age >= 18 ? 'You can have 1 beer' : 'You can not drink'\n\nconsole.log(canDrink)\n")),(0,o.kt)("h3",{id:"using--as-a-shorthand"},"Using ",(0,o.kt)("inlineCode",{parentName:"h3"},"&&")," as a shorthand"),(0,o.kt)("p",null,"If your else(semi-colon) in a ternary is going to be null or you don't need an else, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"&&")," operator instead. Here is an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"auth ? console.log('Welcome to the dashboard') : null\n")),(0,o.kt)("p",null,"We could just do:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"auth && console.log('Welcome to the dashboard')\n")),(0,o.kt)("p",null,"This is the same as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"if (auth) {\n  console.log('Welcome to the dashboard')\n}\n")),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"&&")," operator as a shorthand is a popular thing to do in React templates. Many times, you will see something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  !loading && <Fragment>Some UI</Fragment>\n}\n")),(0,o.kt)("p",null,"Which is saying if done loading, then load the JSX fragment."))}d.isMDXComponent=!0}}]);