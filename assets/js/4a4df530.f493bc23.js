"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[8307],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},659:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const i={sidebar_position:1},r="For Loop",l={unversionedId:"3 Javascript/iteration-array-methods-docs/for-loop",id:"3 Javascript/iteration-array-methods-docs/for-loop",title:"For Loop",description:"A loop is a control structure. It provides a way to do iteration in programming. Iteration is a process where you repeat something over and over again until a certain condition is or is met. This can help automate tasks.",source:"@site/docs/3 Javascript/05-iteration-array-methods-docs/01-for-loop.md",sourceDirName:"3 Javascript/05-iteration-array-methods-docs",slug:"/3 Javascript/iteration-array-methods-docs/for-loop",permalink:"/fundamentals/3 Javascript/iteration-array-methods-docs/for-loop",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Section 5: Loops, Iteration & High Order Array Methods",permalink:"/fundamentals/category/section-5-loops-iteration--high-order-array-methods"},next:{title:"Break & Continue",permalink:"/fundamentals/3 Javascript/iteration-array-methods-docs/break-and-continue"}},s={},p=[{value:"For Loop Syntax",id:"for-loop-syntax",level:3},{value:"Block scope",id:"block-scope",level:3},{value:"Testing Conditions",id:"testing-conditions",level:3},{value:"Nested For Loops",id:"nested-for-loops",level:3},{value:"Looping Over Arrays",id:"looping-over-arrays",level:3},{value:"Infinite Loops",id:"infinite-loops",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"for-loop"},"For Loop"),(0,a.kt)("p",null,"A loop is a ",(0,a.kt)("strong",{parentName:"p"},"control structure"),". It provides a way to do ",(0,a.kt)("inlineCode",{parentName:"p"},"iteration")," in programming. Iteration is a process where you repeat something over and over again until a certain condition is or is met. This can help automate tasks."),(0,a.kt)("p",null,"There are many different kinds of loops in programming, and one of the most common loop is the ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," loop."),(0,a.kt)("h3",{id:"for-loop-syntax"},"For Loop Syntax"),(0,a.kt)("p",null,"The syntax for a ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," loop is very similar in many languages. The syntax is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for ([initialExpression]; [conditionExpression]; [incrementExpression]) statement\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("strong",{parentName:"li"},"initial expression")," usually initializes a variable/counter"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("strong",{parentName:"li"},"condition expression")," is the condition that the loop will continue to run a long as it is met or until the condition is false"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("strong",{parentName:"li"},"increment expression")," is the expression that will be executed after each iteration of the loop"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("strong",{parentName:"li"},"statement")," is the code that will be executed each time the loop is run. To execute a ",(0,a.kt)("inlineCode",{parentName:"li"},"block")," of code, use the ",(0,a.kt)("inlineCode",{parentName:"li"},"{}")," syntax")),(0,a.kt)("p",null,"It is important to not that we use semi-colons to separate the different parts of the loop and not commas."),(0,a.kt)("p",null,'Here is a very simple example of a for loop that will print out the string "Number X" where X is the number of the iteration.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 1; i <= 10; i++) {\n  console.log('Number ' + i)\n}\n\n// Output:\n// Number 1\n// Number 2\n// Number 3\n// Number 4\n// Number 5\n// Number 6\n// Number 7\n// Number 8\n// Number 9\n// Number 10\n")),(0,a.kt)("p",null,"The variable ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," is initialized to 1, and the condition is that the loop will continue to run until the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," is greater than 10. The increment expression is that the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," will be incremented by 1 each time the loop is run."),(0,a.kt)("p",null,"We could change the initial expression to 5 and it will start from 5 instead of 1."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 5; i <= 10; i++) {\n  console.log('Number ' + i)\n}\n\n// Output:\n// Number 5\n// Number 6\n// Number 7\n// Number 8\n// Number 9\n// Number 10\n")),(0,a.kt)("p",null,"If I wanted to count up to 100 by 5s, I could change the initial expression to 0 and the increment expression to 5."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i <= 100; i += 5) {\n  console.log('Number ' + i)\n}\n\n// Output:\n// Number 0\n// Number 5\n// Number 10\n// Number 15\n// ...\n// Number 100\n")),(0,a.kt)("h3",{id:"block-scope"},"Block scope"),(0,a.kt)("p",null,"Loops are considered a ",(0,a.kt)("inlineCode",{parentName:"p"},"block"),", just like if statements. Remember that variables using ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"const")," are scoped to the block they are defined in. So if we define a variable in a loop, we can not access it outside of the loop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i <= 100; i += 5) {\n  const message = 'Number ' + i\n  console.log(message)\n}\n\nconsole.log(message) // ReferenceError: message is not defined\n")),(0,a.kt)("p",null,"However, if we use ",(0,a.kt)("inlineCode",{parentName:"p"},"var"),", we can access the variable outside of the loop. This is not a good practice, but it is possible."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i <= 100; i += 5) {\n  var message = 'Number ' + i\n  console.log(message)\n}\n\nconsole.log(message) // Number 100\n")),(0,a.kt)("h3",{id:"testing-conditions"},"Testing Conditions"),(0,a.kt)("p",null,"In many cases, you will be testing for a condition in a loop. Let's look at a simple example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i <= 10; i++) {\n  if (i === 7) {\n    console.log('7 is my favorite number')\n  }\n\n  console.log('Number ' + i)\n}\n")),(0,a.kt)("p",null,"In the code above, we are testing the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"i"),' to see if it is equal to 7. If it is, we will log the message "7 is my favorite number".'),(0,a.kt)("p",null,"In the next video I will go over skipping an iteration and breaking out of a loop if a certain condition is true."),(0,a.kt)("h3",{id:"nested-for-loops"},"Nested For Loops"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"i")," is a common variable name for a loop counter. Sometimes you will have a loop within a loop. In that case, you need to use a different variable name for each loop. ",(0,a.kt)("inlineCode",{parentName:"p"},"j")," is a common variable name for a nested loop counter."),(0,a.kt)("p",null,"Here is an example where we loop through 1-10 and then have another loop in each iteration that shows that number multiplied by 1 - 10."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 1; i <= 10; i++) {\n  console.log('Number ' + i)\n  for (let j = 1; j <= 10; j++) {\n    console.log(i + ' * ' + j + ' = ' + i * j)\n  }\n}\n")),(0,a.kt)("h3",{id:"looping-over-arrays"},"Looping Over Arrays"),(0,a.kt)("p",null,"Arrays have a ",(0,a.kt)("inlineCode",{parentName:"p"},"forEach()")," method that allows you to loop over them. This is the most common way to loop over an array and we will be looking at ",(0,a.kt)("inlineCode",{parentName:"p"},"forEach()")," and other array methods soon, however I do want to show you that we can loop over an array with a ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," loop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const names = ['Brad', 'Sam', 'Sara', 'John', 'Tim']\n\nfor (let i = 0; i < names.length; i++) {\n  console.log(names[i])\n}\n")),(0,a.kt)("p",null,"We simply specify the condition expression as long as ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," is less than the length of the array."),(0,a.kt)("p",null,"If you wanted to find a specific iteration and index, you could do something like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i < names.length; i++) {\n  if (i === 2) {\n    console.log(names[i] + ' is the best')\n  } else {\n    console.log(names[i])\n  }\n}\n")),(0,a.kt)("h3",{id:"infinite-loops"},"Infinite Loops"),(0,a.kt)("p",null,"Infinite loops are something that you will probably run into at one point or another. They are loops that will never stop running. One common cause of this is forgetting to increment the counter. Then the condition is always met. This happens more with while loops, because of the way they are formatted."),(0,a.kt)("p",null,"To purposely create an infinite ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," loop, we could do this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i < Infinity; i++) {\n  console.log('Number ' + i)\n}\n")))}m.isMDXComponent=!0}}]);