"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[4198],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),s=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(i.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(t),f=a,b=u["".concat(i,".").concat(f)]||u[f]||d[f]||l;return t?o.createElement(b,r(r({ref:n},p),{},{components:t})):o.createElement(b,r({ref:n},p))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=f;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[u]="string"==typeof e?e:a,r[1]=c;for(var s=2;s<l;s++)r[s]=t[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},3131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>s});var o=t(7462),a=(t(7294),t(3905));const l={sidebar_position:3},r="Global & Function Scope",c={unversionedId:"3 Javascript/functions-scope-docs/global-function-scope",id:"3 Javascript/functions-scope-docs/global-function-scope",title:"Global & Function Scope",description:"Scope is an important concept, not only in JavaScript, but in many other programming languages. Scope is the current area or context of a specific piece of code. There are certain rules for what is accessible in specific scopes.",source:"@site/docs/3 Javascript/03-functions-scope-docs/03-global-function-scope.md",sourceDirName:"3 Javascript/03-functions-scope-docs",slug:"/3 Javascript/functions-scope-docs/global-function-scope",permalink:"/fundamentals/3 Javascript/functions-scope-docs/global-function-scope",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"More on Params & Arguments",permalink:"/fundamentals/3 Javascript/functions-scope-docs/function-arguments"},next:{title:"Block Scope",permalink:"/fundamentals/3 Javascript/functions-scope-docs/block-scope"}},i={},s=[{value:"Global Scope",id:"global-scope",level:3},{value:"The <code>window</code> object",id:"the-window-object",level:3},{value:"Creating globally scoped variables",id:"creating-globally-scoped-variables",level:3},{value:"Function Scope",id:"function-scope",level:3},{value:"Local Scope",id:"local-scope",level:3}],p={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"global--function-scope"},"Global & Function Scope"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Scope")," is an important concept, not only in JavaScript, but in many other programming languages. Scope is the current area or context of a specific piece of code. There are certain rules for what is accessible in specific scopes."),(0,a.kt)("h3",{id:"global-scope"},"Global Scope"),(0,a.kt)("p",null,"In JavaScript, when we write code in the ",(0,a.kt)("inlineCode",{parentName:"p"},"global scope")," it is available everywhere, including functions. If we are NOT inside of a function or any kind of block, such as an if statement or a loop, then we are in the ",(0,a.kt)("inlineCode",{parentName:"p"},"global scope"),"."),(0,a.kt)("h3",{id:"the-window-object"},"The ",(0,a.kt)("inlineCode",{parentName:"h3"},"window")," object"),(0,a.kt)("p",null,"The browser creates a global object called ",(0,a.kt)("inlineCode",{parentName:"p"},"window"),". This object has a ton of methods and properties on it that are available to us that we'll be looking at later on in the course."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"alert")," method belongs to the window object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"window.alert('Hello World')\n")),(0,a.kt)("p",null,"Since the window object is the most top-level object in the browser environment, we don't need to use ",(0,a.kt)("strong",{parentName:"p"},"window")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"alert('Hello World')\n")),(0,a.kt)("p",null,"There is an ",(0,a.kt)("inlineCode",{parentName:"p"},"innerWidth")," property on the window object. We could use that anywhere as well"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"console.log(window.innerWidth)\n")),(0,a.kt)("p",null,"We can use it in a function as well because it is global"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function run() {\n  console.log(window.innerWidth)\n}\n")),(0,a.kt)("h3",{id:"creating-globally-scoped-variables"},"Creating globally scoped variables"),(0,a.kt)("p",null,"If I simply create a variable at the top of a JavaScript file, this is a global variable in the global scope and I can access it anywhere."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const x = 100\nconsole.log(x) // 100\n")),(0,a.kt)("p",null,"If we try to access x in the ",(0,a.kt)("inlineCode",{parentName:"p"},"run()")," function, we can because it's global."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function run() {\n  console.log(x) // 100\n}\n")),(0,a.kt)("h3",{id:"function-scope"},"Function Scope"),(0,a.kt)("p",null,"Function scope is the scope that is available to all code inside of a function. Any variables we define here will be available only inside of the function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function add() {\n  const y = 50\n}\n\nconsole.log(y) // ReferenceError: y is not defined\n")),(0,a.kt)("p",null,"Since ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," is global, I could use that in the ",(0,a.kt)("inlineCode",{parentName:"p"},"add()")," function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function add() {\n  const y = 50\n  console.log(x + y) // 150\n}\n")),(0,a.kt)("p",null,"If I create a variable called ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," in the function, it will overwrite the global variable and I can no longer access it. This is called ",(0,a.kt)("strong",{parentName:"p"},"variable shadowing"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function add() {\n  const x = 1\n  const y = 50\n  console.log(x + y) // 51\n}\n")),(0,a.kt)("h3",{id:"local-scope"},"Local Scope"),(0,a.kt)("p",null,"Whatever scope we are currently working in or talking about is called the ",(0,a.kt)("inlineCode",{parentName:"p"},"local scope"),"."))}d.isMDXComponent=!0}}]);