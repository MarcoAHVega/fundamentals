"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[7288],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),y=a,u=m["".concat(p,".").concat(y)]||m[y]||d[y]||o;return n?r.createElement(u,i(i({ref:t},c),{},{components:n})):r.createElement(u,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=y;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},672:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:54},i="listEmpty",l={unversionedId:"6 React Native Expo CLI/Section 7: How to render list/54 ListEmpty",id:"6 React Native Expo CLI/Section 7: How to render list/54 ListEmpty",title:"listEmpty",description:"=> Intro",source:"@site/docs/6 React Native Expo CLI/Section 7: How to render list/54 ListEmpty.md",sourceDirName:"6 React Native Expo CLI/Section 7: How to render list",slug:"/6 React Native Expo CLI/Section 7: How to render list/54 ListEmpty",permalink:"/fundamentals/6 React Native Expo CLI/Section 7: How to render list/54 ListEmpty",draft:!1,tags:[],version:"current",sidebarPosition:54,frontMatter:{sidebar_position:54},sidebar:"tutorialSidebar",previous:{title:"ItemSeparator",permalink:"/fundamentals/6 React Native Expo CLI/Section 7: How to render list/53 ItemSeparator"},next:{title:"List Header and Footer",permalink:"/fundamentals/6 React Native Expo CLI/Section 7: How to render list/55 List Header and Footer"}},p={},s=[{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3}],c={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"listempty"},"listEmpty"),(0,a.kt)("blockquote",null),(0,a.kt)("h3",{id:"-intro"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The next prop we will explore is the ",(0,a.kt)("inlineCode",{parentName:"p"},"listEmptyComponent"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"This prop accepts a React component and renders it when the list is empty."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Let's specify a simple ",(0,a.kt)("inlineCode",{parentName:"p"},"Text")," component: ",(0,a.kt)("inlineCode",{parentName:"p"},'"No items found."'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If we now specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," prop as an empty array (",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),") and take a look at the UI,"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        <FlatList\n          data={[]}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={<Text>No items found</Text>}\n          // horizontal={true}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"we can see the text ",(0,a.kt)("inlineCode",{parentName:"p"},'"No items found."'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The text is the component assigned to the ",(0,a.kt)("inlineCode",{parentName:"p"},"list empty component")," prop.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We have already covered styling and layout, so I won't dive into making this component look pretty.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"I will leave that to you as a practice exercise.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Try increasing the font size and centering this text in the UI."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        <FlatList\n          data={[]}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n           ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          }\n          // horizontal={true}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Let me know how it goes in the comment section.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"As you can see, the ",(0,a.kt)("inlineCode",{parentName:"p"},"list empty component")," prop is straightforward and incredibly useful, especially when you fetch data from an API, and the data might be empty.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Instead of handling the logic yourself, you can use this prop to manage empty states efficiently."))))}d.isMDXComponent=!0}}]);