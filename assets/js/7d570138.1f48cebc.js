"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[3764],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(t),c=a,g=p["".concat(l,".").concat(c)]||p[c]||m[c]||o;return t?r.createElement(g,s(s({ref:n},u),{},{components:t})):r.createElement(g,s({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=c;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var d=2;d<o;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7712:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:64},s="Form Validation",i={unversionedId:"6 React Native Expo CLI/Section 8: Inputs and Forms/64 Form Validation",id:"6 React Native Expo CLI/Section 8: Inputs and Forms/64 Form Validation",title:"Form Validation",description:"Form Validation",source:"@site/docs/6 React Native Expo CLI/Section 8: Inputs and Forms/64 Form Validation.md",sourceDirName:"6 React Native Expo CLI/Section 8: Inputs and Forms",slug:"/6 React Native Expo CLI/Section 8: Inputs and Forms/64 Form Validation",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/64 Form Validation",draft:!1,tags:[],version:"current",sidebarPosition:64,frontMatter:{sidebar_position:64},sidebar:"tutorialSidebar",previous:{title:"KeyboardAvoidingView",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/63 KeyboardAvoidingView"},next:{title:"REACT PROJECTS",permalink:"/fundamentals/category/react-projects"}},l={},d=[{value:"<strong>Form Validation</strong>",id:"form-validation-1",level:2},{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"<strong>=&gt;</strong> to display error messages",id:"-to-display-error-messages",level:3},{value:"<strong>=&gt;</strong> Define a Validation Function",id:"-define-a-validation-function",level:3},{value:"<strong>=&gt;</strong> Displaying Error Messages",id:"-displaying-error-messages",level:3},{value:"<strong>=&gt;</strong> Styling the Error Text",id:"-styling-the-error-text",level:3},{value:"<strong>=&gt;</strong> Conclusion",id:"-conclusion",level:3}],u={toc:d},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"form-validation"},"Form Validation"),(0,a.kt)("h2",{id:"form-validation-1"},(0,a.kt)("strong",{parentName:"h2"},"Form Validation")),(0,a.kt)("blockquote",null),(0,a.kt)("h3",{id:"-intro"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In this video, Let's dive into form validation.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We will make sure our email and password fields have mandatory field validation."))),(0,a.kt)("h3",{id:"-to-display-error-messages"},(0,a.kt)("strong",{parentName:"h3"},"=>")," to display error messages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We need a way to display error messages to our users.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Let's start by creating a new state variable to store these messages.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We're going to call this ",(0,a.kt)("inlineCode",{parentName:"p"},"errors"),", the function ",(0,a.kt)("inlineCode",{parentName:"p"},"setErrors"),", and its initial value is an empty object."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This object will help us keep track of any errors that might pop up.")),(0,a.kt)("h3",{id:"-define-a-validation-function"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Define a Validation Function"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Now, let's define a function called ",(0,a.kt)("inlineCode",{parentName:"p"},"validateForm"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"This function will be the heart of our validation logic.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"It will check the fields and either populate our ",(0,a.kt)("inlineCode",{parentName:"p"},"errors")," object with messages or return true if everything is valid.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Similarly, one for the password."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n  const validateForm = () => {\n    let errors = {}\n    if (!username) errors.username = 'Username is require'\n    if (!password) errors.password = 'Password is require'\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We will then call ",(0,a.kt)("inlineCode",{parentName:"li"},"setErrors")," passing in the ",(0,a.kt)("inlineCode",{parentName:"li"},"errors")," object.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n  const validateForm = () => {\n    let errors = {}\n    if (!username) errors.username = 'Username is require'\n    if (!password) errors.password = 'Password is require'\n\n    setErrors(errors)\n\n    return Object.keys(errors).length === 0\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"So, if the ",(0,a.kt)("inlineCode",{parentName:"li"},"errors")," object doesn't have a key for username or password, we don't have any error messages, and our form is valid.")),(0,a.kt)("h3",{id:"-displaying-error-messages"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Displaying Error Messages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"But if you do have errors, we need to display them.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In our JSX, let's add error messages using a text component right after the text input.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We're going to check if a username error is present and render that message. If there is no error, we return null.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We'll also style this using ",(0,a.kt)("inlineCode",{parentName:"p"},"Styles.errorText"),", which we will define shortly.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'I\'m going to copy this, paste it after the other text input, and change occurrences of "username" to "password".'))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n  const validateForm = () => {\n    let errors = {}\n    if (!username) errors.username = 'Username is require'\n    if (!password) errors.password = 'Password is require'\n\n    setErrors(errors)\n\n    return Object.keys(errors).length === 0\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        {errors.username ? <Text style={styles.errorText}>{errors.username}</Text> : null}\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        {errors.password ? <Text style={styles.errorText}>{errors.password}</Text> : null}\n\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This way, our users will know exactly what they missed or what they need to correct.")),(0,a.kt)("h3",{id:"-styling-the-error-text"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Styling the Error Text"),(0,a.kt)("p",null,"-For the error text styles, we'll set color to red and a margin bottom."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n  const validateForm = () => {\n    let errors = {}\n    if (!username) errors.username = 'Username is require'\n    if (!password) errors.password = 'Password is require'\n\n    setErrors(errors)\n\n    return Object.keys(errors).length === 0\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        {errors.username ? <Text style={styles.errorText}>{errors.username}</Text> : null}\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        {errors.password ? <Text style={styles.errorText}>{errors.password}</Text> : null}\n\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n  errorText: {\n    color: 'red',\n    marginBottom: 10,\n  },\n})\n")),(0,a.kt)("p",null,"This will make sure our errors stand out."),(0,a.kt)("h3",{id:"-conclusion"},(0,a.kt)("strong",{parentName:"h3"},"=>")," Conclusion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"And there you have it\u2014simple yet effective form validation.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"But we are not done yet. In our next video, we will be handling form submission.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We will learn when to call this ",(0,a.kt)("inlineCode",{parentName:"p"},"validateForm")," function and how to log form values if the form is indeed valid."))))}m.isMDXComponent=!0}}]);