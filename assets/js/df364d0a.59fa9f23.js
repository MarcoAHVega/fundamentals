"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[1313],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=i,h=m["".concat(l,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:i,s[1]=o;for(var u=2;u<r;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1313:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:22},s="UseTransition hook",o={unversionedId:"4 React 18/22 useTransition hook",id:"4 React 18/22 useTransition hook",title:"UseTransition hook",description:"unlike use state and use effect use transition is a hook that is more concerned with performance rather than supporting a core functionality",source:"@site/docs/4 React 18/22 useTransition hook.md",sourceDirName:"4 React 18",slug:"/4 React 18/22 useTransition hook",permalink:"/fundamentals/4 React 18/22 useTransition hook",draft:!1,tags:[],version:"current",sidebarPosition:22,frontMatter:{sidebar_position:22},sidebar:"tutorialSidebar",previous:{title:"HTTP GET & POST request",permalink:"/fundamentals/4 React 18/21 HTTP GET & POST request"},next:{title:"Further learning",permalink:"/fundamentals/4 React 18/23 further learning"}},l={},u=[{value:"unlike use state and use effect use transition is a hook that is more concerned with performance rather than supporting a core functionality",id:"unlike-use-state-and-use-effect-use-transition-is-a-hook-that-is-more-concerned-with-performance-rather-than-supporting-a-core-functionality",level:3},{value:"now that we have our list let&#39;s render it in the app component",id:"now-that-we-have-our-list-lets-render-it-in-the-app-component",level:3},{value:"now what we want to do is allow the user to enter a filter text and filter the list of names based on that text",id:"now-what-we-want-to-do-is-allow-the-user-to-enter-a-filter-text-and-filter-the-list-of-names-based-on-that-text",level:3},{value:"everything works well but that is dependent on the machine you&#39;re running the application on",id:"everything-works-well-but-that-is-dependent-on-the-machine-youre-running-the-application-on",level:3},{value:"to solve this problem what we need is a way to tell react some updates are not urgent that would help react process the urgent updates first and then the not so urgent updates",id:"to-solve-this-problem-what-we-need-is-a-way-to-tell-react-some-updates-are-not-urgent-that-would-help-react-process-the-urgent-updates-first-and-then-the-not-so-urgent-updates",level:3},{value:"the useTransition hook allows us to mark some updates as interruptable and non-urgent",id:"the-usetransition-hook-allows-us-to-mark-some-updates-as-interruptable-and-non-urgent",level:3}],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"usetransition-hook"},"UseTransition hook"),(0,i.kt)("h3",{id:"unlike-use-state-and-use-effect-use-transition-is-a-hook-that-is-more-concerned-with-performance-rather-than-supporting-a-core-functionality"},"unlike use state and use effect use transition is a hook that is more concerned with performance rather than supporting a core functionality"),(0,i.kt)("p",null,"the use transition hook which was introduced in react 18."),(0,i.kt)("p",null,"the best way to understand use transition is with an example so let's\ndive into the code straight away"),(0,i.kt)("p",null,"for this example we need a large list of\nitems"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"i'm going to create a new file called ",(0,i.kt)("inlineCode",{parentName:"li"},"data.json")," and copy paste an array of 1000 names")),(0,i.kt)("p",null,"i have used mackaroo.com to generate this json data"),(0,i.kt)("p",null,"each object in the array contains a unique id first name and last name"),(0,i.kt)("h3",{id:"now-that-we-have-our-list-lets-render-it-in-the-app-component"},"now that we have our list let's render it in the app component"),(0,i.kt)("p",null,"at the top begin by importing the names json so import\nnames from dot slash components\nslash data dot json"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\n\nfunction App() {\n  return <div className='App'></div>\n}\n\nexport default App\n")),(0,i.kt)("p",null,"next in the jsx\nwe render the list of names using the map method"),(0,i.kt)("p",null,"very similar to list rendering that we\nhave learnt earlier"),(0,i.kt)("p",null,"so curly braces\nnames dot map"),(0,i.kt)("p",null,"map accepts a function as argument"),(0,i.kt)("p",null,"this function receives each object in the array as an argument let's call it item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\n\nfunction App() {\n  return <div className='App'>\n  {\n    NAMES.map((item)=> (\n\n    ))\n  }\n  </div>\n}\n\nexport default App\n")),(0,i.kt)("p",null,"for each item we render a paragraph that displays the first name and last name\nitem dot first name followed by\nitem dot last name"),(0,i.kt)("p",null,"make sure to also include the key prop\nwith a unique value when rendering a list of elements"),(0,i.kt)("p",null,"key is going to be equal to item dot id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\n\nfunction App() {\n  return (\n    <div className='App'>\n      {NAMES.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("p",null,"if we save the file and take a look at the browser"),(0,i.kt)("p",null,"we should be able to see the list of\n1000 names being displayed"),(0,i.kt)("h3",{id:"now-what-we-want-to-do-is-allow-the-user-to-enter-a-filter-text-and-filter-the-list-of-names-based-on-that-text"},"now what we want to do is allow the user to enter a filter text and filter the list of names based on that text"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"let's begin by adding the input field")),(0,i.kt)("p",null,"at the top\nimport you state from react"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState } from 'react'\n\nfunction App() {\n  return (\n    <div className='App'>\n      {NAMES.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"within the component create a state variable to manage the text field value")),(0,i.kt)("p",null,"so const query comma set query"),(0,i.kt)("p",null,"and this is going to be equal to use\nstate with an initial value of empty string"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  return (\n    <div className='App'>\n      {NAMES.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"in the jsx add an input field")),(0,i.kt)("p",null,"type is equal to text"),(0,i.kt)("p",null,"value is equal to query"),(0,i.kt)("p",null,"on change is equal to change handler"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  return (\n    <div className='App'>\n      <input type='text' value={query} onChange={changeHandler} />\n      {NAMES.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"let's define the handler")),(0,i.kt)("p",null,"const change handler\nis equal to an arrow function"),(0,i.kt)("p",null,"this receives an event\nand within the function body we call set query passing in event dot target dot\nvalue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function App() {\n  const [query, setQuery] = useState('')\n  const changeHandler = (event) => {\n    setQuery(event.target.value)\n  }\n  return (\n    <div className='App'>\n      <input type='text' value={query} onChange={changeHandler} />\n      {NAMES.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"now let's filter the names with this query text")),(0,i.kt)("p",null,"const filtered names\nis equal to names dot filter"),(0,i.kt)("p",null,"and for each item\nwe return either item dot first name includes the query\ntext or item dot last name includes the query text"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const changeHandler = (event) => {\n    setQuery(event.target.value)\n    const filteredNames = NAMES.filter((item) => {\n      return item.filter_name.includes(query) || item.last_name.includes(query)\n    })\n  }\n  return (\n    <div className='App'>\n      <input type='text' value={query} onChange={changeHandler} />\n      {NAMES.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("p",null,"finally instead of mapping over names map over filtered names"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const changeHandler = (event) => {\n    setQuery(event.target.value)\n    const filteredNames = NAMES.filter((item) => {\n      return item.filter_name.includes(query) || item.last_name.includes(query)\n    })\n  }\n  return (\n    <div className='App'>\n      <input type='text' value={query} onChange={changeHandler} />\n      {filteredNames.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("p",null,"if we now save the file and head to the browser we have our input and the list of names"),(0,i.kt)("p",null,"in the input field type bin and we see the filtered list of names"),(0,i.kt)("h3",{id:"everything-works-well-but-that-is-dependent-on-the-machine-youre-running-the-application-on"},"everything works well but that is dependent on the machine you're running the application on"),(0,i.kt)("p",null,"i have decent specifications on my machine but not everyone might have that"),(0,i.kt)("p",null,"so let's open the dev tools\nhead over to the performance tab and throttle cpu"),(0,i.kt)("p",null,"6x slow down"),(0,i.kt)("p",null,"we are basically asking our react app to\nbe run on a computer that is six times slower"),(0,i.kt)("p",null,"i want you to now observe what happens\nwhen i select the full text and hit backspace\nthree two one and backspace"),(0,i.kt)("p",null,"you can see there was a lag for almost a second before the ui updated"),(0,i.kt)("p",null,"and this is because the filtered list of names had to be recalculated"),(0,i.kt)("p",null,"if i type in bin again it feels slow as well"),(0,i.kt)("p",null,"it might not be visible to you but i can also sense the lag when typing"),(0,i.kt)("p",null,"what i want you to observe is that when i clear the text it is not cleared out right away\ninstead it waits for the filtered list to be recalculated and both the input\nfield and the list of names then update at the same time"),(0,i.kt)("p",null,"backspace and you can see both happen at the same time"),(0,i.kt)("p",null,"this is because by default all updates in react are considered\nurgent"),(0,i.kt)("p",null,"which as you might see can create a problem when quick updates like updating\nthe input field text is slowed down by heavy updates like recalculating the\nfiltered list"),(0,i.kt)("h3",{id:"to-solve-this-problem-what-we-need-is-a-way-to-tell-react-some-updates-are-not-urgent-that-would-help-react-process-the-urgent-updates-first-and-then-the-not-so-urgent-updates"},"to solve this problem what we need is a way to tell react some updates are not urgent that would help react process the urgent updates first and then the not so urgent updates"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"this is where the use transition hook comes into picture")),(0,i.kt)("h3",{id:"the-usetransition-hook-allows-us-to-mark-some-updates-as-interruptable-and-non-urgent"},"the useTransition hook allows us to mark some updates as interruptable and non-urgent"),(0,i.kt)("p",null,"or in other words we can mark them as transitions"),(0,i.kt)("p",null,"react will process urgent updates first and then transitions to improve the\nperceived performance"),(0,i.kt)("p",null,"let's see how it works"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"first import use transition from react")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState, useTransition } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const changeHandler = (event) => {\n    setQuery(event.target.value)\n    const filteredNames = NAMES.filter((item) => {\n      return item.filter_name.includes(query) || item.last_name.includes(query)\n    })\n  }\n  return (\n    <div className='App'>\n      <input type='text' value={query} onChange={changeHandler} />\n      {filteredNames.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"next invoke it within the component")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState, useTransition } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  useTransition()\n  const changeHandler = (event) => {\n    setQuery(event.target.value)\n    const filteredNames = NAMES.filter((item) => {\n      return item.filter_name.includes(query) || item.last_name.includes(query)\n    })\n  }\n  return (\n    <div className='App'>\n      <input type='text' value={query} onChange={changeHandler} />\n      {filteredNames.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("p",null,"the hook returns two values\nis pending which is a boolean value indicating whether the transition is in progress"),(0,i.kt)("p",null,"and a start transition function\nwhich is used to mark heavy updates as transitions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState, useTransition } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [isPending, startTransition] = useTransition()\n  const changeHandler = (event) => {\n    setQuery(event.target.value)\n    const filteredNames = NAMES.filter((item) => {\n      return item.filter_name.includes(query) || item.last_name.includes(query)\n    })\n  }\n  return (\n    <div className='App'>\n      <input type='text' value={query} onChange={changeHandler} />\n      {filteredNames.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"next we're going to create another state variable to manage the input text value separately")),(0,i.kt)("p",null,"so const input value\ncomma set input value is going to be equal to u state with an\nempty string as the initial value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState, useTransition } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [inputValue, setInputValue] = useState('')\n  const [isPending, startTransition] = useTransition()\n  const changeHandler = (event) => {\n    setQuery(event.target.value)\n    const filteredNames = NAMES.filter((item) => {\n      return item.filter_name.includes(query) || item.last_name.includes(query)\n    })\n  }\n  return (\n    <div className='App'>\n      <input type='text' value={query} onChange={changeHandler} />\n      {filteredNames.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("p",null,"but now we update the value prop\nto input value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState, useTransition } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [inputValue, setInputValue] = useState('')\n  const [isPending, startTransition] = useTransition()\n  const changeHandler = (event) => {\n    setQuery(event.target.value)\n    const filteredNames = NAMES.filter((item) => {\n      return item.filter_name.includes(query) || item.last_name.includes(query)\n    })\n  }\n  return (\n    <div className='App'>\n      <input type='text' value={inputValue} onChange={changeHandler} />\n      {filteredNames.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("p",null,"and in the change handler\ncall set input value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState, useTransition } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [inputValue, setInputValue] = useState('')\n  const [isPending, startTransition] = useTransition()\n  const changeHandler = (event) => {\n    setInputValue(event.target.value)\n    const filteredNames = NAMES.filter((item) => {\n      return item.filter_name.includes(query) || item.last_name.includes(query)\n    })\n  }\n  return (\n    <div className='App'>\n      <input type='text' value={inputValue} onChange={changeHandler} />\n      {filteredNames.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("p",null,"set query though we will still update\nwith the input value but as a transition"),(0,i.kt)("p",null,"so within change handler\ninvoke start transition function which accepts a callback\nso pass in another function and here we call set query passing in\nthe same input value"),(0,i.kt)("p",null,"so start transition accepts a function where we make the state change that causes a heavy update"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState, useTransition } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [inputValue, setInputValue] = useState('')\n  const [isPending, startTransition] = useTransition()\n\n  const changeHandler = (event) => {\n    setInputValue(event.target.value)\n    startTransition(() => setQuery(event.target.value))\n\n    const filteredNames = NAMES.filter((item) => {\n      return item.filter_name.includes(query) || item.last_name.includes(query)\n    })\n  }\n  return (\n    <div className='App'>\n      <input type='text' value={inputValue} onChange={changeHandler} />\n      {filteredNames.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("p",null,"query is used in the filter function which is the heavier operation"),(0,i.kt)("p",null,"in the jsx let's use the ease pending flag to\nrender some text and indicate that the transition is still pending"),(0,i.kt)("p",null,"so below the input curly braces\nis pending and a paragraph tag that says updating list ..."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './App.css'\nimport NAMES from './components/data.json'\nimport { useState, useTransition } from 'react'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [inputValue, setInputValue] = useState('')\n  const [isPending, startTransition] = useTransition()\n\n  const changeHandler = (event) => {\n    setInputValue(event.target.value)\n    startTransition(() => setQuery(event.target.value))\n  }\n  const filteredNames = NAMES.filter((item) => {\n    return item.filter_name.includes(query) || item.last_name.includes(query)\n  })\n  return (\n    <div className='App'>\n      <input type='text' value={inputValue} onChange={changeHandler} />\n      {isPending && <p>Updating list...</p>}\n      {filteredNames.map((item) => (\n        <p key={item.id}>\n          {item.first_name} {item.last_name}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n")),(0,i.kt)("p",null,"if we now head back to the browser\ntype bin we see the filter list"),(0,i.kt)("p",null,"but when i clear out the text i want you to observe that the input field text updates first and then the\nfiltered list updates after a small delay we will also see the updating list text\nbelow the input since the transition would be in progress\nthree two one backspace\nwe can see input is now cleared we see the text updating list\nand finally the list updates so we are able to separate the urgent\nupdates from the non-urgent updates this gives you a small improvement in\nthe performance or at least the perceived performance\nthat is how they use transition hook functions now as a beginner\nthis is the only new feature from react 18 that you need to be concerned about\nother features include automatic batching which is out of the box and you don't have to write any additional code\nand a few other features related to suspense and server-side rendering which are again advanced\ntopics"))}c.isMDXComponent=!0}}]);