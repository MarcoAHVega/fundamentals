"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[9423],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||r;return t?o.createElement(m,l(l({ref:n},p),{},{components:t})):o.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=f;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5144:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=t(7462),a=(t(7294),t(3905));const r={sidebar_position:4},l="Block Scope",i={unversionedId:"3 Javascript/functions-scope-docs/block-scope",id:"3 Javascript/functions-scope-docs/block-scope",title:"Block Scope",description:"Block scope is the scope that is available to all code inside of a block. A block is something like an if statement or any kind of loop. I know we haven't talked about these yet, but we'll get to them soon. Just know that they have their own scope.",source:"@site/docs/3 Javascript/03-functions-scope-docs/04-block-scope.md",sourceDirName:"3 Javascript/03-functions-scope-docs",slug:"/3 Javascript/functions-scope-docs/block-scope",permalink:"/fundamentals/3 Javascript/functions-scope-docs/block-scope",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Global & Function Scope",permalink:"/fundamentals/3 Javascript/functions-scope-docs/global-function-scope"},next:{title:"Nested Scope",permalink:"/fundamentals/3 Javascript/functions-scope-docs/nested-scope"}},s={},c=[{value:"Loop Example",id:"loop-example",level:3},{value:"let &amp; const vs var",id:"let--const-vs-var",level:3}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"block-scope"},"Block Scope"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Block scope")," is the scope that is available to all code inside of a ",(0,a.kt)("inlineCode",{parentName:"p"},"block"),". A block is something like an if statement or any kind of loop. I know we haven't talked about these yet, but we'll get to them soon. Just know that they have their own scope."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const x = 100\n\nif (true) {\n  console.log(x) // 100\n  const y = 200\n  console.log(x + y) // 300\n}\n\nconsole.log(y) // ReferenceError: y is not defined\n")),(0,a.kt)("p",null,"As you can see, we can not access ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," in the global scope because it belongs to the if statement block."),(0,a.kt)("h3",{id:"loop-example"},"Loop Example"),(0,a.kt)("p",null,"I know we have not gone over loops yet, but I want to show you that they do have their own block scope."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i < 10; i++) {\n  console.log(i)\n}\nconsole.log(i) // ReferenceError: i is not defined\n")),(0,a.kt)("p",null,"As you can see, ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," is only available inside of the loop."),(0,a.kt)("h3",{id:"let--const-vs-var"},"let & const vs var"),(0,a.kt)("p",null,"For all of these examples, I used ",(0,a.kt)("inlineCode",{parentName:"p"},"const")," to define my variables. Both ",(0,a.kt)("inlineCode",{parentName:"p"},"const")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," are block scoped. ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," on the other hand is NOT. Let's try an example with var."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (true) {\n  const a = 500\n  let b = 600\n  var c = 700\n}\n\nconsole.log(a) // ReferenceError: a is not defined\nconsole.log(b) // ReferenceError: b is not defined\nconsole.log(c) // 500\n")),(0,a.kt)("p",null,"If you use ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," with a for loop, it will also be accessible outside of the loop, which you do not want."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (var i = 0; i <= 10; i++) {\n  console.log(i)\n}\n\nconsole.log(i) // 11\n")),(0,a.kt)("p",null,"One thing I do want to mention is that ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," is at least ",(0,a.kt)("strong",{parentName:"p"},"function-scoped"),". So if you create a variable in a function with ",(0,a.kt)("inlineCode",{parentName:"p"},"var"),", it will not be accessible outside of the function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function run() {\n  var d = 100\n  console.log(d)\n}\n\nrun()\n\nconsole.log(d) // ReferenceError: d is not defined\n")),(0,a.kt)("p",null,"When it comes to which of the 3 to use, I would suggest using ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"const"),". Unless you have a good reason to use ",(0,a.kt)("inlineCode",{parentName:"p"},"var"),". Having variables that are not accessible outside of their scope is usually a good thing."),(0,a.kt)("p",null,"Another difference with ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," is that when you create a global variable using it, that variable is put on the ",(0,a.kt)("inlineCode",{parentName:"p"},"window")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const foo = 1\nvar bar = 2\n")),(0,a.kt)("p",null,"You can check by typing ",(0,a.kt)("inlineCode",{parentName:"p"},"window")," in your console and you will see ",(0,a.kt)("inlineCode",{parentName:"p"},"bar")," will be there"))}d.isMDXComponent=!0}}]);