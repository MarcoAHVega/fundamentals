"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[94],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(t),c=o,g=p["".concat(l,".").concat(c)]||p[c]||m[c]||i;return t?a.createElement(g,r(r({ref:n},u),{},{components:t})):a.createElement(g,r({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9149:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=t(7462),o=(t(7294),t(3905));const i={sidebar_position:63},r="KeyboardAvoidingView",s={unversionedId:"6 React Native Expo CLI/Section 8: Inputs and Forms/63 KeyboardAvoidingView",id:"6 React Native Expo CLI/Section 8: Inputs and Forms/63 KeyboardAvoidingView",title:"KeyboardAvoidingView",description:"KeyboardAvoidingView",source:"@site/docs/6 React Native Expo CLI/Section 8: Inputs and Forms/63 KeyboardAvoidingView.md",sourceDirName:"6 React Native Expo CLI/Section 8: Inputs and Forms",slug:"/6 React Native Expo CLI/Section 8: Inputs and Forms/63 KeyboardAvoidingView",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/63 KeyboardAvoidingView",draft:!1,tags:[],version:"current",sidebarPosition:63,frontMatter:{sidebar_position:63},sidebar:"tutorialSidebar",previous:{title:"Login Form",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/62 Login Form"},next:{title:"Form Validation",permalink:"/fundamentals/6 React Native Expo CLI/Section 8: Inputs and Forms/64 Form Validation"}},l={},d=[{value:"<strong>KeyboardAvoidingView</strong>",id:"keyboardavoidingview-1",level:2},{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"<strong>=&gt;</strong> Adding an Image",id:"-adding-an-image",level:3},{value:"<strong>=&gt;</strong> The Keyboard Overlay Issue",id:"-the-keyboard-overlay-issue",level:3},{value:"<strong>=&gt;</strong> Using KeyboardAvoidingView",id:"-using-keyboardavoidingview",level:3},{value:"<strong>=&gt;</strong> Addressing the Image Issue",id:"-addressing-the-image-issue",level:3},{value:"<strong>=&gt;</strong> Handling Platform-Specific Offset",id:"-handling-platform-specific-offset",level:3},{value:"<strong>=&gt;</strong> Conclusion",id:"-conclusion",level:3}],u={toc:d},p="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"keyboardavoidingview"},"KeyboardAvoidingView"),(0,o.kt)("h2",{id:"keyboardavoidingview-1"},(0,o.kt)("strong",{parentName:"h2"},"KeyboardAvoidingView")),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-intro"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In our last video, we built the UI for our login form, but as with most things in development, there is a common hiccup we run into when dealing with forms in React Native."),(0,o.kt)("li",{parentName:"ul"},"Let me show that to you.")),(0,o.kt)("h3",{id:"-adding-an-image"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Adding an Image"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"First, let's make a small change in our UI."),(0,o.kt)("li",{parentName:"ul"},"Above the username label, I'm going to render an image."),(0,o.kt)("li",{parentName:"ul"},"Make sure to import the component from React Native."),(0,o.kt)("li",{parentName:"ul"},"We're going to require the Adaptive icon from the assets folder:"),(0,o.kt)("li",{parentName:"ul"},"We will also add ",(0,o.kt)("inlineCode",{parentName:"li"},"style")," is equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"Styles.image"),","),(0,o.kt)("li",{parentName:"ul"},"and with the StyleSheet API, a new key ",(0,o.kt)("inlineCode",{parentName:"li"},"image")," with a height of 200, width of 200, ",(0,o.kt)("inlineCode",{parentName:"li"},"alignSelf")," set to ",(0,o.kt)("inlineCode",{parentName:"li"},"center"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"marginBottom")," of 50.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet, Image } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 200,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("h3",{id:"-the-keyboard-overlay-issue"},(0,o.kt)("strong",{parentName:"h3"},"=>")," The Keyboard Overlay Issue"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now, if we jump back to our UI, we can see the form with the Adaptive icon image."),(0,o.kt)("li",{parentName:"ul"},"If we tap on the password field on the iOS device and press ",(0,o.kt)("inlineCode",{parentName:"li"},"Command+Shift+K")," to bring up the keyboard, do you notice something off?"),(0,o.kt)("li",{parentName:"ul"},"The keyboard completely overlays the input element; it's practically invisible."),(0,o.kt)("li",{parentName:"ul"},"And let's be honest, this is not a great user experience.")),(0,o.kt)("h3",{id:"-using-keyboardavoidingview"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Using KeyboardAvoidingView"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Luckily, React Native has a solution for us: the ",(0,o.kt)("inlineCode",{parentName:"li"},"KeyboardAvoidingView")," component."),(0,o.kt)("li",{parentName:"ul"},"Let's import it from React Native."),(0,o.kt)("li",{parentName:"ul"},"Now, replace our outermost ",(0,o.kt)("inlineCode",{parentName:"li"},"View")," container with ",(0,o.kt)("inlineCode",{parentName:"li"},"KeyboardAvoidingView"),", both opening and closing tags."),(0,o.kt)("li",{parentName:"ul"},"On this component, we also set a prop ",(0,o.kt)("inlineCode",{parentName:"li"},"behavior")," is equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"padding"),"."),(0,o.kt)("li",{parentName:"ul"},"This ensures that the component increases its padding at the bottom, matching the keyboard's height.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 200,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("h3",{id:"-addressing-the-image-issue"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Addressing the Image Issue"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's take a look at our UI, tap on the password, and our form gracefully moves up, revealing the input element."),(0,o.kt)("li",{parentName:"ul"},"Problem solved! Well, not entirely."),(0,o.kt)("li",{parentName:"ul"},"I'm going to set the image height to 400.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now, if we revisit our UI, you'll notice that the input is hiding again when the keyboard pops up."),(0,o.kt)("li",{parentName:"ul"},"Once again, we have a fix, and that is a prop called ",(0,o.kt)("inlineCode",{parentName:"li"},"keyboardVerticalOffset"),"."),(0,o.kt)("li",{parentName:"ul"},"Setting it to 100 usually does the trick.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={100}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("h3",{id:"-handling-platform-specific-offset"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Handling Platform-Specific Offset"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"But wait, there is a tiny problem for our Android users. When I tap on the password field, you can see there is this unnecessary space that is introduced by the offset."),(0,o.kt)("li",{parentName:"ul"},"So what is the solution? Well, a platform-specific offset."),(0,o.kt)("li",{parentName:"ul"},"Let's import the ",(0,o.kt)("inlineCode",{parentName:"li"},"Platform")," module and adjust our offset to only apply to iOS devices:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we restart our application and take a look at our UI, we see that the UI is much better on both Android and iOS.")),(0,o.kt)("h3",{id:"-conclusion"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"KeyboardAvoidingView")," can be a tricky component in React Native; it might test your patience."),(0,o.kt)("li",{parentName:"ul"},"But with the basics we have covered today, you're well positioned to deal with it.")))}m.isMDXComponent=!0}}]);