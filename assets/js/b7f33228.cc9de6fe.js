"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[691],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(n),h=l,y=m["".concat(p,".").concat(h)]||m[h]||c[h]||i;return n?a.createElement(y,r(r({ref:t},u),{},{components:n})):a.createElement(y,r({ref:t},u))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=h;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4836:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const i={sidebar_position:20},r="The StyleSheet API",o={unversionedId:"6 React Native Expo CLI/Section 3: Styling/20 StyleSheet API",id:"6 React Native Expo CLI/Section 3: Styling/20 StyleSheet API",title:"The StyleSheet API",description:"The StyleSheet API",source:"@site/docs/6 React Native Expo CLI/Section 3: Styling/20 StyleSheet API.md",sourceDirName:"6 React Native Expo CLI/Section 3: Styling",slug:"/6 React Native Expo CLI/Section 3: Styling/20 StyleSheet API",permalink:"/fundamentals/6 React Native Expo CLI/Section 3: Styling/20 StyleSheet API",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Styling React Native apps",permalink:"/fundamentals/6 React Native Expo CLI/Section 3: Styling/19 Styling"},next:{title:"Multiple Styles",permalink:"/fundamentals/6 React Native Expo CLI/Section 3: Styling/21 Multiple Styles"}},p={},s=[{value:"<strong>The StyleSheet API</strong>",id:"the-stylesheet-api-1",level:2},{value:"<strong>=&gt;</strong> Intro",id:"-intro",level:3},{value:"<strong>=&gt;</strong> Using inline styles",id:"-using-inline-styles",level:3},{value:"<strong>=&gt;</strong> Using the StyleSheet API",id:"-using-the-stylesheet-api",level:3},{value:"<strong>=&gt;</strong> why use StyleSheet API over inline styles",id:"-why-use-stylesheet-api-over-inline-styles",level:3},{value:"<strong>=&gt;</strong> Creating a style object without using the StyleSheet API",id:"-creating-a-style-object-without-using-the-stylesheet-api",level:3}],u={toc:s},m="wrapper";function c(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"the-stylesheet-api"},"The StyleSheet API"),(0,l.kt)("h2",{id:"the-stylesheet-api-1"},(0,l.kt)("strong",{parentName:"h2"},"The StyleSheet API")),(0,l.kt)("blockquote",null),(0,l.kt)("h3",{id:"-intro"},(0,l.kt)("strong",{parentName:"h3"},"=>")," Intro"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"In this video, we will explore the StyleSheet API which allows us to style components in React Native.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"For this section on styling, we have created a new Expo project called ",(0,l.kt)("inlineCode",{parentName:"p"},"StylingRN"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"However, you can continue working on the same core components project from the previous section if you prefer to.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Just ensure that you start with an empty ",(0,l.kt)("inlineCode",{parentName:"p"},"app.js")," file to follow along."))),(0,l.kt)("h3",{id:"-using-inline-styles"},(0,l.kt)("strong",{parentName:"h3"},"=>")," Using inline styles"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Let's start by quickly creating a component that will render some text at the top:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"On the ",(0,l.kt)("inlineCode",{parentName:"p"},"View")," component, we add the ",(0,l.kt)("inlineCode",{parentName:"p"},"style")," prop with ",(0,l.kt)("inlineCode",{parentName:"p"},"flex")," set to ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," so as to occupy the entire available space, a ",(0,l.kt)("inlineCode",{parentName:"p"},"backgroundColor")," , and finally ",(0,l.kt)("inlineCode",{parentName:"p"},"padding")," ."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>StyleSheet API</Text>\n    </View>\n  )\n}\n")))),(0,l.kt)("h3",{id:"-using-the-stylesheet-api"},(0,l.kt)("strong",{parentName:"h3"},"=>")," Using the StyleSheet API"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If we save the file and take a look at the two devices, we can see the expected UI.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"This approach uses inline styling which we have already come across. Although inline styles work fine, they are not the recommended approach for styling in React Native.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"In fact, you will rarely find them in a codebase.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The preferred method is to use the StyleSheet API.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Let me demonstrate how to use it by replacing the inline style.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"To begin, import the StyleSheet API from React Native:"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>StyleSheet API</Text>\n    </View>\n  )\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Next, below the ",(0,l.kt)("inlineCode",{parentName:"li"},"App")," component, call the ",(0,l.kt)("inlineCode",{parentName:"li"},"create")," method on the StyleSheet API, and assign the returned value to a constant called ",(0,l.kt)("inlineCode",{parentName:"li"},"styles")," :")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>StyleSheet API</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({})\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"As an argument to the ",(0,l.kt)("inlineCode",{parentName:"p"},"create")," method, provide an object that contains key-value pairs.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"You can choose any key name you want to, but it is recommended to give them semantic meaning.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"For example, I will limit ",(0,l.kt)("inlineCode",{parentName:"p"},"container")," .")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The value should be an object containing key-value pairs similar to CSS properties and values but in JavaScript.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"In our case, we can extract the styles from the ",(0,l.kt)("inlineCode",{parentName:"p"},"style")," prop and assign them to the ",(0,l.kt)("inlineCode",{parentName:"p"},"container")," key.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"So cut the object and specify as the value to ",(0,l.kt)("inlineCode",{parentName:"p"},"container")," .")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Now, for the ",(0,l.kt)("inlineCode",{parentName:"p"},"style")," prop on the ",(0,l.kt)("inlineCode",{parentName:"p"},"View")," component, specify ",(0,l.kt)("inlineCode",{parentName:"p"},"styles.container")," ."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>StyleSheet API</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n})\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If we save the file, we can see that the UI remains the same as before, but this time we have styled our component using the StyleSheet API.")),(0,l.kt)("h3",{id:"-why-use-stylesheet-api-over-inline-styles"},(0,l.kt)("strong",{parentName:"h3"},"=>")," why use StyleSheet API over inline styles"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Now, there are a couple of reasons:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"First, by moving styles away from the render function, you ",(0,l.kt)("inlineCode",{parentName:"p"},"make the code easier to read and understand"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Second, naming the styles ",(0,l.kt)("inlineCode",{parentName:"p"},"adds meaning to the low-level components in the render function"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"For example, you could create a ",(0,l.kt)("inlineCode",{parentName:"p"},"title")," style and assign it to the ",(0,l.kt)("inlineCode",{parentName:"p"},"Text")," component as ",(0,l.kt)("inlineCode",{parentName:"p"},"styles.title")," ."))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={style.title}>StyleSheet API</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  title: {},\n})\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"This makes it clear that the ",(0,l.kt)("inlineCode",{parentName:"p"},"View")," represents the container and the ",(0,l.kt)("inlineCode",{parentName:"p"},"Text")," represents the title for the screen.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Finally, organizing styles in this manner ",(0,l.kt)("inlineCode",{parentName:"p"},"makes the code reusable and easier to maintain"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Imagine having the same inline styles across multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"Text")," components and you need to change the font size.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"You would have to update each component style individually.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"However, by grouping the styles using the StyleSheet API, you only need to change it once as the updated ",(0,l.kt)("inlineCode",{parentName:"p"},"title")," style will be reflected across all components.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"It is also important to note that these styles can only be used within the same file.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"However, you do have the option to create a separate Global Styles file and export the styles object."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"export const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  title: {},\n})\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"You can then use it in any file throughout your codebase.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"This allows for reusing the styles across different components and promoting consistency in your application's visual design.")),(0,l.kt)("li",{parentName:"ul"})),(0,l.kt)("h3",{id:"-creating-a-style-object-without-using-the-stylesheet-api"},(0,l.kt)("strong",{parentName:"h3"},"=>")," Creating a style object without using the StyleSheet API"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Well, in that case, you won't have access to autocomplete suggestions.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If I try to add a margin, you can see we don't have any autocomplete.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"But the same with the StyleSheet API, we have access to those autocomplete suggestions.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"And trust me, in React Native, having the assistance is valuable since the property names are quite different from what you're used to in the browser.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"All right, I hope you now have a clear understanding of the two methods of styling React Native components: inline styles and the StyleSheet API. The StyleSheet API is the recommended approach as it promotes writing organized, easy-to-read, and maintainable code."))))}c.isMDXComponent=!0}}]);