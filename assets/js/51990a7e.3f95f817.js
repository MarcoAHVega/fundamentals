"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[1747],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),g=a,h=u["".concat(s,".").concat(g)]||u[g]||c[g]||l;return n?i.createElement(h,r(r({ref:t},p),{},{components:n})):i.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,r[1]=o;for(var d=2;d<l;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var i=n(7462),a=(n(7294),n(3905));const l={sidebar_position:22},r="Box Model",o={unversionedId:"6 React Native/Section 3: Styling/22 Box Model",id:"6 React Native/Section 3: Styling/22 Box Model",title:"Box Model",description:"- In this video, let's take a look at the different styles applicable in relation to the CSS Box model.",source:"@site/docs/6 React Native/Section 3: Styling/22 Box Model.md",sourceDirName:"6 React Native/Section 3: Styling",slug:"/6 React Native/Section 3: Styling/22 Box Model",permalink:"/fundamentals/6 React Native/Section 3: Styling/22 Box Model",draft:!1,tags:[],version:"current",sidebarPosition:22,frontMatter:{sidebar_position:22},sidebar:"tutorialSidebar",previous:{title:"Multiple Styles",permalink:"/fundamentals/6 React Native/Section 3: Styling/21 Multiple Styles"},next:{title:"Shadow and Elevation",permalink:"/fundamentals/6 React Native/Section 3: Styling/23 Shadow and Elevation"}},s={},d=[{value:"Height and Width Properties",id:"height-and-width-properties",level:3},{value:"Padding",id:"padding",level:3},{value:"Margin",id:"margin",level:3},{value:"Borders",id:"borders",level:3},{value:"Border Radius",id:"border-radius",level:3}],p={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"box-model"},"Box Model"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In this video, let's take a look at the different styles applicable in relation to the CSS Box model."),(0,a.kt)("li",{parentName:"ul"},"As you may already know, ",(0,a.kt)("inlineCode",{parentName:"li"},"the CSS Box model represents a box that encloses every HTML element consisting of margins, borders, padding, and the actual content"),"."),(0,a.kt)("li",{parentName:"ul"},"Interestingly, ",(0,a.kt)("inlineCode",{parentName:"li"},"these properties are also applicable to React Native components"),"."),(0,a.kt)("li",{parentName:"ul"},"Let's delve into the specifics of these properties in this video.")),(0,a.kt)("h3",{id:"height-and-width-properties"},"Height and Width Properties"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"To begin, let's discuss the height and width properties."),(0,a.kt)("li",{parentName:"ul"},"These properties have already been covered in the previous videos of the series."),(0,a.kt)("li",{parentName:"ul"},"They're used to define the dimensions of a component."),(0,a.kt)("li",{parentName:"ul"},"It is important to note that ",(0,a.kt)("inlineCode",{parentName:"li"},"in React Native, all dimensions are unitless")," and represent density independent pixels."),(0,a.kt)("li",{parentName:"ul"},"No specific units like Rems or pixels are required."),(0,a.kt)("li",{parentName:"ul"},"In our example, both the width and height are set to 100.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View>\n        <Text style={[styles.lightBlueBg, styles.box]}>Lightblue box</Text>\n      </View>\n      <View>\n        <Text style={[styles.box, styles.lightGreenBg]}>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  box: {\n    width: 100,\n    height: 100,\n    padding: 10,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"But what you can do is specify percentage values."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"when the parent's dimensions are defined. Child components can have percentage dimensions"),"."),(0,a.kt)("li",{parentName:"ul"},"In this case, since the container has a flex value of 1, occupying the entire available screen space, we can set the Box's width and height to 25 percent.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View>\n        <Text style={[styles.lightBlueBg, styles.box]}>Lightblue box</Text>\n      </View>\n      <View>\n        <Text style={[styles.box, styles.lightGreenBg]}>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  box: {\n    width: '25%',\n    height: '25%',\n    padding: 10,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"As a result, you can observe that the Box width and height now account for 25 percent of the apparent container's width and height, respectively."),(0,a.kt)("li",{parentName:"ul"},"Together, the two boxes occupy fifty percent of the available height and 25 percent of the available width."),(0,a.kt)("li",{parentName:"ul"},"So this covers the width and height aspects of the element.")),(0,a.kt)("h3",{id:"padding"},"Padding"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Moving on, let's talk about padding."),(0,a.kt)("li",{parentName:"ul"},"Similar to CSS for the web, ",(0,a.kt)("inlineCode",{parentName:"li"},"React Native allows us to specify padding in all four directions.")),(0,a.kt)("li",{parentName:"ul"},"Additionally, there are a few properties in React Native that you should be aware of."),(0,a.kt)("li",{parentName:"ul"},"You can individually set padding in the horizontal and vertical directions using ",(0,a.kt)("inlineCode",{parentName:"li"},"paddingHorizontal")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"paddingVertical")," ."),(0,a.kt)("li",{parentName:"ul"},"So, let's comment out padding and instead add ",(0,a.kt)("inlineCode",{parentName:"li"},"paddingHorizontal: 10")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"paddingVertical: 20")," . Take a look at the UI,")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 100,\n    height: 100,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"and you will see the styles work as expected.")),(0,a.kt)("h3",{id:"margin"},"Margin"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The margin property also functions similarly to its CSS counterpart, and in React Native, we can utilize ",(0,a.kt)("inlineCode",{parentName:"li"},"marginHorizontal")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"marginVertical")," as well."),(0,a.kt)("li",{parentName:"ul"},"So, ",(0,a.kt)("inlineCode",{parentName:"li"},"margin: 10")," works completely fine, but we can also have ",(0,a.kt)("inlineCode",{parentName:"li"},"marginVertical: 10")," . Take a look at the UI,")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 100,\n    height: 100,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"and we now clearly see the spacing between the two boxes because of the vertical margin.")),(0,a.kt)("h3",{id:"borders"},"Borders"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Next, let's take a look at borders in React Native."),(0,a.kt)("li",{parentName:"ul"},"In traditional web CSS, we often specify the border with a shorthand property like ",(0,a.kt)("inlineCode",{parentName:"li"},"border: 2px solid purple")," ."),(0,a.kt)("li",{parentName:"ul"},"However, this approach does not work in React Native."),(0,a.kt)("li",{parentName:"ul"},"Instead, we need to specify the properties individually."),(0,a.kt)("li",{parentName:"ul"},"First, we set ",(0,a.kt)("inlineCode",{parentName:"li"},"borderWidth")," to 2. Next, we have ",(0,a.kt)("inlineCode",{parentName:"li"},"borderColor"),' , which is a string "purple". Finally, we have ',(0,a.kt)("inlineCode",{parentName:"li"},"borderStyle"),' , which is set to "solid" by default, so we don\'t need to explicitly mention it.')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 100,\n    height: 100,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Take a look at the simulator, and you will see the purple border applied to both boxes.")),(0,a.kt)("h3",{id:"border-radius"},"Border Radius"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Finally, I want to highlight a nuance regarding border radius in iOS versus Android."),(0,a.kt)("li",{parentName:"ul"},"If we set a border radius on a text component, let's go with inline styles for now: ",(0,a.kt)("inlineCode",{parentName:"li"},"borderRadius: 5")," and this needs a background color, so ",(0,a.kt)("inlineCode",{parentName:"li"},'backgroundColor: "red" '),",")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 100,\n    height: 100,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"you will notice that it only applies to Android and not iOS."),(0,a.kt)("li",{parentName:"ul"},"We have the curved border in Android but not iOS."),(0,a.kt)("li",{parentName:"ul"},"However, if we apply ",(0,a.kt)("inlineCode",{parentName:"li"},"borderRadius")," to the view component, so ",(0,a.kt)("inlineCode",{parentName:"li"}," borderRadius: 5"),",")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 100,\n    height: 100,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"you will observe that the boxes have rounded corners on both platforms."),(0,a.kt)("li",{parentName:"ul"},"This is an important distinction to keep in mind."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Border radius is applicable to the view component across both platforms, but for the text component, it only applies to Android"),"."),(0,a.kt)("li",{parentName:"ul"},"If you wish to add a border radius to text, ",(0,a.kt)("inlineCode",{parentName:"li"},"the solution is to wrap it with a view component and apply the border radius to the view component instead."))),(0,a.kt)("p",null,"I hope you are able to slowly recognize the differences in styling between the web and React Native, as well as the variations in styling for iOS and Android platforms."))}c.isMDXComponent=!0}}]);